[{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Clinical Trial Simulation","text":"Normally want simulate patients response define regimen just simulate forward specified point time. works well compounds relatively safe, PK consistent time, drug concentrations required achieve efficacy consistent. fact restrictions apply many different compounds. However, many scenarios necessary adjust dosing based periodic clinical visits: compounds narrow therapeutic index, disease progression alters drug PK requires increases dose amount, etc. possible manually current simulation tools provided, section outlines generalized framework make easier users.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Clinical Trial Simulation","text":"underlying simulations run using rxode2, need rxode2 system object. can either simulate subjects load file. Next need define set rules. set conditions actions. evaluation time point conditions evaluated. condition met actions associated condition executed. example, visit (evaluation time point) trough PK certain level (condition) may want increase dosing regimen next dosing cycle (action).","code":""},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"creating-subjects","dir":"Articles","previous_headings":"Overview","what":"Creating subjects","title":"Clinical Trial Simulation","text":"Subjects expected data frame following column headers: id Individual subject id Names parameters iiv specified ini section rxode2 function specification Names covariates used model. mk_subjects() — Creates subjects simulation sampling based -subject variability generating covariate information based user specifications.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"covariates","dir":"Articles","previous_headings":"Overview > Creating subjects","what":"Covariates","title":"Clinical Trial Simulation","text":"covs input list following structure: type: Can either “fixed”, “discrete”, “continuous”. sampling: field needed “continuous” covariate ’ type can either “random”, “normal” “log-normal”. fixed: single value. discrete: vector possible discrete elements. continuous, random: Two values first lower bound second upper bound. continuous, normal: Two values first mean second variance. continuous, log-normal: Two values first mean second variance. examples shows SEX_ID randomly sampled values specified, SUBTYPE_ID fixed value, WT sampled log-normal distribution.","code":"covs = list(   SEX_ID     = list(type     = \"discrete\",                      values   = c(0,1)),   SUBTYPE_ID = list(type     = \"fixed\",                     values   = c(0)),   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"rule-based-simulations","dir":"Articles","previous_headings":"Overview","what":"Rule-based simulations","title":"Clinical Trial Simulation","text":"simulate_rules() — run simulations based rule definitions .","code":""},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"rules","dir":"Articles","previous_headings":"Overview > Rule-based simulations","what":"Rules","title":"Clinical Trial Simulation","text":"Rules named list list name can short descriptive label used remember rule . names returned columns simulated data frame. condition: Character string evaluates either TRUE FALSE. true action portion triggered. list objects available see Rule-evaluation environment . fail_flag: Flag set rule_id column condition met (set \"false\" specified). true_flag: Flag set rule_id column condition met (set \"true\" specified). type: defines action type can either \"dose\", \"set state\", \"manual\". Based type action field expect different elements. Dosing: type: \"dose\" values: Character string evaluates numeric vector dosing amounts (e.g. \"c(3,  3,  3,  3)\") times: Character string evaluates numeric vector times (e.g. \"c(0, 14, 28, 42)\") durations: Character string evaluates numeric vector durations (e.g. \"c(0, 0, 0, 0)\", zero bolus dosing) Changing state value: type: \"set state\" state: Character string name state set (\"Ac\") value: Character string evaluates numeric value state (e.g. \"Ac/2\" set state half value Ac evaluation point) Manual modification simulation: type: \"manual\" code: Character string code evaluate.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"rule-evaluation-environment","dir":"Articles","previous_headings":"Overview > Rule-based simulations","what":"Rule-evaluation environment","title":"Clinical Trial Simulation","text":"Beyond simple simulations necessary execute actions based current previous state system. reason, condition elements action (e.g., values, times durations dose action type) evaluated, following objects available evaluation point: outputs: value model output. states: value named state compartment. covariates: value named covariate. subject-level parameters: value named parameter. rule value: last value rule evaluated . id: Current subject id. time: Current evaluation time. SI_SUB_HISTORY: data frame simulation history current subject current evaluation point. SI_subjects: subjects data frame. SI_eval_times: Vector evaluation times. SI_interval_ev: events table ’s current state given simulation interval. SI_ev_history: history event table containing events leading current interval. SI_ud_history: free form object user can define alter within “manual”action type (ud-user defined, history).","code":""},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"the-following-functions-will-be-available","dir":"Articles","previous_headings":"Overview > Rule-based simulations > Rule-evaluation environment","what":"The following functions will be available:","title":"Clinical Trial Simulation","text":"SI_fpd: function fetch previous dose (fpd) given id state. example current id state Ac following:","code":"SI_fpd(id=id, state=\"Ac\")"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"time-scales","dir":"Articles","previous_headings":"Overview > Rule-based simulations","what":"Time scales","title":"Clinical Trial Simulation","text":"can include columns output different time scales wish. need create list format . One element system short name system time scale. next details list containing short names time scale want include. list verbose name time scale (verb) numerical conversion indicating time scale relates others. define weeks days basis seconds.","code":"time_scales = list(system=\"days\",                  details= list(                   weeks = list(verb=\"Weeks\",    conv=1/(60*60*24*7)),                   days  = list(verb=\"Days\",     conv=1/(60*60*24))))"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"example-fixed-dosing","dir":"Articles","previous_headings":"","what":"Example: Fixed dosing","title":"Clinical Trial Simulation","text":"explore framework simple system describing antibody PK driving change biomarker indirect response used. time scale model days system shown bottom want look . can also find {rumiante} package :","code":"system.file(package=\"ruminate\", \"test_apps\", \"test_rxode2_system.R\")"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"creating-the-rxode2-object","dir":"Articles","previous_headings":"Example: Fixed dosing","what":"Creating the rxode2 object","title":"Clinical Trial Simulation","text":"source example file create function my_model. can convert rxode2 object:","code":"source(system.file(package=\"ruminate\", \"test_apps\", \"test_rxode2_system.R\")) object = rxode2(my_model)"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"defining-subjects","dir":"Articles","previous_headings":"Example: Fixed dosing","what":"Defining subjects","title":"Clinical Trial Simulation","text":"first thing want create subjects. can using interindividual variability system. systems covariates need define . example three covariates needed. list create sampling SEX_ID randomly discrete distribution, fixing SUBTYPE_ID 0, sampling WT log-normal distribution.","code":"covs = list(   SEX_ID     = list(type     = \"discrete\",                      values   = c(0,1)),   SUBTYPE_ID = list(type     = \"fixed\",                     values   = c(0)),   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) ) subs = mk_subjects(object = object,                    nsub   = 6,                    covs   = covs) ##   id TV_F1 TV_ka     TV_CL    TV_Vc    TV_Vp       TV_Q TV_MW TV_BM_IC ## 1  1 0.744 0.282 -1.609438 1.283708 1.011601 -0.2916901   140     1000 ## 2  2 0.744 0.282 -1.609438 1.283708 1.011601 -0.2916901   140     1000 ## 3  3 0.744 0.282 -1.609438 1.283708 1.011601 -0.2916901   140     1000 ## 4  4 0.744 0.282 -1.609438 1.283708 1.011601 -0.2916901   140     1000 ## 5  5 0.744 0.282 -1.609438 1.283708 1.011601 -0.2916901   140     1000 ## 6  6 0.744 0.282 -1.609438 1.283708 1.011601 -0.2916901   140     1000 ##   TV_kdeg_BM TV_Emax TV_EC50       ETAka       ETACL       ETAVc       ETAVp ## 1        0.1     100     300 -0.06502712 -0.03374875 -0.29360237  0.18318315 ## 2        0.1     100     300 -0.91950087  0.21719197 -0.07600775  0.11721364 ## 3        0.1     100     300 -0.54876273 -0.38299472 -0.42219488  0.02543533 ## 4        0.1     100     300 -0.05907706  0.23752569  0.01166484  0.02450331 ## 5        0.1     100     300 -0.50282444 -0.27998464 -0.26548086 -0.33995745 ## 6        0.1     100     300 -0.63718821 -0.62728988 -0.59757486 -0.12833066 ##         ETAQ    ETABM_IC      ETAEmax SEX_ID SUBTYPE_ID       WT ## 1  0.6674704 -0.03311960  0.058217838      1          0 77.83891 ## 2 -1.4290817 -0.09637395 -0.469456427      0          0 72.11971 ## 3 -0.4469244 -0.20538254 -0.558499454      1          0 61.23125 ## 4 -0.3581637 -0.08295268 -0.002047025      0          0 78.62028 ## 5 -0.8159133  0.06642836 -0.045310592      1          0 66.47021 ## 6  1.4513064  0.24280136  0.205796418      1          0 82.88065"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"creating-rules","dir":"Articles","previous_headings":"Example: Fixed dosing","what":"Creating rules","title":"Clinical Trial Simulation","text":"rules named list. list names arbitrary used track going . list two required elements. condition action. condition character string evaluated results either TRUE FALSE. action list type list elements based type. Shown \"dose\" type action: can optionally add true_value false_value stored simulated output indicate evaluation status condition. setting dose type need also provide elements values, times, durations. character objects can evaluated provide vectors. ’s important note following providing dose type action: lengths equal. Times relative evaluation time point.","code":"rules = list(   low_dose = list(     condition = \"TRUE\",     true_value  = \"3mg\",     false_value = \"0\",     action    = list(       type  = \"dose\",       state     = \"Ac\",        values    = \"c(3,  3,  3,  3)*1e6/MW\",       times     = \"c(0, 14, 28, 42)\",       durations = \"c(0,  0,  0,  0)\")     )  )"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"evaluation-times","dir":"Articles","previous_headings":"Example: Fixed dosing","what":"Evaluation times","title":"Clinical Trial Simulation","text":"subjects rules defined need define timepoints rules evaluated. case considering 7 cycles (0 6) 8 weeks (2*28) .","code":"eval_times =  (0:6)*28*2"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"running-simulations","dir":"Articles","previous_headings":"Example: Fixed dosing","what":"Running simulations","title":"Clinical Trial Simulation","text":"define output times want simulation. Note last evlation point day 336 (6*2*8), follow timecourse one cycle day 392 (7*2*8). want pass options rxode2 can creating named list option name value paired together: Lastly can passed simulate_rules():","code":"output_times = seq(0, 7*28*2, 10) rx_options = list(    covsInterpolation = \"locf\",    addCov=TRUE ) simres =  simulate_rules(object        = object,                subjects      = subs[[\"subjects\"]],                eval_times    = eval_times,                output_times  = output_times,                 rules         = rules,                rx_options    = rx_options)"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"example-resetting-states","dir":"Articles","previous_headings":"","what":"Example Resetting states","title":"Clinical Trial Simulation","text":"action type \"set state\" can used arbitrarily set value state system. setting central compartment value 10 time zero. time 56 increase value peripheral compartment Cp factor 5.","code":"rules = list(   reset_Ac    = list(    condition = \"time == 0\",    true_flag  = \"Ac set\",    false_flag = \"\",    action    = list(      type     = \"set state\",      state    = \"Ac\",      value    = \"10\")    ),  reset_Cp    = list(    condition = \"time == 56\",    true_flag  = \"Cp set\",    false_flag = \"\",    action    = list(      type     = \"set state\",      state    = \"Cp\",      value    = \"Cp*5\")   ) )  simres =  simulate_rules(object        = object,                subjects      = subs[[\"subjects\"]],                eval_times    = eval_times,                output_times  = output_times,                 rules         = rules,                rx_options    = rx_options)"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"example-manual-code-evaluation","dir":"Articles","previous_headings":"","what":"Example: Manual code evaluation","title":"Clinical Trial Simulation","text":"find need something complicated can include functions preamble use functions methods . Alternatively can create code use \"manual\" rule type modify event table using objects rule evaluation environment . code simply setting state current subject id value.","code":"code=\" SI_interval_ev = etRbind(SI_interval_ev, et(cmt  = 'Ac',    id   = id,    amt  = 10,    evid = 4,    time = time))\"  rules = list(   manual_example = list(     condition = \"time == 56\",     true_flag  = \"manual\",     false_flag = \"\",     action    = list(       type  = \"manual\",       code      = code     )   ) )  simres =  simulate_rules(object        = object,                subjects      = subs[[\"subjects\"]],                eval_times    = eval_times,                output_times  = output_times,                 rules         = rules,                rx_options    = rx_options)"},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"example-titrated-dosing-of-a-biomarker","dir":"Articles","previous_headings":"","what":"Example: Titrated dosing of a biomarker","title":"Clinical Trial Simulation","text":"examples demonstrate mechanics perform rule-based simualtions. example provide concrete demonstration use elements together. want titrate dosing biomarker within range. range want maintain dose. first rule active time 0 initialize dosing 0.1 mg. remaining rules active first dose time 0 biomarker range (ss_dose_increase ), range (ss_dose_decrease), range (ss_dose_keep). use simulation internal function SI_fpd fetch previous dose select new dose fraction previous. need can create functions use action fields. just need create character string function definitions pass preamble input simulate_rules().","code":"rules = list(  first_cycle = list(    condition = \"time == 0\",    true_flag  = \"first cycle\",    false_flag = \"\",    action    = list(      type  = \"dose\",      state     = \"Ac\",       values    = \"c(0.1,  0.1,  0.1,  0.1)*1e6/MW\",      times     = \"c(0, 14, 28, 42)\",      durations = \"c(0,  0,  0,  0)\")    ) ,  ss_dose_keep         = list(    condition = \"((BM <=  7e4) & (BM >=5e4)) & (time > 0)\",    true_flag  = \"keep last\",    false_flag = \"\",    action    = list(      type  = \"dose\",      state     = \"Ac\",       values    = \"c( 1.0,  1.00,  1.00,  1.00)*SI_fpd(id=id, state='Ac')\",      times     = \"c(0, 14, 28, 42)\",      durations = \"c(0,  0,  0,  0)\")    ) ,  ss_dose_decrease     = list(    condition = \"(BM >  7e4) & (time > 0)\",    true_flag  = \"titrate down\",    false_flag = \"\",    action    = list(      type  = \"dose\",      state     = \"Ac\",       values    = \"c( .90,   .90,   .90,   .90)*SI_fpd(id=id, state='Ac')\",      times     = \"c(0, 14, 28, 42)\",      durations = \"c(0,  0,  0,  0)\")    ) ,  ss_dose_increase = list(    condition = \"(BM <  5e4) & (time > 0)\",    true_flag  = \"titrate up\",    false_flag = \"\",    action    = list(      type  = \"dose\",      state     = \"Ac\",       values    = \"c(1.30,  1.30,  1.30,  1.30)*SI_fpd(id=id, state='Ac')\",      times     = \"c(0, 14, 28, 42)\",      durations = \"c(0,  0,  0,  0)\")    ) )  simres =  simulate_rules(object        = object,                subjects      = subs[[\"subjects\"]],                eval_times    = eval_times,                output_times  = output_times,                 rules         = rules,                rx_options    = rx_options)"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html","id":"antibody-pk-and-biomarker-system","dir":"Articles","previous_headings":"","what":"Antibody-PK and biomarker system","title":"Clinical Trial Simulation","text":"","code":"# Dosing into Ac and At is in nmoles. So to dose 3 mg you would use 3e6/MW my_model <- function() { ini({    # Typical Value of System Parameters     TV_F1           = fixed(c(.Machine$double.eps, 0.744, .Machine$double.xmax))    TV_ka           =       c(.Machine$double.eps, 0.282, .Machine$double.xmax)    TV_CL           =   log(c(.Machine$double.eps, 0.200, .Machine$double.xmax))    TV_Vc           =   log(c(.Machine$double.eps, 3.61, .Machine$double.xmax))    TV_Vp           =   log(c(.Machine$double.eps, 2.75, .Machine$double.xmax))    TV_Q            =   log(c(.Machine$double.eps, 0.747, .Machine$double.xmax))    TV_MW           = fixed(c(.Machine$double.eps, 140, .Machine$double.xmax))    TV_BM_IC        =       c(.Machine$double.eps, 1000, .Machine$double.xmax)    TV_kdeg_BM      = fixed(c(.Machine$double.eps, 0.1, .Machine$double.xmax))    TV_Emax         =       c(.Machine$double.eps, 100.0, .Machine$double.xmax)    TV_EC50         = fixed(c(.Machine$double.eps, 300, .Machine$double.xmax))     # Between-subject variability:      ETAka +     ETACL +     ETAVc +     ETAVp +     ETAQ +      ETABM_IC +  ETAEmax ~    c(0.416,                                                                               0,          0.09875,                                                                  0,          0.0786,     0.116,                                                       0,          0.0619,     0.0377,     0.0789,                                          0,          0,          0,          0,          0.699,                               0,          0,          0,          0,          0,          0.05,                    0,          0,          0,          0,          0,          0,          0.10)       # Error model parameters    prop_err_PK  =  c(.Machine$double.eps, 0.1, .Machine$double.xmax)    add_err_PK   =  c(.Machine$double.eps, 0.1, .Machine$double.xmax)    add_err_BM   =  c(.Machine$double.eps, 0.1, .Machine$double.xmax)  }) model({     # System Parameters     F1          = TV_F1    ka          = TV_ka*exp(ETAka)    CL          = exp(TV_CL)*exp(ETACL)    Vc          = exp(TV_Vc)*exp(ETAVc)    # AMTIFY:Cc    Cc          = Ac/(Vc)    Vp          = exp(TV_Vp)*exp(ETAVp)    Q           = exp(TV_Q)*exp(ETAQ)    MW          = TV_MW    BM_IC       = TV_BM_IC*exp(ETABM_IC)    kdeg_BM     = TV_kdeg_BM    Emax        = TV_Emax*exp(ETAEmax)    EC50        = TV_EC50     Dinf        = 0.0     # Static Secondary Parameters     WTTV        = 70     CL_IND      = CL*(1.0+SEX_ID*.1)*(1.0+SUBTYPE_ID*.1)     kel         = CL_IND/Vc*((WT/WTTV))^(-0.35)     kcp         = Q/Vc*((WT/WTTV))^(-0.35)     kpc         = Q/Vp*((WT/WTTV))^(-0.35)     ksyn_BM     = kdeg_BM*BM_IC      # Dynamic Secondary Parameters     STIM        = 1.0+ Emax*Cc/(EC50+Cc)      # Defining ODEs    BM(0)       = BM_IC    d/dt(At)    = (-ka*At)    d/dt(Ac)    = ((ka*At*F1/Vc  -kel*Cc - kcp*Cc  + kpc*Cp*Vp/Vc + Dinf/Vc))*Vc    d/dt(Cp)    = (kcp*Cc*Vc/Vp - kpc*Cp)    d/dt(BM)    = ksyn_BM*STIM-(kdeg_BM*BM)     # Outputs and error models    C_ng_ml     = Cc*MW    C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK)     BM_obs      = BM    BM_obs  ~ add(add_err_BM)  }) }"},{"path":"https://ruminate.ubiquity.tools/articles/deployment.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Deployment and Customization","text":"Running ruminate simple straight forward using ruminate function: default presents modules standard format. However may wish deploy ruminate internal server customize .","code":"library(ruminate) ruminate()"},{"path":"https://ruminate.ubiquity.tools/articles/deployment.html","id":"deployment","dir":"Articles","previous_headings":"","what":"Deployment","title":"Deployment and Customization","text":"deploy ruminate can create copy app based template package: Certain features app behave differently depending whether running locally deployed server. tell App deployed need create empty file named DEPLOYED directory deployed app file. two files (App.R DEPLOYED) placed direcory shiny server ruminate installed enough deploy basic app.","code":"file.copy(from = system.file(package=\"ruminate\",\"templates\", \"ruminate.R\"),            to   = \"App.R\") file.create(\"DEPLOYED\")"},{"path":"https://ruminate.ubiquity.tools/articles/deployment.html","id":"customization","dir":"Articles","previous_headings":"","what":"Customization","title":"Deployment and Customization","text":"can open App.R file run app locally well. can also edit file customize app. includes default text presented, graphics might want, also color scheme. Beyond individual modules also customizable.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/deployment.html","id":"app-layout","dir":"Articles","previous_headings":"Customization","what":"App Layout","title":"Deployment and Customization","text":"app built around modules overall look introductory text controlled file. default app uses shinydashboard package. can look documentation package alter tabs, default skin color, module icons, etc. default package contains modules, can simply remove tabs modules want.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/deployment.html","id":"individual-modules","dir":"Articles","previous_headings":"Customization","what":"Individual Modules","title":"Deployment and Customization","text":"top App.R file locations module configuration files defined: controls different aspects module including text displayed, icons used, certain behaviors app, default values, etc. options described comments configuration files. use need first make copy specific configuration file. example, customize NCA module make copy NCA.yaml file: can make changes want myNCA.yaml file. need specify App.R file want use new configuration file. can thing modules well.","code":"formods.yaml  = system.file(package=\"formods\",  \"templates\",  \"formods.yaml\") ASM.yaml      = system.file(package=\"formods\",  \"templates\",  \"ASM.yaml\") UD.yaml       = system.file(package=\"formods\",  \"templates\",  \"UD.yaml\") DW.yaml       = system.file(package=\"formods\",  \"templates\",  \"DW.yaml\") FG.yaml       = system.file(package=\"formods\",  \"templates\",  \"FG.yaml\") NCA.yaml      = system.file(package=\"ruminate\", \"templates\",  \"NCA.yaml\") MB.yaml       = system.file(package=\"ruminate\", \"templates\",  \"MB.yaml\") CTS.yaml      = system.file(package=\"ruminate\", \"templates\",  \"CTS.yaml\") file.copy(from = system.file(package=\"ruminate\", \"templates\",  \"NCA.yaml\"),           to   = \"myNCA.yaml\") NCA.yaml      = \"myNCA.yaml\""},{"path":"https://ruminate.ubiquity.tools/articles/deployment.html","id":"reporting-templates","dir":"Articles","previous_headings":"Customization","what":"Reporting Templates","title":"Deployment and Customization","text":"use organizational templates need create onbrand Word PowerPoint templates using methods described : Creating onbrand templates formods reporting templates Place Word (report.docx), PowerPoint (report.pptx), YAML (report.yaml) files templates directory. need create copy formods YAML file deployment folder. Next need edit myformods.yaml file ensure new files used editing include section update sources file. See : change App.R file point new myformods.yaml file.","code":"file.copy(from = system.file(package=\"formods\", \"templates\",  \"formods.yaml\"),           to   = \"myformods.yaml\") FM:    include:     files:     - file:         source: 'file.path(\".\", \"templates\", \"report.docx\")'         dest:   'file.path(\"config\",\"report.docx\")'     - file:         source: 'file.path(\".\", \"templates\", \"report.pptx\")'         dest:   'file.path(\"config\",\"report.pptx\")'     - file:         source: 'file.path(\".\", \"templates\", \"report.yaml\")'         dest:   'file.path(\"config\",\"report.yaml\")'"},{"path":"https://ruminate.ubiquity.tools/articles/model_builder.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Model Building","text":"model building module constructed around rxode2 package. allows load base model either model catalog user-create file. loaded user can modify model (change structure, parameter values, etc), make copy, etc. can upload model rxode2 format also NONMEM format. NONMEM file (control stream listing output) converted upload rxode2 using nonmem2rx package.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/model_builder.html","id":"model-catalog","dir":"Articles","previous_headings":"","what":"Model catalog","title":"Model Building","text":"model catalog built sources field configuration file. can include models nlmixr2lib model library. can also include user defined files. specified found, skipped. Edit MB yaml file alter .","code":""},{"path":"https://ruminate.ubiquity.tools/articles/model_builder.html","id":"user-defined-models","dir":"Articles","previous_headings":"Model catalog","what":"User-defined models","title":"Model Building","text":"User-defined models can included catalog uploaded app. models can specified either NONMEM rxode2 formats. NONMEM models can control stream (good), listing output estimation (better), XML output estimation (best). use nlmixr2 model simply need function definition assigned object my_fcn. examples see: system.file(package=\"ruminate\", \"templates\", \"MB_model_rxode2.R\") system.file(package=\"ruminate\", \"templates\", \"MB_model_NONMEM.ctl\") Modules specified sources section configuration file. default configuration file look working directory App user_model.R user_model.ctl. rxode2 model can name user_model.R place app directory included catalog. Similarly NONMEM control stream can name user_model.ctl, included automatically. exist skipped. can create many entries want.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/model_builder.html","id":"configuration-file","dir":"Articles","previous_headings":"","what":"Configuration File","title":"Model Building","text":"","code":"Error in get(paste0(generic, \".\", class), envir = get_method_env()) :    object 'type_sum.accel' not found # The MC field is a skeleton for constructing new modules MC:   # Module informaiton   module:     type: \"MB\"     # internal R Object: module ID used in deployment     depends:       id_ASM: \"ASM\"   # The prefix of object names created in the generated code   element_object_name: \"MB_obj\"   # This is a list of model sources. In the app the sources will be listed in   # the order shown here. This is also referred to as the model catalog. If   # the type is set to nlmixr2lib it will insert the models from nlmixr2lib.   # User defined models can be used as well. See the examples below for   # rxode2 and NONMEM models.   #   # - group: This is how models will be grouped in the selection pulldown.   # - name: Short name for the model: **NOTE that names need to be unique**.   # - description: Verbose description of the model.   # - type: Supported model types are \"nlmixr2lib\", \"rxode2\" or \"NONMEM\".   # - obj: For the rxode2 type you need to also specify the name of the object   #   that is created. This option is only used for the rxode2 type.   # - file: For both rxode2 and nlmixr2 you need to specify a character string   #   with a file path. This will be evaluated as an R command, so keep that   #   in mind. If the file is not found it will be skipped when the app loads.   sources:   - source:       group:       \"User-defined Models\"       name:        \"rxode2 User model\"       description: \"User-defined rxode2 model\"       type:        \"rxode2\"       obj:         \"my_fcn\"       file:        'file.path(getwd(),\"user_model.R\")'   - source:       group:       \"User-defined Models\"       name:        \"NONMEM User model\"       description: \"User-defined NONMEM model\"       type:        \"NONMEM\"       file:        'file.path(getwd(),\"user_model.ctl\")'   - source:       group:       \"Model Library\"       type:        \"nlmixr2lib\"       name:        \"nlmixr2 Model Library\" # The include section is optional. You can use this section to copy files # from the directory where you are running the app to the user directory to be # used in the app and when saved. The source and dest options can be a path # command like below or a double # quoted string: '\"/path/to/file\"' # The dest should be relative to user directory (think the root of the zip # file that is exported). See formods.yaml for examples. # # include: #   files: #   - file: #       source: 'file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\")' #       dest:   'file.path(\"config\",\"report.docx\")'   code: # module specific code options     packages: [ \"rxode2\", \"nonmem2rx\", \"nlmixr2lib\"]     readOnly: TRUE     mode:     r   # Controls what is shown in the compact ui mode:   compact:     code:    TRUE     clip:    TRUE   # This is where you put reporting options. The expected options are shown   # here, but module-specific options can also be added if needed:   reporting:     enabled: TRUE     # Priority of reporting relative to other modules     # (higher numbers are reported first)     priority: 1   # put different formatting options (widths, heights,   # shinyWidgets button sizes, etc) here.   formatting:     # Dimensions of code snippet box     code:       width:  800       height: 300     preview:       width:  \"800px\"       height: \"500px\"     input:     current_element:       width:  \"200px\"       tooltip: \"Change the current model.\"       tooltip_position: \"right\"     element_name:       width:  \"200px\"     button_clk_run:       size: \"sm\"       block: TRUE     button_clk_del:       size: \"sm\"       block: TRUE       tooltip: \"Delete the current model.\"       tooltip_position: \"right\"     button_clk_save:       size: \"sm\"       block: TRUE       tooltip: \"Save the name for the current model.\"       tooltip_position: \"right\"     button_clk_clip:       size: \"sm\"       block: TRUE       tooltip: \"Copy the code to generate the current model to the clipboard.\"       tooltip_position: \"right\"     button_clk_copy:       size: \"sm\"       block: TRUE       tooltip: \"Make a copy of the current model.\"       tooltip_position: \"right\"     button_clk_append_model:       size: \"sm\"       block: TRUE       tooltip: \"Append to current model.\"       tooltip_position: \"right\"     button_clk_new:       size: \"sm\"       block: TRUE       tooltip: \"Create a new model.\"       tooltip_position: \"right\"       width: 100     export_nonmem:       size: \"sm\"       block: TRUE       color: \"primary\"       tooltip: \"Download the current model in NONMEM format.\"       tooltip_position: \"right\"       width: 100     export_monolix:       size: \"sm\"       block: TRUE       color: \"primary\"       tooltip: \"Download the current model in Monolix format.\"       tooltip_position: \"right\"       width: 100     catalog_selection:       width:   \"200px\"       truncate: 65       tooltip:  \"Select base model from the catalog.\"       tooltip_position: \"top\"     model_type_selection:       width: \"200px\"       tooltip: \"Select the type of the model being uploaded.\"       tooltip_position: \"right\"       choices:         rxode2: \"rxode2 function\"         NONMEM: \"NONMEM (XML, lst, or ctl)\"       default:   \"rxode2\"     upload_model_file:       width: \"400px\"     append_model:       tooltip: \"Append the selected sub-model to the current model.\"       tooltip_position: \"bottom\"       no_models:  \"None available\"       width: \"200px\"     base_from:       size:    \"normal\"       status:  \"primary\"       tooltip: \"You can select the base model from a catalog or upload your own\"       tooltip_position: \"bottom\"       choices:         catalog: \"Model Catalog\"         user:    \"User-defined model\"       default: \"catalog\"     # The timescales here can be altered manually. This is the general format:     #   short_name:     #     conv:  \"10\"     #     verb:  \"A more verbose name\"     #     match: [\"sn\"]     #     # The conv filed is the mathematical conversion between different     # timescales. Below everything is relative to seconds. So the conv for     # seconds is 1. The conv fields for days is     #     #                     1                      1       day     # conv =  ------------------------- = -------------- ---     #            sec      min   24 hr       60 x 60 x 24 sec     #         60 --- x 60 --- x ------     #            min      hr     day     #     # Generally you dont want to  change what is already here in terms of     # these short name used. You can remove timescales you don't want to use     # or add timescales that you need but are not present.     #     #   -verb  You can change the verb field (what the user sees).     #     # The match field is a list of values that can be matched to the short     # name so if the short name is 'days' when reading in the metadata from     # nlmixr2 models. You you may want to match 'd', 'day', etc.     #     #   -match: [\"day\", \"d\"]     #     # The order of Appearance is the same order seen here. The default     # is the selected short name for the specified timescale     time_scales:       width: \"200px\"       default: \"weeks\"       tooltip: \"Choose the timescale of the model.\"       tooltip_position: \"top\"       choices:         months:           conv: \"1/(60*60*24*7*4)\"           verb: \"Months\"           match: [\"mo\"]         weeks:           conv: \"1/(60*60*24*7)\"           verb: \"Weeks\"           match: [\"wk\",\"weeks\"]         days:           conv: \"1/(60*60*24)\"           verb: \"Days\"           match: [\"d\", \"day\", \"days\"]         hours:           conv: \"1/(60*60)\"           verb: \"Hours\"           match: [\"hr\", \"hours\", \"hrs\"] #       min: #         conv: \"1/60\" #         verb: \"Minutes\" #         match: [\"min\", \"minutes\"] #       sec: #         conv: \"1\" #         verb: \"Seconds\" #         match: [\"sec\", \"seconds\", \"s\"]   labels:     current_element: \"Select model\"     element_name :   NULL # \"model name\"     upload_model_file:    NULL     base_from:            NULL     catalog_selection:    NULL     export_nonmem:        \"NONMEM\"     export_monolix:       \"Monolix\"     export_pause:         \"Exporting model.\"     model_type_selection: NULL     time_scale:           NULL     catalog_empty:        \"No models were found, the catalog is empty\"     save_btn:             \"Save\"     clip_btn:             \"Code\"     copy_btn:             \"Copy\"     del_btn:              \"Delete\"     new_btn:              \"New\"     append_model_btn:     \"Append Model\"     append_model:         \"Available Sub-Models\"     building_model:       \"Building model, be patient.\"     appending_model:      \"Appending sub-model, be patient.\"     element_name_diff:    \"The model name has changed.\"     model_code_diff:      \"Manual changes have been made to the model.\"     save_change_detected: \"You need to click on the save button for these changes to take effect.\"     head_base_model:      \"Starting model\"     head_model_code:      \"Model code\"     head_time_scale:      \"Model time-scale\"   errors:     no_model_found:             \"No model was found.\"     base_model_build_failed:    \"The base model build failed.\"     manual_model_update_failed: \"Manual model update failed.\"     user_file_upload_failed:    \"User-defined model failed.\"     nlmixr2lib_not_found:       \"The nlmixr2lib package was not found. This library will not be available.\"     selected_id_bad_list:       \"Unable to find a list for the selected component.\"     selected_id_bad_row:        \"Selected component should have 1 row.\"     fetch_catalog_failed:       \"Unable to fetch model catalog.\"     fetch_appends_failed:       \"Unable to fetch appendable models\"     append_failed:              \"Unable to append sub-model\"   tooltips:     # Set to FALSE to disable tool tips for this module     include: TRUE     elements: \"Show model components\"     show_code: \"Show model code\"     url_rxode: \"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html\"     url_model_types: \"https://ruminate.ubiquity.tools/articles/model_builder.html#model-catalog\"     components:       input_tip: \"My tool tip\""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Noncompartmental Analysis","text":"Non-compartmental analysis (NCA) simple quick method evaluating exposure drug. allows evaluate things like linearity vivo exposure. illustrate consider antibody given subcutaneous injection. actual exposure profile patient might experience given solid black line left panel. don’t yet ability sample continuous fashion. might observer given blue points.  Generally NCA determine following directly data: Cmax - Maximum observed concentration (units=concentration) Tmax - time maximum concentration observed (units=time) AUC - area curve (units=time×concentrationunits=time \\times concentration) AUMC - area first moment curve (units=time2×concentrationunits=time^2 \\times concentration) properties based observational data. Cmax Tmax certainly actual maximum concentration long sample judiciously give us good approximation. Similarly, calculated AUC AUMC different actual values. calculate areas need dig back calculus text books trapezoid method. Basically sampling interval trapezoid area calculated added n samples: AUC=∫0tfCdt≈∑=1n−1Ci+Ci+12×(ti+1−ti)AUMC=∫0tft×Cdt≈∑=1n−1tiCi+ti+1Ci+12×(ti+1−ti) \\begin{eqnarray} AUC  &=& \\int_0^{t_f} Cdt &\\approx  \\sum_{=1}^{n-1}{\\frac{C_i+C_{+1}}{2}\\times (t_{+1}-t_{})}  \\\\  AUMC &=& \\int_0^{t_f} t\\times Cdt &\\approx  \\sum_{=1}^{n-1}{\\frac{t_iC_i+t_{+1}C_{+1}}{2}\\times (t_{+1}-t_{})} \\end{eqnarray} can done Excel pretty easily. Depending data analysis properties can calculated. example can calculate clearance, mean residence time, steady-state volume distribution terminal half-life: Clearance: CL=DoseAUCCL = \\frac{Dose}{AUC} Mean residence time: MRT=AUMCAUCMRT = \\frac{AUMC}{AUC} Steady state volume distribution: Vss=MRT×CLV_{ss} = MRT \\times CL Half-life: Terminal slope natural log data Properties like AUC AUMC can also calculated using extrapolation last time point infinity account data beyond observations hand. subsequent values clearance, volumes distribution, etc can also change extrapolation. lot nuance associated calculations, good rely software focuses type analysis. PKNCA package developed mind. ruminate app provides interface functionality found PKNCA generate code can use get started PKNCA.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"data-format","dir":"Articles","previous_headings":"","what":"Data format","title":"Noncompartmental Analysis","text":"run NCA need data formatted specific way. names columns can defined user. columns required, others optional, others required depending user wants specify dosing. See general description columns followed information dosing inferred: Subject ID: Unique id subject dataset (required) Time: Observation time since first dose (required) Nominal Time: Time since recent dose (optional, needed determine dosing columns) Dose: Amount dose (required) Concentration: Observed concentration (NA missing values, required) Route: Dosing route (intravascular extravascular, required) Grouping: columns used grouping (optional) Dose Duration: Duration infusion (optional) Dosing Cycle Period: recent dose cycle period (optional, needed dosing columns) Event ID: EVID column NONMEM used distinguish dosing observation records (optional, needed dosing rows) Analyte: Used multiple analytes present dataset (optional) Note Dose Concentration need mass units.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"dosing-information","dir":"Articles","previous_headings":"Data format","what":"Dosing information","title":"Noncompartmental Analysis","text":"Dosing extracted datasets, can incorporated two ways. One dosing information stored columns dataset. simplest straight forward way storing dosing information. method dosing specified individual records (rows) dataset (data formatted NONMEM, can use ).","code":""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"determining-dosing-from-columns","dir":"Articles","previous_headings":"Data format > Dosing information","what":"Determining dosing from columns","title":"Noncompartmental Analysis","text":"Beyond required columns infer dosing columns must also following columns defined: Dose, Dosing Cycle Period, Nominal Time.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"determining-dosing-from-rows-nonmem-format","dir":"Articles","previous_headings":"Data format > Dosing information","what":"Determining dosing from rows (NONMEM format)","title":"Noncompartmental Analysis","text":"dataset formatted NONMEM can extract dosing rows contain dosing records. case expected following columns dataset: Dose (AMT NONMEM) Event ID (EVID NONMEM). notes dosing information. interval want calculate dose-dependent parameters, need provide information dosing intervals. multiple dose setting intervals enough PK data run NCA , necessary provide dosing information intervals. example four weekly doses intensive sampling weeks 1 4 peak trough weeks 2 3, provide dosing information weeks 2 3. However certain parameters PKNCA provide dosing intermediate sampling information provided (e.g. time steady-state). interested parameters intervals intensive sampling, don’t need worry dosing information intervals.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"nca-analysis-intervals","dir":"Articles","previous_headings":"Data format","what":"NCA analysis intervals","title":"Noncompartmental Analysis","text":"select interval analysis, necessary observations beginning end interval. observations dosing times (e.g. dose time zero first observation 15 minutes post-dose) want use dosing time beginning interval, can observation BQL missing (NA) dosing time (zero).","code":""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"nca-parameters","dir":"Articles","previous_headings":"Data format","what":"NCA parameters","title":"Noncompartmental Analysis","text":"following shows different NCA parameters can calculated. PKNCA parameter value used PKNCA, App Parameter Name value shown app.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html","id":"configuration-file","dir":"Articles","previous_headings":"","what":"Configuration File","title":"Noncompartmental Analysis","text":"","code":"MC:   # Module informaiton   module:     type: \"NCA\"     # internal R Object: module ID used in deployment     depends:        id_ASM: \"ASM\"       id_UD:  \"UD\"       id_DW:  \"DW\"   code: # module specific code options     packages: [\"PKNCA\", \"dplyr\", \"stringr\", \"formods\", \"ruminate\", \"onbrand\"]     readOnly: TRUE     mode:     r     preamble: |-       # Non-compartmental analysis ----------------------------------------------   compact:     code:    TRUE     clip:    TRUE   reporting:     enabled: TRUE     # Text format determines how text will be rendered. It can be either \"md\"     # for Markdown or \"text\" for plain text. This will also control things     # like table headers.     text_format: \"md\"     # Priority of reporting relative to other modules (higher numbers are     # reported first)     priority: 10     # The order of the figure and table ids (e.g. fg_ind_obs) represents the     # order in which figures and tables will be reported. Each id should have     # the following optoins:     #     #   caption_single      Caption used when a table or figure needs only a     #                       single page.     #     #   caption_multiple    Caption used when a table or figure spans multiple     #                       pages.     #     #   title_single        Slide title used when a table or figure needs only a     #                       single page.     #     #   title_multiple      Slide title used when a table or figure spans multiple     #                       pages.     #     #   sub_title_single    Slide sub_title used when a table or figure needs only a     #                       single page.     #     #   sub_title_multiple  Slide sub_title used when a table or figure spans multiple     #                       pages.     #     # The following placeholders can be used bu surrounding them with ===. For     # example to include the total number of figures you would use     # ===FIGTOT===:     #     # NCADESC               Description of the NCA analysis provided by the     #                       user in the UI (tables and figures).     #     # FIGNUM                Number of the current figure for figures that span     #                       multiple pages (figures only).     #     # FIGTOT                Total number of figures for figures that span     #                       multiple pages (figures only).     #     # TABNUM                Number of the current table for tables that span     #                       multiple pages (tables only).     #     # TABTOT                Total number of tables for tables that span multiple     #                       pages (tables only).     #     #     figures:       fg_ind_obs:         caption_single:     \"===NCADESC=== (Individual Observations)\"         caption_multiple:   \"===NCADESC=== (Individual Observations,  ===FIGNUM=== of ===FIGTOT===)\"         title_single:       \" Individual Observations\"         title_multiple:     \" Individual Observations\"         sub_title_single:   \"===NCADESC===\"         sub_title_multiple: \"===NCADESC=== (===FIGNUM=== of ===FIGTOT===)\"     tables:       tb_ind_params:         caption_single:   \"===NCADESC=== (Individual Parameters)\"         caption_multiple: \"===NCADESC=== (Individual Parameters, ===TABNUM=== of ===TABTOT===)\"       tb_ind_obs:         caption_single:   \"===NCADESC===, Individual Data\"         caption_multiple: \"===NCADESC===, Individual Data (===TABNUM=== of ===TABTOT===)\"     # Default number of significant digits     digits: 3     # When reporting units the * will be replaced with this value:     mult_str: \"⋅\"     # You can use unicode here like this \"∞\"     # How infinity is represented in reports like table headers     # to change inf in parameters you need to change them for the individual     # parameters below.     infinity:    \"inf\"     not_calc:    \"NC\"     not_sampled: \"NS\"     blq:         \"BLQ\"     # Here we list all the notes that can be present in tables. You need an     # entry for whatever you put in not_calc and blq above here.     notes:       NC: \"not calculated\"       NS: \"not sampled\"       BLQ: \"below the level of quantification\"   notifications:     ana_add_int_success: \"Interval added: ===DETAILS===\"   # Put different formatting options (widths, heights,   # shinyWidgets button sizes, etc) here.   formatting:     # Dimensions of code snippet box     code:       width:  800       height: 300     # Dimensions of the notes text area     notes:       width:  \"520px\"       height: \"75px\"     # Width of textInput and selectInput UI elements in the     # nca configuration     nca_config_option:       width: 150     # Width of the figure preview (must be numeric)     # The options nrow and ncol refer to the default number of rows and     # columns when faceting. The options nrow_opt and nrow_col are values the     # user can select.     #     preview:       width:           \"100%\"       height:          \"600px\"       nrow:            4       ncol:            4       nrow_opt:        [ 1, 2, 3, 4, 5, 6, 7, 8 ]       ncol_opt:        [ 1, 2, 3, 4, 5, 6, 7, 8 ]       logy:            TRUE       fig_type:        \"report\"       tab_type:        \"report\"     # These apply to the intervals table     dose_from:       default:          \"cols\"       tooltip:          \"Dosing information can be found in either columns (column for dose, dose cycle, nominal time) or rows (one row for each dose event distinguished by an event ID (EVID) column).\"       tooltip_position: \"top\"     intervals:       width:  600       height: 175     intervals_start:       width:  50     intervals_stop:       width:  50     intervals_np_text:       width:  375     intervals_delete:       width:  75     button_ana_run:       size: \"sm\"       block: TRUE     button_ana_del:       size: \"sm\"       block: TRUE       tooltip: \"Delete the current analysis.\"       tooltip_position: \"right\"     button_ana_save:       size: \"sm\"       block: TRUE       tooltip: \"Save the caption and notes and apply the data view for the current analysis.\"       tooltip_position: \"right\"     button_ana_clip:       size: \"sm\"       block: TRUE       tooltip: \"Copy the code to generate the current analysis to the clipboard.\"       tooltip_position: \"right\"     button_fg_save:       size: \"sm\"       block: TRUE      #tooltip: \"tooltip\"      #tooltip_position: \"right\"     button_tb_save:       size: \"sm\"       block: TRUE      #tooltip: \"tooltip\"      #tooltip_position: \"right\"     button_ana_copy:       size: \"sm\"       block: TRUE       tooltip: \"Make a copy of the current analysis.\"       tooltip_position: \"right\"     button_ana_new:       size: \"sm\"       block: TRUE       tooltip: \"Create a new analysis.\"       tooltip_position: \"right\"     button_ana_add_int:       size: \"sm\"       block: TRUE     button_ana_use_scenario:       size: \"sm\"       block: TRUE     check_fg_ind_obs:       width: 75     select_ana_interval_range:       width:  200     text_ana_interval_start:       width: 75     text_ana_interval_stop:       width: 75     select_current_view:       width: 200     select_ana_fig_view:       width: 250     select_ana_tab_view:       width: 250     select_ana_source_sampling:       width: 150     select_ana_nca_parameters:       width: 150       # ?pickerOptions       picker_options:         liveSearch: TRUE         actionsBox: TRUE     select_ana_col_id:       width: 150       tooltip:  \"Unique id for each subject in the dataset (required)\"       tooltip_position: \"bottom\"     select_ana_col_dose:       width: 150       tooltip: \"Amount of dose (required)\"       tooltip_position: \"bottom\"     select_ana_col_dur:       width: 150       tooltip: \"Duration of infusion (optional)\"       tooltip_position: \"bottom\"     select_ana_col_conc:       width: 150       tooltip: \"Observed concentration (NA for missing values, required)\"       tooltip_position: \"bottom\"     select_ana_col_route:       width: 150       tooltip: \"Dosing route (intravascular  or extravascular, required)\"       tooltip_position: \"bottom\"     select_ana_col_time:       width: 150       tooltip: \"Observation time since the first dose (required)\"       tooltip_position: \"bottom\"     select_ana_col_ntime:       width: 150       tooltip: \"Time since the most recent dose (optional, needed to determine dosing from columns)\"       tooltip_position: \"bottom\"     select_ana_col_group:       width: 150       tooltip: \"Other columns used for grouping (optional)\"       tooltip_position: \"bottom\"     select_ana_col_analyte:       width: 150       tooltip: \"Used if multiple analytes are present in the dataset (optional)\"       tooltip_position: \"bottom\"     select_ana_col_evid:       width: 150       tooltip: \"EVID column from NONMEM used to distinguish dosing and observation records (optional, needed for dosing from rows)\"       tooltip_position: \"bottom\"     select_ana_col_cycle:       width: 150       tooltip: \"The most recent dose cycle or period (optional, needed for dosing from columns)\"       tooltip_position: \"bottom\"     select_ana_units_dose:       width: 150     select_ana_units_time:       width: 150     select_ana_units_conc:       width: 150     select_ana_units_amt:       width: 150     select_ana_scenario:       width: 150     select_fg_ind_obs_ncol:       width: 50     select_fg_ind_obs_nrow:       width: 50     select_fg_ind_obs_page:       width: 100     select_tb_page:       width: 100   errors:     nca_run_filed: \"Unable to run PKNCA. Please, see below for details.\"     bad_input: \"Input error message\"     nca_no_fig: \"There are no figures to display. You must run the analysis first\"     nca_no_tab: \"There are no tables to display. You must run the analysis first\"   tooltips:     # Set to FALSE to disable tool tips for this module     include: TRUE     notes:             \"Optional analysis notes that will be carried over and used in other elements (e.g. reporting).\"     ana_key:           \"Unique description used for referencing analysis and in other elements (e.g. reporting).\"     show_code:         \"Show analysis code\"     nca_intervals:     \"Current NCA intervals\"     # Set urls to NULL to disable     url_dosing:        \"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html#dosing-information\"     url_data:          \"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html#data-format\"     url_intervals:     \"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html#nca-analysis-intervals\"     url_parameters:    \"https://ruminate.ubiquity.tools/articles/noncompartmental_analysis.html#nca-parameters\"     ph:       text_ana_interval_start: 0       text_ana_interval_stop:  \"number or Inf\"       notes:                   \"Optional NCA notes that will be carried over and used in other elements (e.g. reporting).\"   # This controls the figure and table selection for an analysis. The order of   # the keys (e.g., tb_ind_params, tb_sum_params, etc) controls the   # order they are dispalyed in the selector and the text controls what's show   # in the interface.   figures:     fg_ind_obs:       choice:  \"Individual Profiles\"       subtext: \"Faceted view of individual time-course\"   tables:     tb_ind_params:       choice:  \"Individual NCA Parameters\"       subtext: \"Listings of subject-level NCA parmaeters\"     tb_sum_params:       choice:  \"Summarized NCA Parameters\"       subtext: \"Listings of NCA parmaeters summarized by group/analyte\"     tb_ind_obs:       choice:  \"Individual Data\"       subtext: \"Listings of subject-level time-course data\"     tb_nca_raw:       choice:  \"Raw NCA Output\"       subtext: \"Output from PKNCA with requested and dependent parameters\"   labels:     ana_key:                         \"title/caption\"     new_ana:                         \"New\"     run_ana:                         \"Run NCA\"     save_ana:                        \"Save\"     del_ana:                         \"Delete\"     copy_ana:                        \"Copy\"     clip_ana:                        \"Code\"     fg_save:                         \"Apply changes\"     tb_save:                         \"Apply changes\"     curr_anas_none:                  \"No figures yet created\"     no_dataset:                      \"No datasets available to analyze. You need to load a dataset to use this module.\"     ana_use_scenario:                \"Analysis Template\"     ana_add_int:                     \"Add/Update Interval\"     no_intervals:                    \"No intervals added yet\"     panel_analysis_opts:             \"Analysis Details\"     panel_figures:                   \"Figures\"     panel_tables:                    \"Tables\"     panel_nca_config:                \"NCA Options\"     text_ana_interval_start:         \"Start\"     text_ana_interval_stop:          \"End\"     select_ana_interval_range:       \"Interval Range\"     # Headings used in the UI     head_intervals:                  \"Analysis Time Intervals\"     head_intervals_current:          \"Current Intervals\"     head_analysis_template:          \"Use Analysis Template\"     head_intervals_create:           \"Create an Interval\"     head_dose_from:                  \"Dosing Information\"     head_col_mapping:                \"Identify Columns\"     head_col_mapping_required:       \"Required\"     head_col_mapping_optional:       \"Optional\"     head_run_analysis:               \"Run Analysis\"     head_units:                      \"Units\"     select_current_view:             \"Data from\"     select_current_ana:              \"Current Analysis\"     select_ana_scenario:             NULL  # \"Type of Analysis:\"     select_ana_col_id:               \"Subject ID\"     select_ana_col_time:             \"Time\"     select_ana_col_ntime:            \"Nominal Time\"     select_ana_col_dose:             \"Dose\"     select_ana_col_dur:              \"Dose Duration\"     select_ana_col_conc:             \"Concentration\"     select_ana_col_route:            \"Route\"     select_ana_col_group:            \"Other Grouping\"     select_ana_col_cycle:            \"Dosing Cycle or Period\"     select_ana_col_evid:             \"Event ID\"     select_ana_col_analyte:          \"Analyte\"     select_ana_units_time:           \"Time\"     select_ana_units_dose:           \"Dose\"     select_ana_units_conc:           \"Concentration\"     select_ana_units_amt:            \"Amount\"     select_ana_nca_parameters:       \"Parameters\"     select_fg_ind_obs_nrow:          \"Rows\"     select_fg_ind_obs_ncol:          \"Columns\"     select_fg_ind_obs_page:          \"Show Page\"     select_tb_page:                  \"Show Page\"     check_fg_ind_obs_logy:           \"Log 10 y-scale\"     switch_ana_include_units:        \"Include Units\"     switch_ana_fig:                  NULL     switch_ana_fig_interactive:      \"Interactive\"     switch_ana_fig_report:           \"Report Preview\"     switch_ana_dose_from:            \"Dosing Found In\"     switch_ana_dose_from_rows:       \"Rows\"     switch_ana_dose_from_cols:       \"Columns\"     switch_ana_tab:                  NULL     switch_ana_tab_interactive:      \"Interactive\"     switch_ana_tab_report:           \"Report Preview\"     select_ana_source_sampling:      \"Data Sampling\"     busy:       run_nca:                       \"Running NCA be patient.\"     PKNCA_raw:       ID:                            \"Subject ID\"       start:                         \"Initial time of the analysis interval.\"       end:                           \"Final time of the analysis interval.\"       PPTESTCD:                      \"Parameter name from PKNCA.\"       PPORRES:                       \"parameter value.\"       exclude:                       \"Reason for parameter exclusion (NA when parameter was calculated).\"       PPORRESU:                      \"Parameter units.\"   # For details on the PKNCA options see this vignette:   # https://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html   # This section contains information about different options, metadata about   # them, default values, etc. Using this, the options UI for an analysis is   # generated automatically. Each configuration option has the following:   #   # group        - This is how configuration options will be grouped in the app   # label        - Short textual description   # tooltip      - More detailed description of the option and what goes into it.   #                Set to NULL to not display a tool tip.   # type         - List of possible types. For example if you have \"numeric\" then   #                \"character\" the value will be evaluated as numeric, if this is   #                NA then it will be evaluated as character. Allowed types:   #                  - numeric   #                  - character   #                  - mixed (numeric and character)   #                  - logical (TRUE or FALSE)   # value        - Default value in the UI   # options      - If set to NULL a text input box will be created for this option,   #                if there are options then a selection box will be created.   # pknca_option - The actual option set with PKNCA   nca_config:     adj_r_squared_factor:       group:         General       # BILL I need a better label for this       label:         \"r² (Adj) factor\"       tooltip:       \"The adjusted r² for the calculation of λz has this factor times the number of data points added to it. It allows for more data points to be preferred in the calculation of half-life.\"       type:          \"numeric\"       value:         0.0001       options:       NULL       pknca_option:  adj.r.squared.factor     max_missing:       group:         General       label:         \"Max missing (frac)\"       tooltip:       \"The maximum fraction of the data that may be missing (‘NA’) to calculate summary statistics.\"       type:          \"numeric\"       value:         0.5       options:       NULL       pknca_option:  max.missing     auc_method:       group:         AUC       label:         Method       tooltip:       \"The method used to calculate the AUC and related statistics.\"       type:          \"character\"       value:         \"lin up/log down\"       options:       [\"lin up/log down\", \"linear\"]       pknca_option:  auc.method     conc_na:       group:         Missing and BLQ Values       label:         Missing values       tooltip:       \"Determines how missing (NA) values are generally handled. Can be either drop or a numeric value to use. \"       type:          \"mixed\"       value:         \"drop\"       options:       NULL       pknca_option:  conc.na     conc_blq_first:       group:         Missing and BLQ Values       label:         First value BLQ       tooltip:       \"Indicates what to do if the first observation is BLQ. It can either be drop, keep, or a numeric value to use.\"       type:          \"mixed\"       value:         \"keep\"       options:       NULL       pknca_option:  conc.blq$first     conc_blq_middle:       group:         Missing and BLQ Values       label:         Middle values BLQ       tooltip:       \"Indicates what to do if a value between the first and last observations is BLQ. It can either be drop, keep, or a numeric value to use.\"       type:          \"mixed\"       value:         \"drop\"       options:       NULL       pknca_option:  conc.blq$middle     conc_blq_last:       group:         \"Missing and BLQ Values\"       label:         \"Last Value BLQ\"       tooltip:       \"Indicates what to do if the last observation is BLQ. It can either be drop, keep, or a numeric value to use.\"       type:          \"mixed\"       value:         \"keep\"       options:       NULL       pknca_option:  conc.blq$last     first_tmax:       group:         \"General\"       label:         \"Multiple tmax use first\"       tooltip:       \"If there is more than one concentration equal to Cmax, should the time selected for Tmax be the first value? If TRUE, the first will be selected. If FALSE, the last will be selected.\"       type:          \"logical\"       value:         TRUE       options:       [TRUE, FALSE]       pknca_option:  first.tmax     allow_tmax_in_half_life:       group:         \"Half-Life\"       label:         \"Allow tmax in half-life\"       tooltip:       \"Should the concentration and time at Tmax be allowed in the half-life calculation? TRUE is yes and FALSE is no.\"       type:          \"logical\"       value:         FALSE       options:       [TRUE, FALSE]       pknca_option:  allow.tmax.in.half.life     min_hl_points:       group:         \"Half-Life\"       label:         \"Min points\"       tooltip:       \"What is the minimum number of points required to calculate half-life?\"       type:          \"numeric\"       value:         3       options:       [ 2, 3, 4, 5 ]       pknca_option:  min.hl.points     min_span_ratio:       group:         \"Half-Life\"       label:         \"Min span ratio\"       # BILL this is a bit cryptic       tooltip:       \"What is the minimum span ratio required to consider a half-life valid?\"       type:          \"logical\"       value:         2       options:       NULL       pknca_option:  min.span.ratio     min_hl_r_squared:       group:         \"Half-Life\"       label:         \"Min r² value\"       tooltip:       \"What is the minimum r² value to consider a half-life calculation valid?\"       type:          \"numeric\"       value:         0.9       options:       NULL       pknca_option:  min.hl.r.squared     max_aucinf_pext:       group:         \"AUC\"       label:         \"Max allowed extrap (%)\"       tooltip:       \"What is the maximum percent extrapolation to consider an AUC∞ valid?\"       type:          \"numeric\"       value:         20       options:       NULL       pknca_option:  max.aucinf.pext  #  progress_bar:  #    group:         \"General\"  #    label:         \"Progress bar\"  #    tooltip:       \"Show progress bar\"  #    type:          \"logical\"  #    value:         TRUE  #    options:       [TRUE, FALSE]  #    pknca_option:  progress   # Prefix used to create NCA analysis objects in generated code   nca_object_name: \"myANA_\"   # The following patterns are used when detecting columns in your dataset   # automatically. You can create a multiple patterns. They will be processed   # in order from left to right. The first pattern to match will return that   # column. For example if you set id to:   #   # id:   [\"^(?i)id$\",    \"(?i)subject\"]   #   # It will match any column that is id. The (?i) is case insensitive. But it   # wont match IDs for example because it looks for something that starts with   # i (^) and ends with d ($).   #   # If that fails it will look for any column with the text 'subject' in it   # regardless of case. So it would match SUBJECT, subject, Subjects,   # subject id, etc.   #   # If you set it to NULL no attempt will be made to detect the column.   detect_col:     id:      [\"^(?i)id$\",    \"(?i)subject\",    \"(?i)animal\"]     time:    [\"^(?i)time\",   \"(?i)ntime\"  ]     ntime:   [\"^(?i)ntime\",  \"(?i)time\"   ]     conc:    [\"^(?i)conc\",   \"^(?i)dv$\",      \"^(?i)pcstresn$\", \"^(?i)lbstresn$\", \"^(?i)AVAL(N|NUM)?$\"]     dose:    [\"(?i)dose\",    \"^(?i)ecdose?$\", \"^(?i)exdose?$\"]     evid:    [\"(?i)evid\"]     route:   [\"(?i)route\"]     cycle:   [\"(?i)cycle\",   \"(?i)dose_num\", \"(?i)period\"]     group:   NULL     analyte: NULL     dur:     NULL   # Routes may be specified in the dataset in a more detailed or convenient   # format than what is needed for analysis. Here you can specify patterns   # that can be used to detect routes. For details on the regular expressions   # that can be used see the detect_col section above. In general you can use   # the format of:   #   #   myroute: [\"regex1\", \"regex2\"]   #   # This will assign the route to 'myroute' in the ROUTE column if it matches   # regex1 or regex2.   #   detect_route:     intravascular: [\"^(?i)iv$\"]     extravascular: [\"^(?i)sc$\", \"^(?i)oral\"]   # These are default analysis scenarios that are shown in the App. They will   # be shown in the order defined. Each scenario has the following attributes:   #   - description: Free form textual description shown to the user   #   - nca_parameters: List of nca parameters to be calculated   #   - sampling: Can be either \"serial\" or \"sparse\"   #   BILL: Get relevant scenarios from bill here   ana_scenarios:     sd_iv:       description: \"Single Dose (IV)\"       nca_parameters: [\"cmax\", \"auclast\", \"aucinf.obs\"]       sampling:   \"serial\"       intervals:         - row:             start:         0             stop:          Inf             nca_parameters: [\"aucinf.obs\"]         - row:             start:         0             stop:          21             nca_parameters: [\"cmax\", \"auclast\"]     md_iv:       description: \"Multiple Dose IV\"       nca_parameters: [\"cmax\", \"auclast\", \"aucinf.obs\"]       sampling:   \"serial\"       intervals:         - row:             start:         0             stop:          Inf             nca_parameters: [\"cmax\", \"auclast\",\"aucinf.obs\"]     sd_iv_sparse:       description: \"Single Dose (IV) Sparse Sampling\"       nca_parameters: [\"cmax\", \"sparse_auclast\"]       sampling:   \"sparse\"       intervals:         - row:             start:          0             stop:           Inf             nca_parameters: [\"cmax\", \"sparse_auclast\"]     md_iv_sparse:       description: \"Multiple Dose IV Sparse Sampling\"       nca_parameters: [\"cmax\", \"sparse_auclast\"]       sampling:   \"sparse\"       intervals:         - row:             start:          0             stop:           Inf             nca_parameters: [\"cmax\", \"sparse_auclast\"]   # This is the default shown when the app loads or a new analysis is created   ana_scenario_def: \"sd_iv\"   # Here are all of the available NCA parameters. Each field is the name of   # the parameter used in PKNCA. See the table in this vignette for the   # available parameters:   #   # https://cran.r-project.org/web/packages/PKNCA/vignettes/v03-selection-of-calculation-intervals.html   #   # Each of parameter has the following   #   #  - description: This is a verbose description of the parameter. If set to NULL the   #                 description from PKNCA will be used. Set it to other text to   #                 overwrite it. This description will also be used in exports as   #                 well.   #   #  - text:        Textual description to show the user. If set to NULL it   #                 will use the text form PKCNA.   #   #  - md:          Markdown formatted value of text.   #   #  - group:       This is how the paramters will be grouped in the UI that   #                 is generated.   #   # To limit the options the user sees you simply need to comment out the   # parameters you do not want in the App. Alterantively you can use the   # grouping below to have the most common parameters together at the top and   # the remaining in case they are needed.   #   # BILL can you go through the text and md elements below and make any   # changes you think make sense. For example is there a better way to label   # the parameter aucint.inf.obs.dose :).   #   nca_parameters:     aucall:       description: NULL       text:        NULL       md:          \"AUC~all~\"       group:       \"Common Parameters\"     adj.r.squared:       description: NULL       text:        \"r² (Adj)\"       md:          \"Adj. R^2^\"       group:       \"Other\"     ae:       description: NULL       text:        NULL       md:          \"AE\"       group:       \"Other\"     aucall.dn:       description: NULL       text:        NULL       md:          \"AUC~all,dn~\"       group:       \"Other\"     aucinf.obs:       description: NULL       text:        NULL       md:          \"AUC~inf,obs~\"       group:       \"Other\"     aucinf.obs.dn:       description: NULL       text:        NULL       md:          \"AUC~inf,obs,dn~\"       group:       \"Other\"     aucinf.pred.dn:       description: NULL       text:        NULL       md:          \"AUC~inf,pred,dn~\"       group:       \"Other\"     aucint.all:       description: NULL       text:        NULL       md:          \"AUC~int,all~\"       group:       \"Other\"     aucint.all.dose:       description: NULL       text:        NULL       md:          \"AUC~int,all,dose~\"       group:       \"Other\"     aucint.inf.obs:       description: NULL       text:        NULL       md:          \"AUC~int,inf,obs~\"       group:       \"Other\"     aucint.inf.obs.dose:       description: NULL       text:        NULL       md:          \"AUC~int,inf,obs,dose~\"       group:       \"Other\"     aucint.inf.pred:       description: NULL       text:        NULL       md:          \"AUC~int,inf,pred~\"       group:       \"Other\"     aucint.inf.pred.dose:       description: NULL       text:        NULL       md:          \"AUC~int,inf,pred,dose~\"       group:       \"Other\"     aucint.last:       description: NULL       text:        NULL       md:          \"AUC~int,last~\"       group:       \"Other\"     aucint.last.dose:       description: NULL       text:        NULL       md:          \"AUC~int,last,dose~\"       group:       \"Other\"     aucivall:       description: NULL       text:        NULL       md:          \"AUC~iv,all~\"       group:       \"Other\"     aucivinf.obs:       description: NULL       text:        NULL       md:          \"AUC~iv,inf,obs~\"       group:       \"Other\"     aucivinf.pred:       description: NULL       text:        NULL       md:          \"AUC~iv,inf,pred~\"       group:       \"Other\"     aucivint.all:       description: NULL       text:        NULL       md:          \"AUC~iv,int,all~\"       group:       \"Other\"     aucivint.last:       description: NULL       text:        NULL       md:          \"AUC~iv,int,last~\"       group:       \"Other\"     aucivlast:       description: NULL       text:        NULL       md:          \"AUC~iv,last~\"       group:       \"Other\"     aucivpbextall:       description: NULL       text:        NULL       md:          \"AUC~iv,pbe,all~\"       group:       \"Other\"     aucivpbextinf.obs:       description: NULL       text:        NULL       md:          \"AUC~iv,pbe,inf,obs~\"       group:       \"Other\"     aucivpbextinf.pred:       description: NULL       text:        NULL       md:          \"AUC~iv,pbe,inf,pred~\"       group:       \"Other\"     aucivpbextint.all:       description: NULL       text:        NULL       md:          \"AUC~iv,pbe,inf,all~\"       group:       \"Other\"     aucivpbextint.last:       description: NULL       text:        NULL       md:          \"AUC~iv,pbe,inf,last~\"       group:       \"Other\"     aucivpbextlast:       description: NULL       text:        NULL       md:          \"AUC~iv,pbe,last~\"       group:       \"Other\"     auclast:       description: NULL       text:        NULL       md:          \"AUC~last~\"       group:       \"Other\"     auclast.dn:       description: NULL       text:        NULL       md:          \"AUC~last,dn~\"       group:       \"Other\"     aucpext.obs:       description: NULL       text:        NULL       md:          \"AUC~pext,obs~\"       group:       \"Other\"     aucpext.pred:       description: NULL       text:        NULL       md:          \"AUC~pext,pred~\"       group:       \"Other\"     aumcall:       description: NULL       text:        NULL       md:          \"AUMC~all~\"       group:       \"Other\"     aumcall.dn:       description: NULL       text:        NULL       md:          \"AUMC~all,dn~\"       group:       \"Other\"     aumcinf.obs:       description: NULL       text:        NULL       md:          \"AUMC~inf,obs~\"       group:       \"Other\"     aumcinf.obs.dn:       description: NULL       text:        NULL       md:          \"AUMC~inf,obs,dn~\"       group:       \"Other\"     aumcinf.pred.dn:       description: NULL       text:        NULL       md:          \"AUMC~inf,pred,dn~\"       group:       \"Other\"     aumclast:       description: NULL       text:        NULL       md:          \"AUMC~last~\"       group:       \"Other\"     aumclast.dn:       description: NULL       text:        NULL       md:          \"AUMC~last,dn~\"       group:       \"Other\"     c0:       description: NULL       text:        NULL       md:          \"C~0~\"       group:       \"Common Parameters\"     cav:       description: NULL       text:        NULL       md:          \"C~ave~\"       group:       \"Other\"     cav.int.all:       description: NULL       text:        NULL       md:          \"C~ave,int,all~\"       group:       \"Other\"     cav.int.inf.obs:       description: NULL       text:        NULL       md:          \"C~ave,int,int,obs~\"       group:       \"Other\"     cav.int.inf.pred:       description: NULL       text:        NULL       md:          \"C~ave,int,int,pred~\"       group:       \"Other\"     cav.int.last:       description: NULL       text:        NULL       md:          \"C~ave,int,last~\"       group:       \"Other\"     cav.dn:       description: NULL       text:        NULL       md:          \"C~ave,dn~\"       group:       \"Other\"     ceoi:       description: NULL       text:        NULL       md:          \"C~EOI~\"       group:       \"Other\"     cl.all:       description: NULL       text:        NULL       md:          \"CL\"       group:       \"Common Parameters\"     cl.last:       description: NULL       text:        NULL       md:          \"CL~last~\"       group:       \"Common Parameters\"     cl.obs:       description: NULL       text:        NULL       md:          \"CL~obs~\"       group:       \"Other\"     cl.pred:       description: NULL       text:        NULL       md:          \"CL~pred~\"       group:       \"Other\"     clast.obs:       description: NULL       text:        NULL       md:          \"CL~last,obs~\"       group:       \"Other\"     clast.pred:       description: NULL       text:        NULL       md:          \"CL~last,pred~\"       group:       \"Other\"     clast.pred.dn:       description: NULL       text:        NULL       md:          \"CL~last,pred,dn~\"       group:       \"Other\"     clr.last:       description: NULL       text:        NULL       md:          \"CL~R,last~\"       group:       \"Other\"     clr.obs:       description: NULL       text:        NULL       md:          \"CL~R,obs~\"       group:       \"Other\"     clr.pred:       description: NULL       text:        NULL       md:          \"CL~R,pred~\"       group:       \"Other\"     cmax:       description: NULL       text:        NULL       md:          \"C~max~\"       group:       \"Common Parameters\"     cmax.dn:       description: NULL       text:        NULL       md:          \"C~max,dn~\"       group:       \"Other\"     cmin:       description: NULL       text:        NULL       md:          \"C~min~\"       group:       \"Other\"     cmin.dn:       description: NULL       text:        NULL       md:          \"C~min,dn~\"       group:       \"Other\"     count_conc:       description: NULL       text:        NULL       md:          \"N~obs~\"       group:       \"Other\"     ctrough:       description: NULL       text:        NULL       md:          \"C~tr~\"       group:       \"Other\"     ctrough.dn:       description: NULL       text:        NULL       md:          \"C~tr,dn~\"       group:       \"Other\"     deg.fluc:       description: NULL       text:        NULL       md:          \"dgf\"       group:       \"Other\"     end:       description: NULL       text:        NULL       md:          \"t~end~\"       group:       \"Other\"     f:       description: NULL       text:        NULL       md:          \"f~b~\"       group:       \"Other\"     fe:       description: NULL       text:        NULL       md:          \"f~e~\"       group:       \"Other\"     half.life:       description: NULL       text:        NULL       md:          \"t~half~\"       group:       \"Common Parameters\"     kel.iv.last:       description: NULL       text:        NULL       md:          \"k~el,iv,last~\"       group:       \"Other\"     kel.iv.obs:       description: NULL       text:        NULL       md:          \"k~el,iv,obs~\"       group:       \"Other\"     kel.iv.pred:       description: NULL       text:        NULL       md:          \"k~el,iv,pred~\"       group:       \"Other\"     kel.last:       description: NULL       text:        NULL       md:          \"k~el,last~\"       group:       \"Other\"     kel.obs:       description: NULL       text:        NULL       md:          \"k~el,obs~\"       group:       \"Other\"     kel.pred:       description: NULL       text:        NULL       md:          \"k~el,pred~\"       group:       \"Other\"     lambda.z:       description: NULL       text:        \"λz\"       md:          \"<ff:symbol>l<\/ff>~z~\"       group:       \"Other\"     lambda.z.n.points:       description: NULL       text:        \"λz,n\"       md:          \"<ff:symbol>l<\/ff>~z,n~\"       group:       \"Other\"     lambda.z.time.first:       description: NULL       text:        \"λz (t 1ˢᵗ)\"       md:          \"<ff:symbol>l<\/ff>~z~ (t 1^st^)\"       group:       \"Other\"     mrt.iv.last:       description: NULL       text:        NULL       md:          \"MRT~iv,last~\"       group:       \"Other\"     mrt.iv.obs:       description: NULL       text:        NULL       md:          \"MRT~iv,obs~\"       group:       \"Other\"     mrt.iv.pred:       description: NULL       text:        NULL       md:          \"MRT~iv,pred~\"       group:       \"Other\"     mrt.last:       description: NULL       text:        NULL       md:          \"MRT~last~\"       group:       \"Other\"     mrt.md.obs:       description: NULL       text:        NULL       md:          \"MRT~md,obs~\"       group:       \"Other\"     mrt.md.pred:       description: NULL       text:        NULL       md:          \"MRT~md,pred~\"       group:       \"Other\"     mrt.obs:       description: NULL       text:        NULL       md:          \"MRT~obs~\"       group:       \"Other\"     mrt.pred:       description: NULL       text:        NULL       md:          \"MRT~pred~\"       group:       \"Other\"     ptr:       description: NULL       text:        NULL       md:          \"PTR\"       group:       \"Other\"     r.squared:       description: NULL       text:        \"r²\"       md:          \"R^2^\"       group:       \"Common Parameters\"     span.ratio:       description: NULL       text:        NULL       md:          \"SR\"       group:       \"Other\"     sparse_auclast:       description: NULL       text:        NULL       md:          \"AUC~last,sp~\"       group:       \"Sparse Analysis\"     sparse_se:       description: NULL       text:        NULL       md:          \"SE(AUC~last,sp~)\"       group:       \"Sparse Analysis\"     sparse_df:       description: NULL       text:        NULL       md:          \"DF(AUC~last,sp~)\"       group:       \"Sparse Analysis\"     start:       description: NULL       text:        NULL       md:          \"t~start~\"       group:       \"Other\"     swing:       description: NULL       text:        NULL       md:          \"SWING\"       group:       \"Other\"     tfirst:       description: NULL       text:        \"t 1ˢᵗ\"       md:          \"t~first~\"       group:       \"Other\"     thalf.eff.iv.last:       description: NULL       text:        NULL       md:          \"t~half,eff,iv,last~\"       group:       \"Other\"     thalf.eff.iv.obs:       description: NULL       text:        NULL       md:          \"t~half,eff,iv,obs~\"       group:       \"Other\"     thalf.eff.iv.pred:       description: NULL       text:        NULL       md:          \"t~half,eff,iv,pred~\"       group:       \"Other\"     thalf.eff.last:       description: NULL       text:        NULL       md:          \"t~half,eff,last~\"       group:       \"Other\"     thalf.eff.obs:       description: NULL       text:        NULL       md:          \"t~half,eff,obs~\"       group:       \"Other\"     thalf.eff.pred:       description: NULL       text:        NULL       md:          \"t~half,eff,pred~\"       group:       \"Other\"     time_above:       # JMH how is the conconcentration specified       description: NULL       text:        NULL       md:          \"t~ab~\"       group:       \"Other\"     tlag:       description: NULL       text:        NULL       md:          \"t~lag~\"       group:       \"Other\"     tlast:       description: NULL       text:        NULL       md:          \"t~last~\"       group:       \"Other\"     totdose:       description: NULL       text:        NULL       md:          \"Dose~tot~\"       group:       \"Other\"     vss.iv.last:       description: NULL       text:        NULL       md:          \"V~ss,iv,last~\"       group:       \"Other\"     vss.iv.obs:       description: NULL       text:        NULL       md:          \"V~ss,iv,obs~\"       group:       \"Other\"     vss.iv.pred:       description: NULL       text:        NULL       md:          \"V~ss,iv,pred~\"       group:       \"Other\"     vss.last:       description: NULL       text:        NULL       md:          \"V~ss,iv,last~\"       group:       \"Other\"     vss.md.obs:       description: NULL       text:        NULL       md:          \"V~ss,md,obs~\"       group:       \"Other\"     vss.md.pred:       description: NULL       text:        NULL       md:          \"V~ss,md,pred~\"       group:       \"Other\"     vss.obs:       description: NULL       text:        NULL       md:          \"V~ss,obs~\"       group:       \"Other\"     vss.pred:       description: NULL       text:        NULL       md:          \"V~ss,pred~\"       group:       \"Other\"     vz.obs:       description: NULL       text:        NULL       md:          \"V~z,obs~\"       group:       \"Other\"     vz.pred:       description: NULL       text:        NULL       md:          \"V~z,pred~\"       group:       \"Other\"   units:     # For reference this is the units vignette from PKNCA     #     # http://billdenney.github.io/pknca/articles/v07-unit-conversion.html     #     # Default value for whether or not to include units. This can     # be overwritten in the app.     include_units: TRUE     # Add unit options here, they will appear in the order they are     # entered. The _def below is the default when a new analysis is     # initialize. It must be in the list.     # BILL how will PKNCA handle units like µg     conc:     [\"ng/mL\",   \"µg/mL\",  \"g/L\",    \"molar\",  \"nM\"]     conc_def:  \"ng/mL\"     dose:     [\"g\",  \"mg\",  \"mg/kg\",   \"µg\", \"µg/kg\",   \"ng\",   \"ng/kg\"]     dose_def:  \"mg\"     amt:      [\"g\",  \"mg\", \"µg\",  \"ng\", \"g\", \"moles\", \"µmoles\", \"nmoles\"]     amt_def:   \"mg\"     time:     [\"day\",     \"hr\",      \"min\",    \"sec\"         ]     time_def:  \"day\"     vol:      [\"mL\",     \"L\"]   # This is used to generate documentation about required columns in datasets.   # Yous hould only change the Column and Description elements. The others are   # used internally.   data_format:     columns:      - entry:         sname:       \"id\"         Column:      \"Subject ID\"         Required:    \"yes\"         Description: \"Unique subject identifier.\"      - entry:         sname:       \"time\"         Column:      \"Time\"         Required:    \"yes\"         Description: \"Time since the first dose. Must be numeric.\"      - entry:         sname:       \"ntime\"         Column:      \"Nominal Time\"         Required:    \"yes\"         Description: \"Time since the last dose in the cycle (same units as Time). Must be numeric.\"      - entry:         sname:       \"conc\"         Column:      \"Concentration\"         Required:    \"yes\"         Description: \"Observed concentration. Must be numeric, no NA values. Missing values should be set to 0.\"      # BILL should this be the dose given at time zero or total dose given over a cycle      - entry:         sname:       \"dose\"         Column:      \"Dose\"         Required:    \"yes\"         Description: \"Value of dose given (must be numeric).\"      - entry:         sname:       \"route\"         Column:      \"Route\"         Required:    \"yes\"         Description: \"Doseing route. It should be either 'extravascular' or 'intravascular' but ruminate will make an effort to figure out other values.\"      - entry:         sname:       \"dur\"         Column:      \"Duration (optional)\"         Required:    \"no\"         Description: \"Doseing duration (same units as Time). If set to N/A a value of 0 will be assumed.\"      - entry:         sname:       \"cycle\"         Column:      \"Dose cycle\"         Required:    \"yes\"         Description: \"Current dose cycle\""},{"path":"https://ruminate.ubiquity.tools/articles/rmdhunks/simulate_rules.html","id":"creating-subjects","dir":"Articles > Rmdhunks","previous_headings":"","what":"Creating subjects","title":"","text":"Subjects expected data frame following column headers: id Individual subject id Names parameters iiv specified ini section rxode2 function specification Names covariates used model. mk_subjects() — Creates subjects simulation sampling based -subject variability generating covariate information based user specifications.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/rmdhunks/simulate_rules.html","id":"covariates","dir":"Articles > Rmdhunks","previous_headings":"Creating subjects","what":"Covariates","title":"","text":"covs input list following structure: type: Can either “fixed”, “discrete”, “continuous”. sampling: field needed “continuous” covariate ’ type can either “random”, “normal” “log-normal”. fixed: single value. discrete: vector possible discrete elements. continuous, random: Two values first lower bound second upper bound. continuous, normal: Two values first mean second variance. continuous, log-normal: Two values first mean second variance. examples shows SEX_ID randomly sampled values specified, SUBTYPE_ID fixed value, WT sampled log-normal distribution.","code":"covs = list(   SEX_ID     = list(type     = \"discrete\",                      values   = c(0,1)),   SUBTYPE_ID = list(type     = \"fixed\",                     values   = c(0)),   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )"},{"path":"https://ruminate.ubiquity.tools/articles/rmdhunks/simulate_rules.html","id":"rule-based-simulations","dir":"Articles > Rmdhunks","previous_headings":"","what":"Rule-based simulations","title":"","text":"simulate_rules() — run simulations based rule definitions .","code":""},{"path":"https://ruminate.ubiquity.tools/articles/rmdhunks/simulate_rules.html","id":"rules","dir":"Articles > Rmdhunks","previous_headings":"Rule-based simulations","what":"Rules","title":"","text":"Rules named list list name can short descriptive label used remember rule . names returned columns simulated data frame. condition: Character string evaluates either TRUE FALSE. true action portion triggered. list objects available see Rule-evaluation environment . fail_flag: Flag set rule_id column condition met (set \"false\" specified). true_flag: Flag set rule_id column condition met (set \"true\" specified). type: defines action type can either \"dose\", \"set state\", \"manual\". Based type action field expect different elements. Dosing: type: \"dose\" values: Character string evaluates numeric vector dosing amounts (e.g. \"c(3,  3,  3,  3)\") times: Character string evaluates numeric vector times (e.g. \"c(0, 14, 28, 42)\") durations: Character string evaluates numeric vector durations (e.g. \"c(0, 0, 0, 0)\", zero bolus dosing) Changing state value: type: \"set state\" state: Character string name state set (\"Ac\") value: Character string evaluates numeric value state (e.g. \"Ac/2\" set state half value Ac evaluation point) Manual modification simulation: type: \"manual\" code: Character string code evaluate.","code":""},{"path":"https://ruminate.ubiquity.tools/articles/rmdhunks/simulate_rules.html","id":"rule-evaluation-environment","dir":"Articles > Rmdhunks","previous_headings":"Rule-based simulations","what":"Rule-evaluation environment","title":"","text":"Beyond simple simulations necessary execute actions based current previous state system. reason, condition elements action (e.g., values, times durations dose action type) evaluated, following objects available evaluation point: outputs: value model output. states: value named state compartment. covariates: value named covariate. subject-level parameters: value named parameter. rule value: last value rule evaluated . id: Current subject id. time: Current evaluation time. SI_SUB_HISTORY: data frame simulation history current subject current evaluation point. SI_subjects: subjects data frame. SI_eval_times: Vector evaluation times. SI_interval_ev: events table ’s current state given simulation interval. SI_ev_history: history event table containing events leading current interval. SI_ud_history: free form object user can define alter within “manual”action type (ud-user defined, history).","code":""},{"path":"https://ruminate.ubiquity.tools/articles/rmdhunks/simulate_rules.html","id":"the-following-functions-will-be-available","dir":"Articles > Rmdhunks","previous_headings":"Rule-based simulations > Rule-evaluation environment","what":"The following functions will be available:","title":"","text":"SI_fpd: function fetch previous dose (fpd) given id state. example current id state Ac following:","code":"SI_fpd(id=id, state=\"Ac\")"},{"path":"https://ruminate.ubiquity.tools/articles/rmdhunks/simulate_rules.html","id":"time-scales","dir":"Articles > Rmdhunks","previous_headings":"Rule-based simulations","what":"Time scales","title":"","text":"can include columns output different time scales wish. need create list format . One element system short name system time scale. next details list containing short names time scale want include. list verbose name time scale (verb) numerical conversion indicating time scale relates others. define weeks days basis seconds.","code":"time_scales = list(system=\"days\",                  details= list(                   weeks = list(verb=\"Weeks\",    conv=1/(60*60*24*7)),                   days  = list(verb=\"Days\",     conv=1/(60*60*24))))"},{"path":"https://ruminate.ubiquity.tools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Harrold. Author, maintainer.","code":""},{"path":"https://ruminate.ubiquity.tools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harrold J (2025). ruminate: Pharmacometrics Data Transformation Analysis Tool. R package version 0.3.0, https://ruminate.ubiquity.tools/.","code":"@Manual{,   title = {ruminate: A Pharmacometrics Data Transformation and Analysis Tool},   author = {John Harrold},   year = {2025},   note = {R package version 0.3.0},   url = {https://ruminate.ubiquity.tools/}, }"},{"path":"https://ruminate.ubiquity.tools/index.html","id":"ruminate-","dir":"","previous_headings":"","what":"A Pharmacometrics Data Transformation and Analysis Tool","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"goal ruminate facilitate exploration pharmacometrics data. done creating Shiny interface different tools data transformation (dplyr tidyr), plotting (ggplot2), noncompartmental analysis (PKNCA). results can reported Excel, Word PowerPoint. state app can saved loaded later date. saved, script generated reproduce different actions Shiny interface.","code":""},{"path":"https://ruminate.ubiquity.tools/index.html","id":"deployed-example-in-the-cloud","dir":"","previous_headings":"","what":"Deployed example in the cloud","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"can point web browser runrumiate.ubiquity.tools try development version ruminate. Keep mind public server. data tracked kept, open public. careful uploading confidential data. Also know single instance many people using can slow.","code":""},{"path":[]},{"path":"https://ruminate.ubiquity.tools/index.html","id":"from-cran","dir":"","previous_headings":"","what":"From CRAN","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"can install released version ruminate CRAN :","code":"# General dependencies: install.packages(\"clipr\") install.packages(\"gridExtra\") install.packages(\"prompter\") install.packages(\"readxl\") install.packages(\"shinydashboard\") install.packages(\"ubiquity\")  # Dependencies for the MB and CTS modules install.packages(\"nlmixr2lib\") install.packages(\"nonmem2rx\") install.packages(\"rxode2\") install.packages(\"rxode2et\") install.packages(\"nlmixr2\")  # Actual package install.packages(\"ruminate\")"},{"path":"https://ruminate.ubiquity.tools/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"can install development version GitHub following: Note ruminate depends formods onbrand need first install development versions onbrand formods.","code":"# Installing devtools if it's not already installed if(system.file(package=\"devtools\") == \"\"){   install.packages(\"devtools\")  }  # General dependencies: install.packages(\"clipr\") install.packages(\"gridExtra\") install.packages(\"prompter\") install.packages(\"readxl\") install.packages(\"shinydashboard\") install.packages(\"ubiquity\")  # Dependencies for the MB and CTS modules install.packages(\"nlmixr2lib\") install.packages(\"nonmem2rx\") install.packages(\"rxode2\")  devtools::install_github(\"john-harrold/onbrand\",  dependencies=TRUE) devtools::install_github(\"john-harrold/formods\",  dependencies=TRUE) devtools::install_github(\"john-harrold/ruminate\")"},{"path":[]},{"path":"https://ruminate.ubiquity.tools/index.html","id":"in-rstudio","dir":"","previous_headings":"","what":"In RStudio","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"run default/stable version ruminate: new modules developed can found development app. command run ruminate development modules enabled: running probably using development version github make sure latest version.","code":"library(ruminate) ruminate() library(ruminate) library(shiny) runApp(system.file(package=\"ruminate\",\"templates\", \"ruminate_devel.R\"))"},{"path":"https://ruminate.ubiquity.tools/index.html","id":"in-a-docker-container","dir":"","previous_headings":"","what":"In a Docker container","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"kind assumes basic familiarity Docker. Keep mind containers built ‘x86’ images. Essentially Intel/AMD cpus. means Mac Apple Silicon (M1, M2,etc.) may work performance may good.","code":""},{"path":"https://ruminate.ubiquity.tools/index.html","id":"pull-a-container-from-docker","dir":"","previous_headings":"In a Docker container","what":"Pull a container from Docker","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"pull container docker run locally worked can put following web browser use ruminate :","code":"docker pull johnmharrold/ruminate:latest docker run -p 3838:3838   johnmharrold/ruminate:latest & http://127.0.0.1:3838/"},{"path":"https://ruminate.ubiquity.tools/index.html","id":"create-your-own-container","dir":"","previous_headings":"In a Docker container","what":"Create your own container","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"want create container can following: run Docker image locally: everything worked can point web browser : push image DockerHub: can use pull image DockerHub:","code":"docker build -t ruminate --no-cache  https://raw.githubusercontent.com/john-harrold/ruminate/main/inst/docker/local_container docker run --name ruminate --rm -p 3838:3838 ruminate http://127.0.0.1:3838/ docker tag ruminate <username>/ruminate:latest docker push <username>/ruminate:latest docker pull <username>/ruminate:latest"},{"path":"https://ruminate.ubiquity.tools/index.html","id":"deployment-and-customization","dir":"","previous_headings":"","what":"Deployment and Customization","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"want deploy customize ruminate, please see Deployment vignette.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_Server.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Trial Simulator State Server — CTS_Server","title":"Clinical Trial Simulator State Server — CTS_Server","text":"Server function Clinical Trial Simulator  Shiny Module","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_Server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Trial Simulator State Server — CTS_Server","text":"","code":"CTS_Server(   id,   id_ASM = \"ASM\",   id_MB = \"MB\",   FM_yaml_file = system.file(package = \"formods\", \"templates\", \"formods.yaml\"),   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\"),   deployed = FALSE,   react_state = NULL )"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_Server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinical Trial Simulator State Server — CTS_Server","text":"id ID string corresponds ID used call modules UI elements id_ASM ID string app state managment module used save load app states id_MB ID string corresponds ID used call MB modules FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. deployed Boolean variable indicating whether app deployed . react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_Server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical Trial Simulator State Server — CTS_Server","text":"UD Server object","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_covariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Covariate to Elemetnt — CTS_add_covariate","title":"Add Covariate to Elemetnt — CTS_add_covariate","text":"Takes ui elements module state processes covariate elements addition.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_covariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Covariate to Elemetnt — CTS_add_covariate","text":"","code":"CTS_add_covariate(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_covariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Covariate to Elemetnt — CTS_add_covariate","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_covariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Covariate to Elemetnt — CTS_add_covariate","text":"Element results adding covariate. cares list element can used determine exit status function. COV_IS_GOOD  TRUE covariate good added, FALSE issues. msgs     Vector messages.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_covariate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Covariate to Elemetnt — CTS_add_covariate","text":"depends following UI values state state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]] state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]] state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_covariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Covariate to Elemetnt — CTS_add_covariate","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) #> Loading formods if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: fb65292c2009dd110582d6d30f75be78 #> → CTS: module checksum updated: 10a26ecddf92dda5a1335a3c7e2e8f51 #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 4f3e8c6685056dcdeb77ba6a2a2ce6e8 #> → CTS: module checksum updated: d2cfba9202ed92315b76e8ce4f7cbc3c #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 17a43e577b2cf32f09a692d299ac7d34 #> → CTS: module checksum updated: fc3d311418c3a07c4d1a16802bb33fe6"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Rule to Element — CTS_add_rule","title":"Add Rule to Element — CTS_add_rule","text":"Takes ui elements state element attempts add rule.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Rule to Element — CTS_add_rule","text":"","code":"CTS_add_rule(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Rule to Element — CTS_add_rule","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Rule to Element — CTS_add_rule","text":"Element results adding rule. rares list element can used determine exit status function. RULE_IS_GOOD  true indicates pieces rule UI check . RULE_UPDATED  RULE_IS_GOOD RULE_UPDATED true previous rule definition overwritten. RULE_IS_GOOD TRUE RULE_UPDATED FALSE new rule added. notify_text  Text notify message notify_id    Notification ID notify_type  Notification type msgs         Vector messages.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_rule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Rule to Element — CTS_add_rule","text":"depends following UI values state element state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]] state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]] state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]] rule type \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]] state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]] state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]] state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]] rule type \"set state\" state[[\"CTS\"]][[\"ui\"]][[\"action_set_state_state\"]] state[[\"CTS\"]][[\"ui\"]][[\"action_set_state_values\"]] rule type \"manual code\" state[[\"CTS\"]][[\"ui\"]][[\"action_manual_code\"]]","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_add_rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Rule to Element — CTS_add_rule","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: fb65292c2009dd110582d6d30f75be78 #> → CTS: module checksum updated: 10a26ecddf92dda5a1335a3c7e2e8f51 #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 4f3e8c6685056dcdeb77ba6a2a2ce6e8 #> → CTS: module checksum updated: d2cfba9202ed92315b76e8ce4f7cbc3c #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 17a43e577b2cf32f09a692d299ac7d34 #> → CTS: module checksum updated: fc3d311418c3a07c4d1a16802bb33fe6"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_append_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Report Elements — CTS_append_report","title":"Append Report Elements — CTS_append_report","text":"Appends report elements formods report.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_append_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Report Elements — CTS_append_report","text":"","code":"CTS_append_report(state, rpt, rpttype, gen_code_only = FALSE)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_append_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Report Elements — CTS_append_report","text":"state CTS state CTS_fetch_state() rpt Report current content report appended function. details structure see documentation onbrand::template_details() rpttype Type report generate (supported \"xlsx\", \"pptx\", \"docx\"). gen_code_only Boolean value indicating code generated (FALSE).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_append_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Report Elements — CTS_append_report","text":"list containing following elements isgood:    Return status function. hasrptele: Boolean indicator module reportable elements. code:      Code generate reporting elements. msgs:      Messages passed back user. rpt:       Report additions passed back user.","code":""},{"path":[]},{"path":"https://ruminate.ubiquity.tools/reference/CTS_change_source_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the Source Model — CTS_change_source_model","title":"Change the Source Model — CTS_change_source_model","text":"Takes ui elements state element processes changes source model updates element accordingly.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_change_source_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the Source Model — CTS_change_source_model","text":"","code":"CTS_change_source_model(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_change_source_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the Source Model — CTS_change_source_model","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_change_source_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the Source Model — CTS_change_source_model","text":"Element necessary changes source model.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_change_source_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the Source Model — CTS_change_source_model","text":"depends following UI values state. state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]]","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_change_source_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the Source Model — CTS_change_source_model","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: fb65292c2009dd110582d6d30f75be78 #> → CTS: module checksum updated: 10a26ecddf92dda5a1335a3c7e2e8f51 #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 4f3e8c6685056dcdeb77ba6a2a2ce6e8 #> → CTS: module checksum updated: d2cfba9202ed92315b76e8ce4f7cbc3c #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 17a43e577b2cf32f09a692d299ac7d34 #> → CTS: module checksum updated: fc3d311418c3a07c4d1a16802bb33fe6"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_del_current_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Deletes Current cohort — CTS_del_current_element","title":"Deletes Current cohort — CTS_del_current_element","text":"Takes CTS state deletes current cohort. last element, new default added.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_del_current_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deletes Current cohort — CTS_del_current_element","text":"","code":"CTS_del_current_element(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_del_current_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deletes Current cohort — CTS_del_current_element","text":"state CTS state CTS_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_del_current_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deletes Current cohort — CTS_del_current_element","text":"CTS state object current cohort deleted.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_del_current_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deletes Current cohort — CTS_del_current_element","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: fb65292c2009dd110582d6d30f75be78 #> → CTS: module checksum updated: 10a26ecddf92dda5a1335a3c7e2e8f51 #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 4f3e8c6685056dcdeb77ba6a2a2ce6e8 #> → CTS: module checksum updated: d2cfba9202ed92315b76e8ce4f7cbc3c #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 17a43e577b2cf32f09a692d299ac7d34 #> → CTS: module checksum updated: fc3d311418c3a07c4d1a16802bb33fe6"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Module Code — CTS_fetch_code","title":"Fetch Module Code — CTS_fetch_code","text":"Fetches code generate results seen app","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Module Code — CTS_fetch_code","text":"","code":"CTS_fetch_code(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Module Code — CTS_fetch_code","text":"state CTS state CTS_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Module Code — CTS_fetch_code","text":"Character object vector lines code","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Module Code — CTS_fetch_code","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: fb65292c2009dd110582d6d30f75be78 #> → CTS: module checksum updated: 10a26ecddf92dda5a1335a3c7e2e8f51 #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 4f3e8c6685056dcdeb77ba6a2a2ce6e8 #> → CTS: module checksum updated: d2cfba9202ed92315b76e8ce4f7cbc3c #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 17a43e577b2cf32f09a692d299ac7d34 #> → CTS: module checksum updated: fc3d311418c3a07c4d1a16802bb33fe6"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_current_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Current cohort — CTS_fetch_current_element","title":"Fetches Current cohort — CTS_fetch_current_element","text":"Takes CTS state returns current active cohort","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_current_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Current cohort — CTS_fetch_current_element","text":"","code":"CTS_fetch_current_element(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_current_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Current cohort — CTS_fetch_current_element","text":"state CTS state CTS_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_current_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Current cohort — CTS_fetch_current_element","text":"List containing details active data view. structure list structure state$CTS$elements output CTS_fetch_state().","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_current_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Current cohort — CTS_fetch_current_element","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: fb65292c2009dd110582d6d30f75be78 #> → CTS: module checksum updated: 10a26ecddf92dda5a1335a3c7e2e8f51 #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 4f3e8c6685056dcdeb77ba6a2a2ce6e8 #> → CTS: module checksum updated: d2cfba9202ed92315b76e8ce4f7cbc3c #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 17a43e577b2cf32f09a692d299ac7d34 #> → CTS: module checksum updated: fc3d311418c3a07c4d1a16802bb33fe6"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Clinical Trial Simulator Module Datasets — CTS_fetch_ds","title":"Fetch Clinical Trial Simulator Module Datasets — CTS_fetch_ds","text":"Fetches datasets produced module. cohort simulation timecourse event table","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Clinical Trial Simulator Module Datasets — CTS_fetch_ds","text":"","code":"CTS_fetch_ds(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Clinical Trial Simulator Module Datasets — CTS_fetch_ds","text":"state CTS state CTS_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Clinical Trial Simulator Module Datasets — CTS_fetch_ds","text":"Character object vector lines code list containing following elements isgood:    Return status function. hasds:     Boolean indicator module datasets msgs:      Messages passed back user. ds:        List datasets. list element name R-object dataset. element following structure: label: Text label dataset MOD_TYPE: Short name type module. id: module ID DS: Dataframe containing actual dataset. DSMETA: Metadata describing DS code: Complete code build dataset. checksum: Module checksum. DSchecksum: Dataset checksum.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Clinical Trial Simulator Module Datasets — CTS_fetch_ds","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: fb65292c2009dd110582d6d30f75be78 #> → CTS: module checksum updated: 10a26ecddf92dda5a1335a3c7e2e8f51 #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 4f3e8c6685056dcdeb77ba6a2a2ce6e8 #> → CTS: module checksum updated: d2cfba9202ed92315b76e8ce4f7cbc3c #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 17a43e577b2cf32f09a692d299ac7d34 #> → CTS: module checksum updated: fc3d311418c3a07c4d1a16802bb33fe6"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_mdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Clinical Trial Simulator Module Models — CTS_fetch_mdl","title":"Fetch Clinical Trial Simulator Module Models — CTS_fetch_mdl","text":"Fetches models contained module.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_mdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Clinical Trial Simulator Module Models — CTS_fetch_mdl","text":"","code":"CTS_fetch_mdl(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_mdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Clinical Trial Simulator Module Models — CTS_fetch_mdl","text":"state CTS state CTS_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_mdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Clinical Trial Simulator Module Models — CTS_fetch_mdl","text":"list containing following elements isgood:    Return status function. hasmdl:    Boolean indicator module models msgs:      Messages passed back user. mdl:       List models. list element name R-object dataset. element following structure: label:      Text label model (e.g. one-compartment model). MOD_TYPE:   Type module. id:         Module ID. rx_obj:     rxode2 object name holds model. fcn_def:    Text define model MDLMETA:    Notes model. code:       Code generate model. checksum:   Module checksum. MDLchecksum: Model checksum.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_mdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Clinical Trial Simulator Module Models — CTS_fetch_mdl","text":"","code":"# We need a module state: sess_res = CTS_test_mksession(session=list(), full_session=FALSE) #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/My Drive/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/My Drive/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> Warning: incomplete final line found on '/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/nlmixr2lib/modeldb/indirect_0cpt_transitEx.R' #> Error in has_updated(old_chk, new_chk): could not find function \"has_updated\" state = sess_res$state #> Error in eval(expr, envir, enclos): object 'sess_res' not found  mdls = CTS_fetch_mdl(state) #> Error in CTS_fetch_mdl(state): object 'state' not found  names(mdls) #> Error in eval(expr, envir, enclos): object 'mdls' not found"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_sc_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Simulation Parameter Meta Information — CTS_fetch_sc_meta","title":"Fetches Simulation Parameter Meta Information — CTS_fetch_sc_meta","text":"provides meta information simulatino options. includes option names, text descriptions, ui_names used, etc.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_sc_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Simulation Parameter Meta Information — CTS_fetch_sc_meta","text":"","code":"CTS_fetch_sc_meta(   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\") )"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_sc_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Simulation Parameter Meta Information — CTS_fetch_sc_meta","text":"MOD_yaml_file Module configuration file MC main section.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_sc_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Simulation Parameter Meta Information — CTS_fetch_sc_meta","text":"List following elements: config List YAML->MC->sim_config. summary: Dataframe elements config tabular format. ui_config Vector  ui_ids configuration options.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_sc_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Simulation Parameter Meta Information — CTS_fetch_sc_meta","text":"","code":"CTS_fetch_sc_meta() #> $config #> $config$atol #> $config$atol$group #> [1] \"ODE Solver\" #>  #> $config$atol$label #> [1] \"Absolute tolerance\" #>  #> $config$atol$tooltip #> [1] \"Absolute tolerance used by the ODE solver to determine if a good solution has been achieved; This is also used in the solved linear model to check if prior doses do not add anything to the solution.\" #>  #> $config$atol$uitype #> [1] \"text\" #>  #> $config$atol$type #> [1] \"numeric\" #>  #> $config$atol$value #> [1] \"1e-8\" #>  #> $config$atol$options #> NULL #>  #> $config$atol$use #> [1] \"rxSolve\" #>  #> $config$atol$placeholder #> [1] \"1e-8\" #>  #> $config$atol$ui #> [1] \"cts_config_atol\" #>  #>  #> $config$rtol #> $config$rtol$group #> [1] \"ODE Solver\" #>  #> $config$rtol$label #> [1] \"Relative tolerance\" #>  #> $config$rtol$tooltip #> [1] \"Relative tolerance used by the ODE solver to determine if a good solution has been achieved. This is also used in the solved linear model to check if prior doses do not add anything to the solution.\" #>  #> $config$rtol$uitype #> [1] \"text\" #>  #> $config$rtol$type #> [1] \"numeric\" #>  #> $config$rtol$value #> [1] \"1e-6\" #>  #> $config$rtol$options #> NULL #>  #> $config$rtol$use #> [1] \"rxSolve\" #>  #> $config$rtol$placeholder #> [1] \"1e-6\" #>  #> $config$rtol$ui #> [1] \"cts_config_rtol\" #>  #>  #> $config$sigdig #> $config$sigdig$group #> [1] \"ODE Solver\" #>  #> $config$sigdig$label #> [1] \"Significant digits\" #>  #> $config$sigdig$tooltip #> [1] \"Specifies the \\\"significant digits\\\" that the ode solving requests. When specified this controls the relative and absolute tolerances of the ODE solvers. By default the tolerance is 0.5*10^(-sigdig-2) for regular ODEs. For the sensitivity equations the default is ⁠0.5*10\\\\^(-sigdig-1.5)⁠ (sensitivity changes only applicable for liblsoda). This also controls the atol/rtol of the steady state solutions. The ssAtol/ssRtol is ⁠0.5*10\\\\^(-sigdig)⁠ and for the sensitivities ⁠0.5*10\\\\^(-sigdig+0.625)⁠. By default this is unspecified (NULL) and uses the standard atol/rtol.\" #>  #> $config$sigdig$uitype #> [1] \"text\" #>  #> $config$sigdig$type #> [1] \"numeric\" #>  #> $config$sigdig$value #> [1] \"NULL\" #>  #> $config$sigdig$options #> NULL #>  #> $config$sigdig$use #> [1] \"rxSolve\" #>  #> $config$sigdig$placeholder #> [1] \"NULL\" #>  #> $config$sigdig$ui #> [1] \"cts_config_sigdig\" #>  #>  #> $config$seed #> $config$seed$group #> [1] \"Misc\" #>  #> $config$seed$label #> [1] \"Random Seed\" #>  #> $config$seed$tooltip #> [1] \"Integer value to set the seed for the random number generator\" #>  #> $config$seed$uitype #> [1] \"text\" #>  #> $config$seed$type #> [1] \"numeric\" #>  #> $config$seed$value #> [1] \"5446\" #>  #> $config$seed$options #> NULL #>  #> $config$seed$use #> [1] \"Misc\" #>  #> $config$seed$placeholder #> [1] \"5446\" #>  #> $config$seed$ui #> [1] \"cts_config_seed\" #>  #>  #> $config$nsteps #> $config$nsteps$group #> [1] \"Misc\" #>  #> $config$nsteps$label #> [1] \"Time Steps\" #>  #> $config$nsteps$tooltip #> [1] \"Integer value representing the number of time steps to add between zero and the end of trial. A larger value will give smoother curves but it will also take more time to simulate.\" #>  #> $config$nsteps$uitype #> [1] \"text\" #>  #> $config$nsteps$type #> [1] \"numeric\" #>  #> $config$nsteps$value #> [1] \"200\" #>  #> $config$nsteps$options #> NULL #>  #> $config$nsteps$use #> [1] \"Misc\" #>  #> $config$nsteps$placeholder #> [1] \"200\" #>  #> $config$nsteps$ui #> [1] \"cts_config_nsteps\" #>  #>  #> $config$preamble #> $config$preamble$group #> [1] \"Rule Environment Preamble\" #>  #> $config$preamble$label #> NULL #>  #> $config$preamble$tooltip #> [1] \"Optional user-defined code to be executed in the rule-evaluation environment. You can create user-defined functions here.\" #>  #> $config$preamble$uitype #> [1] \"textarea\" #>  #> $config$preamble$type #> [1] \"character\" #>  #> $config$preamble$value #> NULL #>  #> $config$preamble$options #> NULL #>  #> $config$preamble$use #> [1] \"rules\" #>  #> $config$preamble$placeholder #> [1] \"my_func = function(id=NULL){\\n\\n}\" #>  #> $config$preamble$ui #> [1] \"cts_config_preamble\" #>  #>  #>  #> $cfg_summary #>       name                  ui     use      type                     group #> 1     atol     cts_config_atol rxSolve   numeric                ODE Solver #> 2     rtol     cts_config_rtol rxSolve   numeric                ODE Solver #> 3   sigdig   cts_config_sigdig rxSolve   numeric                ODE Solver #> 4     seed     cts_config_seed    Misc   numeric                      Misc #> 5   nsteps   cts_config_nsteps    Misc   numeric                      Misc #> 6 preamble cts_config_preamble   rules character Rule Environment Preamble #>  #> $ui_config #> [1] \"cts_config_atol\"     \"cts_config_rtol\"     \"cts_config_sigdig\"   #> [4] \"cts_config_seed\"     \"cts_config_nsteps\"   \"cts_config_preamble\" #>"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Clinical Trial Simulator State — CTS_fetch_state","title":"Fetch Clinical Trial Simulator State — CTS_fetch_state","text":"Merges default app options changes made UI","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Clinical Trial Simulator State — CTS_fetch_state","text":"","code":"CTS_fetch_state(   id,   id_ASM,   id_MB,   input,   session,   FM_yaml_file,   MOD_yaml_file,   react_state )"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Clinical Trial Simulator State — CTS_fetch_state","text":"id Shiny module ID id_ASM ID string app state management module used save load app states id_MB ID string corresponds ID used call MB modules input Shiny input variable session Shiny session variable FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Clinical Trial Simulator State — CTS_fetch_state","text":"list containing current state app including default values yaml file well changes made user. list following structure: yaml: Full contents supplied yaml file. MC: Module components yaml file. CTS: isgood: Boolean object indicating file successfully loaded. checksum: MD5 sum contents element can used detect changes state. MOD_TYPE: Character data containing type module \"CTS\" id: Character data containing module id module session variable. FM_yaml_file: App configuration file FM main section. MOD_yaml_file:  Module configuration file MC main section.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_fetch_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Clinical Trial Simulator State — CTS_fetch_state","text":"","code":"# Within shiny both session and input variables will exist, # this creates examples here for testing purposes: sess_res = MB_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE session = sess_res$session input   = sess_res$input  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  # Creating an empty state object state = CTS_fetch_state(id              = \"CTS\",                        id_ASM          = \"ASM\",                        id_MB           = \"MB\",                        input           = input,                        session         = session,                        FM_yaml_file    = FM_yaml_file,                        MOD_yaml_file   = MOD_yaml_file,                        react_state     = NULL) #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_element_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Initializes Cohort When Model Changes — CTS_init_element_model","title":"Initializes Cohort When Model Changes — CTS_init_element_model","text":"source model changes update information model like default dvcols selection information dvcols","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_element_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initializes Cohort When Model Changes — CTS_init_element_model","text":"","code":"CTS_init_element_model(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_element_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initializes Cohort When Model Changes — CTS_init_element_model","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_element_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initializes Cohort When Model Changes — CTS_init_element_model","text":"CTS state object current cohort ui elements initialized based current model selected","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize CTS Module State — CTS_init_state","title":"Initialize CTS Module State — CTS_init_state","text":"Creates list initialized module state","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize CTS Module State — CTS_init_state","text":"","code":"CTS_init_state(FM_yaml_file, MOD_yaml_file, id, id_MB, session)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize CTS Module State — CTS_init_state","text":"FM_yaml_file App configuration file FM main section MOD_yaml_file Module configuration file MC main section id ID string module id_MB ID string corresponds ID used call MB modules session Shiny session variable","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize CTS Module State — CTS_init_state","text":"list containing empty CTS state","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_init_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize CTS Module State — CTS_init_state","text":"","code":"# Within shiny both session and input variables will exist, # this creates examples here for testing purposes: sess_res = MB_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE session = sess_res$session input   = sess_res$input  state = CTS_init_state(    FM_yaml_file  = system.file(package = \"formods\",                                \"templates\",                                \"formods.yaml\"),    MOD_yaml_file = system.file(package = \"ruminate\",                                \"templates\",                                \"CTS.yaml\"),    id              = \"CTS\",    id_MB           = \"MB\",    session         = session) #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized  state #> $yaml #> $yaml$FM #> $yaml$FM$include #> $yaml$FM$include$files #> $yaml$FM$include$files[[1]] #> $yaml$FM$include$files[[1]]$file #> $yaml$FM$include$files[[1]]$file$source #> [1] \"file.path(system.file(package=\\\"onbrand\\\"), \\\"templates\\\", \\\"report.docx\\\")\" #>  #> $yaml$FM$include$files[[1]]$file$dest #> [1] \"file.path(\\\"config\\\",\\\"report.docx\\\")\" #>  #>  #>  #> $yaml$FM$include$files[[2]] #> $yaml$FM$include$files[[2]]$file #> $yaml$FM$include$files[[2]]$file$source #> [1] \"file.path(system.file(package=\\\"onbrand\\\"), \\\"templates\\\", \\\"report.pptx\\\")\" #>  #> $yaml$FM$include$files[[2]]$file$dest #> [1] \"file.path(\\\"config\\\",\\\"report.pptx\\\")\" #>  #>  #>  #> $yaml$FM$include$files[[3]] #> $yaml$FM$include$files[[3]]$file #> $yaml$FM$include$files[[3]]$file$source #> [1] \"file.path(system.file(package=\\\"onbrand\\\"), \\\"templates\\\", \\\"report.yaml\\\")\" #>  #> $yaml$FM$include$files[[3]]$file$dest #> [1] \"file.path(\\\"config\\\",\\\"report.yaml\\\")\" #>  #>  #>  #>  #>  #> $yaml$FM$deployed #> [1] FALSE #>  #> $yaml$FM$code #> $yaml$FM$code$theme #> [1] \"vibrant_ink\" #>  #> $yaml$FM$code$showLineNumbers #> [1] TRUE #>  #> $yaml$FM$code$gen_file #> [1] \"run_analysis.R\" #>  #> $yaml$FM$code$gen_preamble #> [1] \"# formods automated output ------------------------------------------------\\n# https://formods.ubiquity.tools/\\nrm(list=ls())\" #>  #> $yaml$FM$code$packages #> [1] \"onbrand\" \"writexl\" #>  #>  #> $yaml$FM$notifications #> $yaml$FM$notifications$config #> $yaml$FM$notifications$config$success #> $yaml$FM$notifications$config$success$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$success$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$success$background #> [1] \"#5bb85b\" #>  #>  #> $yaml$FM$notifications$config$failure #> $yaml$FM$notifications$config$failure$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$failure$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$failure$background #> [1] \"#d9534f\" #>  #>  #> $yaml$FM$notifications$config$info #> $yaml$FM$notifications$config$info$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$info$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$info$background #> [1] \"#5bc0de\" #>  #>  #> $yaml$FM$notifications$config$warning #> $yaml$FM$notifications$config$warning$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$warning$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$warning$background #> [1] \"#f0ac4d\" #>  #>  #>  #>  #> $yaml$FM$reporting #> $yaml$FM$reporting$enabled #> [1] TRUE #>  #> $yaml$FM$reporting$content_init #> $yaml$FM$reporting$content_init$xlsx #> [1] \"rpt = list(summary = NULL,\\n           sheets  = list())\" #>  #> $yaml$FM$reporting$content_init$docx #> [1] \"rpt  = onbrand::read_template(\\n  template = file.path(\\\"config\\\", \\\"report.docx\\\"),\\n  mapping  = file.path(\\\"config\\\", \\\"report.yaml\\\"))\" #>  #> $yaml$FM$reporting$content_init$pptx #> [1] \"rpt  = onbrand::read_template(\\n  template = file.path(\\\"config\\\", \\\"report.pptx\\\"),\\n  mapping  = file.path(\\\"config\\\", \\\"report.yaml\\\"))\" #>  #>  #> $yaml$FM$reporting$phs #> $yaml$FM$reporting$phs[[1]] #> $yaml$FM$reporting$phs[[1]]$name #> [1] \"HEADERLEFT\" #>  #> $yaml$FM$reporting$phs[[1]]$location #> [1] \"header\" #>  #> $yaml$FM$reporting$phs[[1]]$value #> [1] \"\" #>  #> $yaml$FM$reporting$phs[[1]]$tooltip #> [1] \"left header text\" #>  #>  #> $yaml$FM$reporting$phs[[2]] #> $yaml$FM$reporting$phs[[2]]$name #> [1] \"HEADERRIGHT\" #>  #> $yaml$FM$reporting$phs[[2]]$location #> [1] \"header\" #>  #> $yaml$FM$reporting$phs[[2]]$value #> [1] \"\" #>  #> $yaml$FM$reporting$phs[[2]]$tooltip #> [1] \"right header text\" #>  #>  #> $yaml$FM$reporting$phs[[3]] #> $yaml$FM$reporting$phs[[3]]$name #> [1] \"FOOTERLEFT\" #>  #> $yaml$FM$reporting$phs[[3]]$location #> [1] \"footer\" #>  #> $yaml$FM$reporting$phs[[3]]$value #> [1] \"\" #>  #> $yaml$FM$reporting$phs[[3]]$tooltip #> [1] \"left footer text\" #>  #>  #>  #> $yaml$FM$reporting$phs_formatting #> $yaml$FM$reporting$phs_formatting$width #> [1] \"100%\" #>  #> $yaml$FM$reporting$phs_formatting$tt_position #> [1] \"left\" #>  #> $yaml$FM$reporting$phs_formatting$tt_size #> [1] \"medium\" #>  #>  #>  #> $yaml$FM$ui #> $yaml$FM$ui$button_style #> [1] \"fill\" #>  #> $yaml$FM$ui$select_size #> [1] 10 #>  #> $yaml$FM$ui$color_green #> [1] \"#00BB8A\" #>  #> $yaml$FM$ui$color_red #> [1] \"#FF475E\" #>  #> $yaml$FM$ui$color_blue #> [1] \"#0088FF\" #>  #> $yaml$FM$ui$color_purple #> [1] \"#bd2cf4\" #>  #>  #> $yaml$FM$data_meta #> $yaml$FM$data_meta$data_header #> [1] \"<span style='color:===COLOR==='><b>===NAME===<\/b><br/><font size='-3'>===LABEL===<\/font><\/span>\" #>  #> $yaml$FM$data_meta$subtext #> [1] \"===LABEL===: ===RANGE===\" #>  #> $yaml$FM$data_meta$many_sep #> [1] \",...,\" #>  #> $yaml$FM$data_meta$data_types #> $yaml$FM$data_meta$data_types$character #> $yaml$FM$data_meta$data_types$character$color #> [1] \"#DD4B39\" #>  #> $yaml$FM$data_meta$data_types$character$label #> [1] \"text\" #>  #>  #> $yaml$FM$data_meta$data_types$double #> $yaml$FM$data_meta$data_types$double$color #> [1] \"#3C8DBC\" #>  #> $yaml$FM$data_meta$data_types$double$label #> [1] \"num\" #>  #>  #> $yaml$FM$data_meta$data_types$integer #> $yaml$FM$data_meta$data_types$integer$color #> [1] \"#3C8DBC\" #>  #> $yaml$FM$data_meta$data_types$integer$label #> [1] \"num\" #>  #>  #> $yaml$FM$data_meta$data_types$other #> $yaml$FM$data_meta$data_types$other$color #> [1] \"black\" #>  #> $yaml$FM$data_meta$data_types$other$label #> [1] \"other\" #>  #>  #>  #>  #> $yaml$FM$workflows #> $yaml$FM$workflows$example #> $yaml$FM$workflows$example$group #> [1] \"Examples\" #>  #> $yaml$FM$workflows$example$desc #> [1] \"Example Workflow\" #>  #> $yaml$FM$workflows$example$require_ds #> [1] TRUE #>  #> $yaml$FM$workflows$example$preload #> [1] \"file.path('.', 'example.yaml')\" #>  #>  #>  #> $yaml$FM$labels #> $yaml$FM$labels$ui_label #> [1] \"put labels here\" #>  #>  #> $yaml$FM$user_files #> $yaml$FM$user_files$use_tmpdir #> [1] TRUE #>  #>  #> $yaml$FM$logging #> $yaml$FM$logging$enabled #> [1] TRUE #>  #> $yaml$FM$logging$timestamp #> [1] TRUE #>  #> $yaml$FM$logging$timestamp_fmt #> [1] \"%Y-%m-%d %H:%M:%S\" #>  #> $yaml$FM$logging$log_file #> [1] \"formods_log.txt\" #>  #> $yaml$FM$logging$console #> [1] TRUE #>  #>  #>  #>  #> $MC #> $MC$module #> $MC$module$type #> [1] \"CTS\" #>  #> $MC$module$depends #> $MC$module$depends$id_ASM #> [1] \"ASM\" #>  #> $MC$module$depends$id_MB #> [1] \"MB\" #>  #>  #>  #> $MC$element_object_name #> [1] \"CTS_obj\" #>  #> $MC$code #> $MC$code$packages #> [1] \"rxode2\"     \"nonmem2rx\"  \"nlmixr2lib\" #>  #> $MC$code$readOnly #> [1] TRUE #>  #> $MC$code$mode #> [1] \"r\" #>  #>  #> $MC$compact #> $MC$compact$code #> [1] TRUE #>  #> $MC$compact$clip #> [1] TRUE #>  #>  #> $MC$reporting #> $MC$reporting$enabled #> [1] TRUE #>  #> $MC$reporting$priority #> [1] 2 #>  #> $MC$reporting$figures #> $MC$reporting$figures$tc #> $MC$reporting$figures$tc$caption_single #> [1] \"===CHTDESC=== (Time-course)\" #>  #> $MC$reporting$figures$tc$caption_multiple #> [1] \"===CHTDESC=== (Time-course, panel ===FIGNUM=== of ===FIGTOT===)\" #>  #> $MC$reporting$figures$tc$title_single #> [1] \"===CHTDESC=== (Time-course)\" #>  #> $MC$reporting$figures$tc$title_multiple #> [1] \"===CHTDESC=== (Time-course)\" #>  #> $MC$reporting$figures$tc$sub_title_single #> [1] \"\" #>  #> $MC$reporting$figures$tc$sub_title_multiple #> [1] \"===FIGNUM=== of ===FIGTOT===\" #>  #>  #> $MC$reporting$figures$ev #> $MC$reporting$figures$ev$caption_single #> [1] \"===CHTDESC=== (Event Table)\" #>  #> $MC$reporting$figures$ev$caption_multiple #> [1] \"===CHTDESC=== (Event Table, ===FIGNUM=== of ===FIGTOT===)\" #>  #> $MC$reporting$figures$ev$title_single #> [1] \"===CHTDESC=== (Event Table)\" #>  #> $MC$reporting$figures$ev$title_multiple #> [1] \"===CHTDESC=== (Event Table)\" #>  #> $MC$reporting$figures$ev$sub_title_single #> [1] \"\" #>  #> $MC$reporting$figures$ev$sub_title_multiple #> [1] \"===FIGNUM=== of ===FIGTOT===\" #>  #>  #>  #>  #> $MC$formatting #> $MC$formatting$code #> $MC$formatting$code$width #> [1] 800 #>  #> $MC$formatting$code$height #> [1] 300 #>  #>  #> $MC$formatting$current_element #> $MC$formatting$current_element$width #> [1] \"200px\" #>  #>  #> $MC$formatting$source_model #> $MC$formatting$source_model$width #> [1] \"200px\" #>  #>  #> $MC$formatting$element_name #> $MC$formatting$element_name$width #> [1] \"200px\" #>  #>  #> $MC$formatting$preview #> $MC$formatting$preview$width #> [1] \"800px\" #>  #> $MC$formatting$preview$height #> [1] \"500px\" #>  #>  #> $MC$formatting$input #> NULL #>  #> $MC$formatting$button_clk_run #> $MC$formatting$button_clk_run$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_run$block #> [1] TRUE #>  #>  #> $MC$formatting$button_clk_del #> $MC$formatting$button_clk_del$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_del$block #> [1] TRUE #>  #> $MC$formatting$button_clk_del$tooltip #> [1] \"Delete the current cohort.\" #>  #> $MC$formatting$button_clk_del$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_save #> $MC$formatting$button_clk_save$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_save$block #> [1] TRUE #>  #> $MC$formatting$button_clk_save$tooltip #> [1] \"Save the name for the current cohort.\" #>  #> $MC$formatting$button_clk_save$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_runsim #> $MC$formatting$button_clk_runsim$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_runsim$block #> [1] TRUE #>  #> $MC$formatting$button_clk_runsim$tooltip #> [1] \"Simulate or resimulate the cohort with the current rules applied.\" #>  #> $MC$formatting$button_clk_runsim$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_update_plot #> $MC$formatting$button_clk_update_plot$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_update_plot$block #> [1] TRUE #>  #> $MC$formatting$button_clk_update_plot$tooltip #> [1] \"Update timecourse figures.\" #>  #> $MC$formatting$button_clk_update_plot$tooltip_position #> [1] \"top\" #>  #>  #> $MC$formatting$button_clk_clip #> $MC$formatting$button_clk_clip$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_clip$block #> [1] TRUE #>  #> $MC$formatting$button_clk_clip$tooltip #> [1] \"Copy the code to generate the current cohort to the clipboard.\" #>  #> $MC$formatting$button_clk_clip$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_copy #> $MC$formatting$button_clk_copy$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_copy$block #> [1] TRUE #>  #> $MC$formatting$button_clk_copy$tooltip #> [1] \"Make a copy of the current cohort.\" #>  #> $MC$formatting$button_clk_copy$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_new #> $MC$formatting$button_clk_new$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_new$block #> [1] TRUE #>  #> $MC$formatting$button_clk_new$tooltip #> [1] \"Create a new cohort.\" #>  #> $MC$formatting$button_clk_new$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_add_rule #> $MC$formatting$button_clk_add_rule$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_add_rule$block #> [1] TRUE #>  #> $MC$formatting$button_clk_add_rule$tooltip #> [1] \"Add a new rule.\" #>  #> $MC$formatting$button_clk_add_rule$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_add_cov #> $MC$formatting$button_clk_add_cov$width #> [1] \"456px\" #>  #> $MC$formatting$button_clk_add_cov$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_add_cov$block #> [1] TRUE #>  #> $MC$formatting$button_clk_add_cov$tooltip #> [1] \"Define covariate.\" #>  #> $MC$formatting$button_clk_add_cov$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$rule_condition #> $MC$formatting$rule_condition$width #> [1] 300 #>  #> $MC$formatting$rule_condition$height #> [1] 100 #>  #> $MC$formatting$rule_condition$tooltip #> [1] \"This is a condition that should evaluate to either TRUE (if the action should be taken) or FALSE (if it should be skipped).\" #>  #> $MC$formatting$rule_condition$tooltip_position #> [1] \"bottom\" #>  #> $MC$formatting$rule_condition$placeholder #> [1] \"examples: TRUE will run the action at at every visit or (time > 0) & (Ac < 10) will be more selective.\" #>  #>  #> $MC$formatting$action_dosing_state #> $MC$formatting$action_dosing_state$width #> [1] 400 #>  #> $MC$formatting$action_dosing_state$choices #> $MC$formatting$action_dosing_state$choices$dosing #> [1] \"Dosing Compartments\" #>  #> $MC$formatting$action_dosing_state$choices$other #> [1] \"Other Compartments\" #>  #>  #>  #> $MC$formatting$action_dosing_values #> $MC$formatting$action_dosing_values$width #> [1] 400 #>  #> $MC$formatting$action_dosing_values$placeholder #> [1] \"c(1, 1, 1)\" #>  #> $MC$formatting$action_dosing_values$tooltip #> [1] \"Expression defining dosing amounts that will evaluate as a numeric vector of numbers.\" #>  #>  #> $MC$formatting$action_dosing_times #> $MC$formatting$action_dosing_times$width #> [1] 400 #>  #> $MC$formatting$action_dosing_times$placeholder #> [1] \"c(0, 7, 14)\" #>  #> $MC$formatting$action_dosing_times$tooltip #> [1] \"Expression defining dosing times that will evaluate as a numeric vector of numbers.\" #>  #> $MC$formatting$action_dosing_times$tooltip_position #> [1] \"bottom\" #>  #>  #> $MC$formatting$action_dosing_durations #> $MC$formatting$action_dosing_durations$width #> [1] 400 #>  #> $MC$formatting$action_dosing_durations$placeholder #> [1] \"c(0, 0, 0)\" #>  #> $MC$formatting$action_dosing_durations$tooltip #> [1] \"Expression containing dosing duration that will evaluate as a numeric vector of numbers (zeros for bolus dosing).\" #>  #> $MC$formatting$action_dosing_durations$tooltip_position #> [1] \"bottom\" #>  #>  #> $MC$formatting$action_set_state_state #> $MC$formatting$action_set_state_state$width #> [1] 400 #>  #>  #> $MC$formatting$action_set_state_value #> $MC$formatting$action_set_state_value$width #> [1] 400 #>  #> $MC$formatting$action_set_state_value$placeholder #> [1] \"A value like 20 or an expression in terms of a system element such as Ac/2\" #>  #> $MC$formatting$action_set_state_value$tooltip #> [1] \"An expression that evaluates to a new number.\" #>  #>  #> $MC$formatting$action_manual_code #> $MC$formatting$action_manual_code$width #> [1] 400 #>  #> $MC$formatting$action_manual_code$height #> [1] 200 #>  #> $MC$formatting$action_manual_code$placeholder #> [1] \"SI_interval_ev = etRbind(SI_interval_ev,\\n  et(cmt  = 'Ac',\\n     id   = id,\\n     amt  = 10,\\n     evid = 4,\\n     time = time))\" #>  #> $MC$formatting$action_manual_code$tooltip #> [1] \"Expression with code to manually update the event table.\" #>  #>  #> $MC$formatting$rule_type #> $MC$formatting$rule_type$width #> [1] 300 #>  #> $MC$formatting$rule_type$options #> $MC$formatting$rule_type$options$dose #> $MC$formatting$rule_type$options$dose$choice #> [1] \"Dosing\" #>  #> $MC$formatting$rule_type$options$dose$subtext #> [1] \"Add bolus or infusion dosing\" #>  #> $MC$formatting$rule_type$options$dose$value #> [1] \"dose\" #>  #>  #> $MC$formatting$rule_type$options$state_reset #> $MC$formatting$rule_type$options$state_reset$choice #> [1] \"Set State\" #>  #> $MC$formatting$rule_type$options$state_reset$subtext #> [1] \"Reset the named state or compartment to a specified value\" #>  #> $MC$formatting$rule_type$options$state_reset$value #> [1] \"set state\" #>  #>  #> $MC$formatting$rule_type$options$manual #> $MC$formatting$rule_type$options$manual$choice #> [1] \"Manual\" #>  #> $MC$formatting$rule_type$options$manual$subtext #> [1] \"Alter the event table directly.\" #>  #> $MC$formatting$rule_type$options$manual$value #> [1] \"manual\" #>  #>  #>  #>  #> $MC$formatting$config_text #> $MC$formatting$config_text$width #> [1] 150 #>  #>  #> $MC$formatting$config_select #> $MC$formatting$config_select$width #> [1] 150 #>  #>  #> $MC$formatting$config_textarea #> $MC$formatting$config_textarea$width #> [1] 456 #>  #> $MC$formatting$config_textarea$height #> [1] 150 #>  #>  #> $MC$formatting$hot_current_rules #> $MC$formatting$hot_current_rules$width #> [1] 800 #>  #> $MC$formatting$hot_current_rules$height #> [1] 400 #>  #> $MC$formatting$hot_current_rules$no_rules #> [1] \"No Rules Defined\" #>  #>  #> $MC$formatting$hot_current_covariates #> $MC$formatting$hot_current_covariates$width #> [1] 800 #>  #> $MC$formatting$hot_current_covariates$height #> [1] 400 #>  #> $MC$formatting$hot_current_covariates$no_covariates #> [1] \"Covariate not yet defined\" #>  #>  #> $MC$formatting$nsub #> $MC$formatting$nsub$value #> [1] 10 #>  #> $MC$formatting$nsub$width #> [1] 50 #>  #> $MC$formatting$nsub$placeholder #> [1] 10 #>  #> $MC$formatting$nsub$tooltip #> [1] \"Number of sujbects in the current cohort. Set to 1 to simulate only the typical value.\" #>  #> $MC$formatting$nsub$tooltip_position #> [1] \"bottom\" #>  #>  #> $MC$formatting$visit_times #> $MC$formatting$visit_times$value #> [1] 0 #>  #> $MC$formatting$visit_times$width #> [1] 150 #>  #> $MC$formatting$visit_times$placeholder #> [1] \"c(0, 7, 14, 21)\" #>  #> $MC$formatting$visit_times$tooltip #> [1] \"Study visit times.\" #>  #> $MC$formatting$visit_times$tooltip_position #> [1] \"bottom\" #>  #>  #> $MC$formatting$trial_end #> $MC$formatting$trial_end$value #> [1] 100 #>  #> $MC$formatting$trial_end$width #> [1] 150 #>  #> $MC$formatting$trial_end$placeholder #> [1] \"100\" #>  #> $MC$formatting$trial_end$tooltip #> [1] \"Final simulation time point in simulation units.\" #>  #> $MC$formatting$trial_end$tooltip_position #> [1] \"bottom\" #>  #>  #> $MC$formatting$covariates #> $MC$formatting$covariates$none_found #> [1] \"There were no coviaraites found in this model\" #>  #>  #> $MC$formatting$selected_covariate #> $MC$formatting$selected_covariate$width #> [1] 200 #>  #> $MC$formatting$selected_covariate$tooltip #> [1] \"Pick covariate to define.\" #>  #> $MC$formatting$selected_covariate$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$rule_name #> $MC$formatting$rule_name$width #> [1] 300 #>  #> $MC$formatting$rule_name$placeholder #> [1] \"first_dose\" #>  #> $MC$formatting$rule_name$tooltip #> [1] \"This is a unique identifier for the current rule. It should start with a letter and can contain letters, numbers and underscores.\" #>  #> $MC$formatting$rule_name$tooltip_position #> [1] \"bottom\" #>  #>  #> $MC$formatting$time_scale #> $MC$formatting$time_scale$width #> [1] 75 #>  #> $MC$formatting$time_scale$tooltip #> [1] \"Select the timescale to plot.\" #>  #> $MC$formatting$time_scale$tooltip_position #> [1] \"top\" #>  #>  #> $MC$formatting$tc_dim #> $MC$formatting$tc_dim$width #> [1] 75 #>  #> $MC$formatting$tc_dim$default #> [1] \"d2x4\" #>  #> $MC$formatting$tc_dim$tooltip #> [1] \"rows x cols for figures\" #>  #> $MC$formatting$tc_dim$tooltip_position #> [1] \"top\" #>  #> $MC$formatting$tc_dim$choices #> $MC$formatting$tc_dim$choices$d4x4 #> $MC$formatting$tc_dim$choices$d4x4$verb #> [1] \"4x4\" #>  #> $MC$formatting$tc_dim$choices$d4x4$nrow #> [1] 4 #>  #> $MC$formatting$tc_dim$choices$d4x4$ncol #> [1] 4 #>  #>  #> $MC$formatting$tc_dim$choices$d2x4 #> $MC$formatting$tc_dim$choices$d2x4$verb #> [1] \"2x4\" #>  #> $MC$formatting$tc_dim$choices$d2x4$nrow #> [1] 2 #>  #> $MC$formatting$tc_dim$choices$d2x4$ncol #> [1] 4 #>  #>  #> $MC$formatting$tc_dim$choices$d2x2 #> $MC$formatting$tc_dim$choices$d2x2$verb #> [1] \"2x2\" #>  #> $MC$formatting$tc_dim$choices$d2x2$nrow #> [1] 2 #>  #> $MC$formatting$tc_dim$choices$d2x2$ncol #> [1] 2 #>  #>  #> $MC$formatting$tc_dim$choices$d1x1 #> $MC$formatting$tc_dim$choices$d1x1$verb #> [1] \"1x1\" #>  #> $MC$formatting$tc_dim$choices$d1x1$nrow #> [1] 1 #>  #> $MC$formatting$tc_dim$choices$d1x1$ncol #> [1] 1 #>  #>  #>  #>  #> $MC$formatting$dvcols #> $MC$formatting$dvcols$width #> [1] 150 #>  #> $MC$formatting$dvcols$size #> [1] 10 #>  #> $MC$formatting$dvcols$tooltip #> [1] \"Select the different model outputs, states, etc to plot\" #>  #> $MC$formatting$dvcols$tooltip_position #> [1] \"top\" #>  #> $MC$formatting$dvcols$choices #> $MC$formatting$dvcols$choices$outputs #> $MC$formatting$dvcols$choices$outputs$verb #> [1] \"Outputs\" #>  #>  #> $MC$formatting$dvcols$choices$states #> $MC$formatting$dvcols$choices$states$verb #> [1] \"States\" #>  #>  #> $MC$formatting$dvcols$choices$parameters #> $MC$formatting$dvcols$choices$parameters$verb #> [1] \"Parameters\" #>  #>  #> $MC$formatting$dvcols$choices$secondary #> $MC$formatting$dvcols$choices$secondary$verb #> [1] \"Secondary Parameters\" #>  #>  #> $MC$formatting$dvcols$choices$covariates #> $MC$formatting$dvcols$choices$covariates$verb #> [1] \"Covariates\" #>  #>  #>  #>  #> $MC$formatting$evplot #> $MC$formatting$evplot$width #> [1] 150 #>  #> $MC$formatting$evplot$tooltip #> [1] \"Select the events to plot\" #>  #> $MC$formatting$evplot$tooltip_position #> [1] \"top\" #>  #> $MC$formatting$evplot$default #> [1] \"dose\" #>  #> $MC$formatting$evplot$choices #> $MC$formatting$evplot$choices$dose #> $MC$formatting$evplot$choices$dose$value #> [1] 1 #>  #> $MC$formatting$evplot$choices$dose$verb #> [1] \"Dose\" #>  #>  #> $MC$formatting$evplot$choices$set_state #> $MC$formatting$evplot$choices$set_state$value #> [1] 4 #>  #> $MC$formatting$evplot$choices$set_state$verb #> [1] \"State Resets\" #>  #>  #>  #>  #> $MC$formatting$fpage #> $MC$formatting$fpage$width #> [1] 50 #>  #> $MC$formatting$fpage$tooltip #> [1] \"Go to the selected output page\" #>  #> $MC$formatting$fpage$tooltip_position #> [1] \"top\" #>  #>  #>  #> $MC$labels #> $MC$labels$current_element #> [1] \"Select cohort\" #>  #> $MC$labels$element_name #> NULL #>  #> $MC$labels$save_btn #> [1] \"Save\" #>  #> $MC$labels$runsim_btn #> [1] \"Simulate Cohort\" #>  #> $MC$labels$running_sim #> [1] \"Running simulation. Be patient!\" #>  #> $MC$labels$update_plot_btn #> [1] \"Update Plots\" #>  #> $MC$labels$clip_btn #> [1] \"Code\" #>  #> $MC$labels$copy_btn #> [1] \"Copy\" #>  #> $MC$labels$del_btn #> [1] \"Delete\" #>  #> $MC$labels$add_rule_btn #> [1] \"Add Rule\" #>  #> $MC$labels$add_cov_btn #> [1] \"Add Covariate Details\" #>  #> $MC$labels$new_btn #> [1] \"New\" #>  #> $MC$labels$source_model #> [1] \"Source Model\" #>  #> $MC$labels$dvcols #> NULL #>  #> $MC$labels$evplot #> NULL #>  #> $MC$labels$time_scale #> NULL #>  #> $MC$labels$rule_type #> [1] \"Type of rule\" #>  #> $MC$labels$rule_condition #> [1] \"Condition to trigger rule\" #>  #> $MC$labels$action_dosing_state #> [1] \"Dosing into\" #>  #> $MC$labels$action_dosing_values #> [1] \"Values\" #>  #> $MC$labels$action_dosing_times #> [1] \"Times\" #>  #> $MC$labels$action_manual_code #> [1] \"Code to evaluate\" #>  #> $MC$labels$action_dosing_durations #> [1] \"Durations\" #>  #> $MC$labels$action_set_state_state #> [1] \"State/compartment to reset\" #>  #> $MC$labels$action_set_state_value #> [1] \"New value for state/compartment\" #>  #> $MC$labels$nsub #> [1] \"N Subs\" #>  #> $MC$labels$visit_times #> [1] \"Visit Times\" #>  #> $MC$labels$trial_end #> [1] \"End of Trial\" #>  #> $MC$labels$covariate_values #> [1] \"Current values\" #>  #> $MC$labels$selected_covariate #> [1] \"Covariate\" #>  #> $MC$labels$covariate_type #> [1] \"Type/Distribution\" #>  #> $MC$labels$covariate_value #> [1] \"Values\" #>  #> $MC$labels$switch_output_interactive #> [1] \"Interactive\" #>  #> $MC$labels$switch_output_report #> [1] \"Report Preview\" #>  #> $MC$labels$tab_res_tc_figure #> [1] \"Timecourse\" #>  #> $MC$labels$tab_res_events_figure #> [1] \"Events\" #>  #> $MC$labels$tab_sim_env #> [1] \"Simulation Environment\" #>  #> $MC$labels$tab_chrt_ele_covs #> [1] \"Covariates\" #>  #> $MC$labels$tab_chrt_ele_rules #> [1] \"Create Rules\" #>  #> $MC$labels$tab_chrt_ele_trial #> [1] \"Trial Options\" #>  #> $MC$labels$tab_chrt_ele_sim #> [1] \"Simulation Options\" #>  #> $MC$labels$ds_tc #> [1] \"Timecourse\" #>  #> $MC$labels$ds_ev #> [1] \"Events\" #>  #>  #> $MC$errors #> $MC$errors$no_sim_found #> [1] \"No simulation available, you need to run the simulation first.\" #>  #> $MC$errors$bad_sim #> [1] \"There was a problem with the simulation.\" #>  #> $MC$errors$bad_plot #> [1] \"There was a problem plotting the simulation results.\" #>  #> $MC$errors$cts_no_fig #> [1] \"There are no figures to display. You must run the simulation first\" #>  #> $MC$errors$no_mdl_found #> [1] \"There are no source models to use. You need to create a model to use this module.\" #>  #>  #> $MC$tooltips #> $MC$tooltips$include #> [1] TRUE #>  #> $MC$tooltips$elements #> [1] \"Show cohort rules\" #>  #> $MC$tooltips$show_code #> [1] \"Show cohort code\" #>  #> $MC$tooltips$url_manual #> [1] \"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html#example-manual-code-evaluation\" #>  #> $MC$tooltips$url_rule_env #> [1] \"https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html#rule-evaluation-environment\" #>  #>  #> $MC$rule_env_content #> [1] \"uiele = tagList(tags$b(\\\"Simulation environment\\\"),\\n                icon_link(href=state[[\\\"MC\\\"]][[\\\"tooltips\\\"]][[\\\"url_rule_env\\\"]]),\\n                tags$br(),\\n                \\\"The condition and actions (e.g., dose times, amounts,\\n                durations) that are triggered are all\\n                evaluated in an environment with different objects that\\n                you can use. For details on this see the Clinical Trial Simulation vignette \\\",\\n                icon_link(href=state[[\\\"MC\\\"]][[\\\"tooltips\\\"]][[\\\"url_rule_env\\\"]]),\\n                \\\" for more information.\\\")\\nuiele = tagList(uiele,\\n                tags$br(),\\n                tags$br(),\\n                \\\"For the current system the following are available:\\\",\\n                tags$br())\\nuiele = tagList(uiele, tags$br())\\nuiele = tagList(uiele, rx_details[[\\\"ht_info\\\"]])\" #>  #> $MC$sim_config #> $MC$sim_config$atol #> $MC$sim_config$atol$group #> [1] \"ODE Solver\" #>  #> $MC$sim_config$atol$label #> [1] \"Absolute tolerance\" #>  #> $MC$sim_config$atol$tooltip #> [1] \"Absolute tolerance used by the ODE solver to determine if a good solution has been achieved; This is also used in the solved linear model to check if prior doses do not add anything to the solution.\" #>  #> $MC$sim_config$atol$uitype #> [1] \"text\" #>  #> $MC$sim_config$atol$type #> [1] \"numeric\" #>  #> $MC$sim_config$atol$value #> [1] \"1e-8\" #>  #> $MC$sim_config$atol$options #> NULL #>  #> $MC$sim_config$atol$use #> [1] \"rxSolve\" #>  #> $MC$sim_config$atol$placeholder #> [1] \"1e-8\" #>  #>  #> $MC$sim_config$rtol #> $MC$sim_config$rtol$group #> [1] \"ODE Solver\" #>  #> $MC$sim_config$rtol$label #> [1] \"Relative tolerance\" #>  #> $MC$sim_config$rtol$tooltip #> [1] \"Relative tolerance used by the ODE solver to determine if a good solution has been achieved. This is also used in the solved linear model to check if prior doses do not add anything to the solution.\" #>  #> $MC$sim_config$rtol$uitype #> [1] \"text\" #>  #> $MC$sim_config$rtol$type #> [1] \"numeric\" #>  #> $MC$sim_config$rtol$value #> [1] \"1e-6\" #>  #> $MC$sim_config$rtol$options #> NULL #>  #> $MC$sim_config$rtol$use #> [1] \"rxSolve\" #>  #> $MC$sim_config$rtol$placeholder #> [1] \"1e-6\" #>  #>  #> $MC$sim_config$sigdig #> $MC$sim_config$sigdig$group #> [1] \"ODE Solver\" #>  #> $MC$sim_config$sigdig$label #> [1] \"Significant digits\" #>  #> $MC$sim_config$sigdig$tooltip #> [1] \"Specifies the \\\"significant digits\\\" that the ode solving requests. When specified this controls the relative and absolute tolerances of the ODE solvers. By default the tolerance is 0.5*10^(-sigdig-2) for regular ODEs. For the sensitivity equations the default is ⁠0.5*10\\\\^(-sigdig-1.5)⁠ (sensitivity changes only applicable for liblsoda). This also controls the atol/rtol of the steady state solutions. The ssAtol/ssRtol is ⁠0.5*10\\\\^(-sigdig)⁠ and for the sensitivities ⁠0.5*10\\\\^(-sigdig+0.625)⁠. By default this is unspecified (NULL) and uses the standard atol/rtol.\" #>  #> $MC$sim_config$sigdig$uitype #> [1] \"text\" #>  #> $MC$sim_config$sigdig$type #> [1] \"numeric\" #>  #> $MC$sim_config$sigdig$value #> [1] \"NULL\" #>  #> $MC$sim_config$sigdig$options #> NULL #>  #> $MC$sim_config$sigdig$use #> [1] \"rxSolve\" #>  #> $MC$sim_config$sigdig$placeholder #> [1] \"NULL\" #>  #>  #> $MC$sim_config$seed #> $MC$sim_config$seed$group #> [1] \"Misc\" #>  #> $MC$sim_config$seed$label #> [1] \"Random Seed\" #>  #> $MC$sim_config$seed$tooltip #> [1] \"Integer value to set the seed for the random number generator\" #>  #> $MC$sim_config$seed$uitype #> [1] \"text\" #>  #> $MC$sim_config$seed$type #> [1] \"numeric\" #>  #> $MC$sim_config$seed$value #> [1] \"5446\" #>  #> $MC$sim_config$seed$options #> NULL #>  #> $MC$sim_config$seed$use #> [1] \"Misc\" #>  #> $MC$sim_config$seed$placeholder #> [1] \"5446\" #>  #>  #> $MC$sim_config$nsteps #> $MC$sim_config$nsteps$group #> [1] \"Misc\" #>  #> $MC$sim_config$nsteps$label #> [1] \"Time Steps\" #>  #> $MC$sim_config$nsteps$tooltip #> [1] \"Integer value representing the number of time steps to add between zero and the end of trial. A larger value will give smoother curves but it will also take more time to simulate.\" #>  #> $MC$sim_config$nsteps$uitype #> [1] \"text\" #>  #> $MC$sim_config$nsteps$type #> [1] \"numeric\" #>  #> $MC$sim_config$nsteps$value #> [1] \"200\" #>  #> $MC$sim_config$nsteps$options #> NULL #>  #> $MC$sim_config$nsteps$use #> [1] \"Misc\" #>  #> $MC$sim_config$nsteps$placeholder #> [1] \"200\" #>  #>  #> $MC$sim_config$preamble #> $MC$sim_config$preamble$group #> [1] \"Rule Environment Preamble\" #>  #> $MC$sim_config$preamble$label #> NULL #>  #> $MC$sim_config$preamble$tooltip #> [1] \"Optional user-defined code to be executed in the rule-evaluation environment. You can create user-defined functions here.\" #>  #> $MC$sim_config$preamble$uitype #> [1] \"textarea\" #>  #> $MC$sim_config$preamble$type #> [1] \"character\" #>  #> $MC$sim_config$preamble$value #> NULL #>  #> $MC$sim_config$preamble$options #> NULL #>  #> $MC$sim_config$preamble$use #> [1] \"rules\" #>  #> $MC$sim_config$preamble$placeholder #> [1] \"my_func = function(id=NULL){\\n\\n}\" #>  #>  #>  #> $MC$covariate_generation #> $MC$covariate_generation$tooltip_position #> [1] \"right\" #>  #> $MC$covariate_generation$width #> [1] 200 #>  #> $MC$covariate_generation$types #> $MC$covariate_generation$types$discrete #> $MC$covariate_generation$types$discrete$choice #> [1] \"Select from discrete values\" #>  #> $MC$covariate_generation$types$discrete$type #> [1] \"discrete\" #>  #> $MC$covariate_generation$types$discrete$placeholder #> [1] \"0, 1, 2\" #>  #> $MC$covariate_generation$types$discrete$tooltip #> [1] \"Provide a list of possible discrete values and these will be randomly selected when genreating subjects.\" #>  #>  #> $MC$covariate_generation$types$fixed #> $MC$covariate_generation$types$fixed$choice #> [1] \"Fix at value\" #>  #> $MC$covariate_generation$types$fixed$type #> [1] \"fixed\" #>  #> $MC$covariate_generation$types$fixed$placeholder #> [1] \"1\" #>  #> $MC$covariate_generation$types$fixed$tooltip #> [1] \"Fix the covariate at a specific value.\" #>  #>  #> $MC$covariate_generation$types$cont_random #> $MC$covariate_generation$types$cont_random$choice #> [1] \"Continuous/random in range\" #>  #> $MC$covariate_generation$types$cont_random$type #> [1] \"continuous\" #>  #> $MC$covariate_generation$types$cont_random$sampling #> [1] \"random\" #>  #> $MC$covariate_generation$types$cont_random$placeholder #> [1] \"0,1\" #>  #> $MC$covariate_generation$types$cont_random$tooltip #> [1] \"Sample randomly from within the specified range.\" #>  #>  #> $MC$covariate_generation$types$cont_normal #> $MC$covariate_generation$types$cont_normal$choice #> [1] \"Sample normally\" #>  #> $MC$covariate_generation$types$cont_normal$type #> [1] \"continuous\" #>  #> $MC$covariate_generation$types$cont_normal$sampling #> [1] \"normal\" #>  #> $MC$covariate_generation$types$cont_normal$placeholder #> [1] \"mean, variance\" #>  #> $MC$covariate_generation$types$cont_normal$tooltip #> [1] \"Sample from normal distribution provided a mean and variance\" #>  #>  #> $MC$covariate_generation$types$cont_lognormal #> $MC$covariate_generation$types$cont_lognormal$choice #> [1] \"Sample log-normally\" #>  #> $MC$covariate_generation$types$cont_lognormal$type #> [1] \"continuous\" #>  #> $MC$covariate_generation$types$cont_lognormal$sampling #> [1] \"log-normal\" #>  #> $MC$covariate_generation$types$cont_lognormal$placeholder #> [1] \"mean, variance\" #>  #> $MC$covariate_generation$types$cont_lognormal$tooltip #> [1] \"Sample from log-normal distribution provided a mean and variance\" #>  #>  #>  #>  #>  #> $CTS #> $CTS$button_counters #> $CTS$button_counters$button_clk_runsim #> [1] 0 #>  #> $CTS$button_counters$button_clk_update_plot #> [1] 0 #>  #> $CTS$button_counters$button_clk_save #> [1] 0 #>  #> $CTS$button_counters$button_clk_clip #> [1] 0 #>  #> $CTS$button_counters$button_clk_del #> [1] 0 #>  #> $CTS$button_counters$button_clk_copy #> [1] 0 #>  #> $CTS$button_counters$button_clk_new #> [1] 0 #>  #> $CTS$button_counters$button_clk_add_cov #> [1] 0 #>  #> $CTS$button_counters$button_clk_add_rule #> [1] 0 #>  #>  #> $CTS$ui_hold #> $CTS$ui_hold$button_clk_runsim #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_update_plot #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_save #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_clip #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_del #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_copy #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_new #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_add_cov #> [1] FALSE #>  #> $CTS$ui_hold$button_clk_add_rule #> [1] FALSE #>  #> $CTS$ui_hold$element_name #> [1] FALSE #>  #> $CTS$ui_hold$nsub #> [1] FALSE #>  #> $CTS$ui_hold$fpage #> [1] FALSE #>  #> $CTS$ui_hold$dvcols #> [1] FALSE #>  #> $CTS$ui_hold$time_scale #> [1] FALSE #>  #> $CTS$ui_hold$tc_dim #> [1] FALSE #>  #> $CTS$ui_hold$evplot #> [1] FALSE #>  #> $CTS$ui_hold$visit_times #> [1] FALSE #>  #> $CTS$ui_hold$trial_end #> [1] FALSE #>  #> $CTS$ui_hold$rule_condition #> [1] FALSE #>  #> $CTS$ui_hold$action_dosing_state #> [1] FALSE #>  #> $CTS$ui_hold$action_dosing_values #> [1] FALSE #>  #> $CTS$ui_hold$action_dosing_times #> [1] FALSE #>  #> $CTS$ui_hold$action_dosing_durations #> [1] FALSE #>  #> $CTS$ui_hold$action_set_state_state #> [1] FALSE #>  #> $CTS$ui_hold$action_set_state_value #> [1] FALSE #>  #> $CTS$ui_hold$action_manual_code #> [1] FALSE #>  #> $CTS$ui_hold$cts_config_atol #> [1] FALSE #>  #> $CTS$ui_hold$cts_config_rtol #> [1] FALSE #>  #> $CTS$ui_hold$cts_config_sigdig #> [1] FALSE #>  #> $CTS$ui_hold$cts_config_seed #> [1] FALSE #>  #> $CTS$ui_hold$cts_config_nsteps #> [1] FALSE #>  #> $CTS$ui_hold$cts_config_preamble #> [1] FALSE #>  #> $CTS$ui_hold$rule_type #> [1] FALSE #>  #> $CTS$ui_hold$rule_name #> [1] FALSE #>  #> $CTS$ui_hold$source_model #> [1] FALSE #>  #> $CTS$ui_hold$hot_current_rules #> [1] FALSE #>  #> $CTS$ui_hold$covariate_type_selected #> [1] FALSE #>  #> $CTS$ui_hold$covariate_value #> [1] FALSE #>  #> $CTS$ui_hold$selected_covariate #> [1] FALSE #>  #> $CTS$ui_hold$switch_output #> [1] FALSE #>  #> $CTS$ui_hold$element_selection #> [1] FALSE #>  #>  #> $CTS$ui_ids #>  [1] \"button_clk_runsim\"       \"button_clk_update_plot\"  #>  [3] \"button_clk_save\"         \"button_clk_clip\"         #>  [5] \"button_clk_del\"          \"button_clk_copy\"         #>  [7] \"button_clk_new\"          \"button_clk_add_cov\"      #>  [9] \"button_clk_add_rule\"     \"element_name\"            #> [11] \"nsub\"                    \"fpage\"                   #> [13] \"dvcols\"                  \"time_scale\"              #> [15] \"tc_dim\"                  \"evplot\"                  #> [17] \"visit_times\"             \"trial_end\"               #> [19] \"rule_condition\"          \"action_dosing_state\"     #> [21] \"action_dosing_values\"    \"action_dosing_times\"     #> [23] \"action_dosing_durations\" \"action_set_state_state\"  #> [25] \"action_set_state_value\"  \"action_manual_code\"      #> [27] \"cts_config_atol\"         \"cts_config_rtol\"         #> [29] \"cts_config_sigdig\"       \"cts_config_seed\"         #> [31] \"cts_config_nsteps\"       \"cts_config_preamble\"     #> [33] \"rule_type\"               \"rule_name\"               #> [35] \"source_model\"            \"hot_current_rules\"       #> [37] \"covariate_type_selected\" \"covariate_value\"         #> [39] \"selected_covariate\"      \"switch_output\"           #> [41] \"element_selection\"       #>  #> $CTS$isgood #> [1] TRUE #>  #> $CTS$rule_ui_map #> $CTS$rule_ui_map$dose #> $CTS$rule_ui_map$dose$name #> [1] \"rule_name\" #>  #> $CTS$rule_ui_map$dose$type #> [1] \"rule_type\" #>  #> $CTS$rule_ui_map$dose$condition #> [1] \"rule_condition\" #>  #> $CTS$rule_ui_map$dose$state #> [1] \"action_dosing_state\" #>  #> $CTS$rule_ui_map$dose$values #> [1] \"action_dosing_values\" #>  #> $CTS$rule_ui_map$dose$times #> [1] \"action_dosing_times\" #>  #> $CTS$rule_ui_map$dose$durations #> [1] \"action_dosing_durations\" #>  #>  #> $CTS$rule_ui_map$`set state` #> $CTS$rule_ui_map$`set state`$name #> [1] \"rule_name\" #>  #> $CTS$rule_ui_map$`set state`$type #> [1] \"rule_type\" #>  #> $CTS$rule_ui_map$`set state`$condition #> [1] \"rule_condition\" #>  #> $CTS$rule_ui_map$`set state`$state #> [1] \"action_set_state\" #>  #> $CTS$rule_ui_map$`set state`$value #> [1] \"action_state_values\" #>  #>  #> $CTS$rule_ui_map$manual #> $CTS$rule_ui_map$manual$name #> [1] \"rule_name\" #>  #> $CTS$rule_ui_map$manual$type #> [1] \"rule_type\" #>  #> $CTS$rule_ui_map$manual$condition #> [1] \"rule_condition\" #>  #> $CTS$rule_ui_map$manual$code #> [1] \"action_manual_code\" #>  #>  #>  #> $CTS$MDL #> $CTS$MDL$isgood #> [1] TRUE #>  #> $CTS$MDL$hasmdl #> [1] TRUE #>  #> $CTS$MDL$catalog #>                   label      object MOD_TYPE id idx #> 1 One compartment model MB_obj_1_rx       MB MB   1 #> 2          PK Biomarker MB_obj_2_rx       MB MB   2 #>                           checksum                      MDLchecksum #> 1 4082724f300ab03b25697cd0bc569f17 c1bd63cc707d0da186228563dbc83e60 #> 2 4082724f300ab03b25697cd0bc569f17 6c9105e0e03257eea849e484181f65bcodeobj_1_fcn = function () \\n{\\n    description <- \"One compartment PK model with linear clearance using differential equations\"\\n    ini({\\n        lka <- 0.45\\n        label(\"Absorption rate (Ka)\")\\n        lcl <- 1\\n        label(\"Clearance (CL)\")\\n        lvc <- 3.45\\n        label(\"Central volume of distribution (V)\")\\n        propSd <- c(0, 0.5)\\n        label(\"Proportional residual error (fraction)\")\\n        etalcl ~ 0.1\\n        etalvc ~ 0.01\\n    })\\n    model({\\n        ka <- exp(lka)\\n        cl <- exp(lcl + etalcl)\\n        vc <- exp(lvc + etalvc)\\n        kel <- cl/vc\\n        d/dt(depot) <- -ka * depot\\n        d/dt(central) <- ka * depot - kel * central\\n        Cc <- central/vc\\n        Cc ~ prop(propSd)\\n    })\\n}\\n\\nMB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn)\\n\\nMB_obj_1_ts = list(\\n  system  = \"weeks\",\\n  details = \\n    list(months = list(verb = \"Months\", conv = 4.13359788359788e-07), \\n        weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06), \\n        days = list(verb = \"Days\", conv = 1.15740740740741e-05), \\n        hours = list(verb = \"Hours\", conv = 0.000277777777777778))\\n) #> 2 MB_obj_2_fcn = function () \\n{\\n    ini({\\n        TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf)\\n        TV_ka <- c(2.22044604925031e-16, 0.282, Inf)\\n        TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384)\\n        TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384)\\n        TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384)\\n        TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384)\\n        TV_MW <- fix(2.22044604925031e-16, 140, Inf)\\n        TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf)\\n        TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf)\\n        TV_Emax <- c(2.22044604925031e-16, 100, Inf)\\n        TV_EC50 <- fix(2.22044604925031e-16, 300, Inf)\\n        prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf)\\n        add_err_PK <- c(2.22044604925031e-16, 0.1, Inf)\\n        add_err_BM <- c(2.22044604925031e-16, 0.1, Inf)\\n        ETAka ~ 0.416\\n        ETACL ~ 0.09875\\n        ETAVc ~ c(0.0786, 0.116)\\n        ETAVp ~ c(0.0619, 0.0377, 0.0789)\\n        ETAQ ~ 0.699\\n        ETABM_IC ~ 0.05\\n        ETAEmax ~ 0.1\\n    })\\n    model({\\n        F1 = TV_F1\\n        ka = TV_ka * exp(ETAka)\\n        CL = exp(TV_CL) * exp(ETACL)\\n        Vc = exp(TV_Vc) * exp(ETAVc)\\n        Cc = Ac/(Vc)\\n        Vp = exp(TV_Vp) * exp(ETAVp)\\n        Q = exp(TV_Q) * exp(ETAQ)\\n        MW = TV_MW\\n        BM_IC = TV_BM_IC * exp(ETABM_IC)\\n        kdeg_BM = TV_kdeg_BM\\n        Emax = TV_Emax * exp(ETAEmax)\\n        EC50 = TV_EC50\\n        Dinf = 0\\n        WTTV = 70\\n        CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID * \\n            0.1)\\n        kel = CL_IND/Vc * ((WT/WTTV))^(-0.35)\\n        kcp = Q/Vc * ((WT/WTTV))^(-0.35)\\n        kpc = Q/Vp * ((WT/WTTV))^(-0.35)\\n        ksyn_BM = kdeg_BM * BM_IC\\n        STIM = 1 + Emax * Cc/(EC50 + Cc)\\n        BM(0) = BM_IC\\n        d/dt(At) = (-ka * At)\\n        d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc + \\n            kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc\\n        d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp)\\n        d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM)\\n        C_ng_ml = Cc * MW\\n        C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK)\\n        BM_obs = BM\\n        BM_obs ~ add(add_err_BM)\\n    })\\n}\\n\\nMB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn)\\n\\nMB_obj_2_ts = list(\\n  system  = \"weeks\",\\n  details = \\n    list(months = list(verb = \"Months\", conv = 4.13359788359788e-07), \\n        weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06), \\n        days = list(verb = \"Days\", conv = 1.15740740740741e-05), \\n        hours = list(verb = \"Hours\", conv = 0.000277777777777778))\\n) #>  #> $CTS$MDL$modules #> $CTS$MDL$modules$MB #> $CTS$MDL$modules$MB$MB #> [1] \"4082724f300ab03b25697cd0bc569f17\" #>  #>  #>  #> $CTS$MDL$mdl #> $CTS$MDL$mdl$MB_obj_1_rx #> $CTS$MDL$mdl$MB_obj_1_rx$label #> [1] \"One compartment model\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$MOD_TYPE #> [1] \"MB\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$id #> [1] \"MB\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$idx #> [1] 1 #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$months #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$months$verb #> [1] \"Months\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$months$conv #> [1] 4.133598e-07 #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$weeks #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$weeks$verb #> [1] \"Weeks\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$weeks$conv #> [1] 1.653439e-06 #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$days #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$days$verb #> [1] \"Days\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$days$conv #> [1] 1.157407e-05 #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$hours #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$hours$verb #> [1] \"Hours\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_details$hours$conv #> [1] 0.0002777778 #>  #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$rx_obj #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lcl    lvc propSd  #>   0.45   1.00   3.45   0.50  #>  #> Omega ($omega):  #>        etalcl etalvc #> etalcl    0.1   0.00 #> etalvc    0.0   0.01 #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #>  ── μ-referencing ($muRefTable): ──   #>   theta    eta level #> 1   lcl etalcl    id #> 2   lvc etalvc    id #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     description <- \"One compartment PK model with linear clearance using differential equations\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         etalcl ~ 0.1 #>         etalvc ~ 0.01 #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl + etalcl) #>         vc <- exp(lvc + etalvc) #>         kel <- cl/vc #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> } #>  #> $CTS$MDL$mdl$MB_obj_1_rx$rx_obj_name #> [1] \"MB_obj_1_rx\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$system #> [1] \"weeks\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$months #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$months$verb #> [1] \"Months\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$months$conv #> [1] 4.133598e-07 #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$weeks #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$weeks$verb #> [1] \"Weeks\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$weeks$conv #> [1] 1.653439e-06 #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$days #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$days$verb #> [1] \"Days\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$days$conv #> [1] 1.157407e-05 #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$hours #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$hours$verb #> [1] \"Hours\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj$details$hours$conv #> [1] 0.0002777778 #>  #>  #>  #>  #> $CTS$MDL$mdl$MB_obj_1_rx$ts_obj_name #> [1] \"MB_obj_1_ts\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$fcn_def #> [1] \"function () \\n{\\n    description <- \\\"One compartment PK model with linear clearance using differential equations\\\"\\n    ini({\\n        lka <- 0.45\\n        label(\\\"Absorption rate (Ka)\\\")\\n        lcl <- 1\\n        label(\\\"Clearance (CL)\\\")\\n        lvc <- 3.45\\n        label(\\\"Central volume of distribution (V)\\\")\\n        propSd <- c(0, 0.5)\\n        label(\\\"Proportional residual error (fraction)\\\")\\n        etalcl ~ 0.1\\n        etalvc ~ 0.01\\n    })\\n    model({\\n        ka <- exp(lka)\\n        cl <- exp(lcl + etalcl)\\n        vc <- exp(lvc + etalvc)\\n        kel <- cl/vc\\n        d/dt(depot) <- -ka * depot\\n        d/dt(central) <- ka * depot - kel * central\\n        Cc <- central/vc\\n        Cc ~ prop(propSd)\\n    })\\n}\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$MDLMETA #> [1] \"adding IIV to lvc\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$code #> [1] \"MB_obj_1_fcn = function () \\n{\\n    description <- \\\"One compartment PK model with linear clearance using differential equations\\\"\\n    ini({\\n        lka <- 0.45\\n        label(\\\"Absorption rate (Ka)\\\")\\n        lcl <- 1\\n        label(\\\"Clearance (CL)\\\")\\n        lvc <- 3.45\\n        label(\\\"Central volume of distribution (V)\\\")\\n        propSd <- c(0, 0.5)\\n        label(\\\"Proportional residual error (fraction)\\\")\\n        etalcl ~ 0.1\\n        etalvc ~ 0.01\\n    })\\n    model({\\n        ka <- exp(lka)\\n        cl <- exp(lcl + etalcl)\\n        vc <- exp(lvc + etalvc)\\n        kel <- cl/vc\\n        d/dt(depot) <- -ka * depot\\n        d/dt(central) <- ka * depot - kel * central\\n        Cc <- central/vc\\n        Cc ~ prop(propSd)\\n    })\\n}\\n\\nMB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn)\\n\\nMB_obj_1_ts = list(\\n  system  = \\\"weeks\\\",\\n  details = \\n    list(months = list(verb = \\\"Months\\\", conv = 4.13359788359788e-07), \\n        weeks = list(verb = \\\"Weeks\\\", conv = 1.65343915343915e-06), \\n        days = list(verb = \\\"Days\\\", conv = 1.15740740740741e-05), \\n        hours = list(verb = \\\"Hours\\\", conv = 0.000277777777777778))\\n)\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$checksum #> [1] \"4082724f300ab03b25697cd0bc569f17\" #>  #> $CTS$MDL$mdl$MB_obj_1_rx$MDLchecksum #> [1] \"c1bd63cc707d0da186228563dbc83e60\" #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx #> $CTS$MDL$mdl$MB_obj_2_rx$label #> [1] \"PK Biomarker\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$MOD_TYPE #> [1] \"MB\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$id #> [1] \"MB\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$idx #> [1] 2 #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$months #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$months$verb #> [1] \"Months\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$months$conv #> [1] 4.133598e-07 #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$weeks #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$weeks$verb #> [1] \"Weeks\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$weeks$conv #> [1] 1.653439e-06 #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$days #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$days$verb #> [1] \"Days\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$days$conv #> [1] 1.157407e-05 #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$hours #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$hours$verb #> [1] \"Hours\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_details$hours$conv #> [1] 0.0002777778 #>  #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$rx_obj #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>        TV_F1        TV_ka        TV_CL        TV_Vc        TV_Vp         TV_Q  #>    0.7440000    0.2820000   -1.6094379    1.2837078    1.0116009   -0.2916901  #>        TV_MW     TV_BM_IC   TV_kdeg_BM      TV_Emax      TV_EC50  prop_err_PK  #>  140.0000000 1000.0000000    0.1000000  100.0000000  300.0000000    0.1000000  #>   add_err_PK   add_err_BM  #>    0.1000000    0.1000000  #>  #> Omega ($omega):  #>          ETAka   ETACL  ETAVc  ETAVp  ETAQ ETABM_IC ETAEmax #> ETAka    0.416 0.00000 0.0000 0.0000 0.000     0.00     0.0 #> ETACL    0.000 0.09875 0.0786 0.0619 0.000     0.00     0.0 #> ETAVc    0.000 0.07860 0.1160 0.0377 0.000     0.00     0.0 #> ETAVp    0.000 0.06190 0.0377 0.0789 0.000     0.00     0.0 #> ETAQ     0.000 0.00000 0.0000 0.0000 0.699     0.00     0.0 #> ETABM_IC 0.000 0.00000 0.0000 0.0000 0.000     0.05     0.0 #> ETAEmax  0.000 0.00000 0.0000 0.0000 0.000     0.00     0.1 #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1               At #> 2                  2               Ac #> 3                  3               Cp #> 4                  4               BM #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>      variable                    cmt                    dvid* #> 1 C_ng_ml ~ … cmt='C_ng_ml' or cmt=5 dvid='C_ng_ml' or dvid=1 #> 2  BM_obs ~ …  cmt='BM_obs' or cmt=6  dvid='BM_obs' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> $CTS$MDL$mdl$MB_obj_2_rx$rx_obj_name #> [1] \"MB_obj_2_rx\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$system #> [1] \"weeks\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$months #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$months$verb #> [1] \"Months\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$months$conv #> [1] 4.133598e-07 #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$weeks #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$weeks$verb #> [1] \"Weeks\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$weeks$conv #> [1] 1.653439e-06 #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$days #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$days$verb #> [1] \"Days\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$days$conv #> [1] 1.157407e-05 #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$hours #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$hours$verb #> [1] \"Hours\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj$details$hours$conv #> [1] 0.0002777778 #>  #>  #>  #>  #> $CTS$MDL$mdl$MB_obj_2_rx$ts_obj_name #> [1] \"MB_obj_2_ts\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$fcn_def #> [1] \"function () \\n{\\n    ini({\\n        TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf)\\n        TV_ka <- c(2.22044604925031e-16, 0.282, Inf)\\n        TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384)\\n        TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384)\\n        TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384)\\n        TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384)\\n        TV_MW <- fix(2.22044604925031e-16, 140, Inf)\\n        TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf)\\n        TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf)\\n        TV_Emax <- c(2.22044604925031e-16, 100, Inf)\\n        TV_EC50 <- fix(2.22044604925031e-16, 300, Inf)\\n        prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf)\\n        add_err_PK <- c(2.22044604925031e-16, 0.1, Inf)\\n        add_err_BM <- c(2.22044604925031e-16, 0.1, Inf)\\n        ETAka ~ 0.416\\n        ETACL ~ 0.09875\\n        ETAVc ~ c(0.0786, 0.116)\\n        ETAVp ~ c(0.0619, 0.0377, 0.0789)\\n        ETAQ ~ 0.699\\n        ETABM_IC ~ 0.05\\n        ETAEmax ~ 0.1\\n    })\\n    model({\\n        F1 = TV_F1\\n        ka = TV_ka * exp(ETAka)\\n        CL = exp(TV_CL) * exp(ETACL)\\n        Vc = exp(TV_Vc) * exp(ETAVc)\\n        Cc = Ac/(Vc)\\n        Vp = exp(TV_Vp) * exp(ETAVp)\\n        Q = exp(TV_Q) * exp(ETAQ)\\n        MW = TV_MW\\n        BM_IC = TV_BM_IC * exp(ETABM_IC)\\n        kdeg_BM = TV_kdeg_BM\\n        Emax = TV_Emax * exp(ETAEmax)\\n        EC50 = TV_EC50\\n        Dinf = 0\\n        WTTV = 70\\n        CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID * \\n            0.1)\\n        kel = CL_IND/Vc * ((WT/WTTV))^(-0.35)\\n        kcp = Q/Vc * ((WT/WTTV))^(-0.35)\\n        kpc = Q/Vp * ((WT/WTTV))^(-0.35)\\n        ksyn_BM = kdeg_BM * BM_IC\\n        STIM = 1 + Emax * Cc/(EC50 + Cc)\\n        BM(0) = BM_IC\\n        d/dt(At) = (-ka * At)\\n        d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc + \\n            kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc\\n        d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp)\\n        d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM)\\n        C_ng_ml = Cc * MW\\n        C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK)\\n        BM_obs = BM\\n        BM_obs ~ add(add_err_BM)\\n    })\\n}\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$MDLMETA #> [1] \"base model\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$code #> [1] \"MB_obj_2_fcn = function () \\n{\\n    ini({\\n        TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf)\\n        TV_ka <- c(2.22044604925031e-16, 0.282, Inf)\\n        TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384)\\n        TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384)\\n        TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384)\\n        TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384)\\n        TV_MW <- fix(2.22044604925031e-16, 140, Inf)\\n        TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf)\\n        TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf)\\n        TV_Emax <- c(2.22044604925031e-16, 100, Inf)\\n        TV_EC50 <- fix(2.22044604925031e-16, 300, Inf)\\n        prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf)\\n        add_err_PK <- c(2.22044604925031e-16, 0.1, Inf)\\n        add_err_BM <- c(2.22044604925031e-16, 0.1, Inf)\\n        ETAka ~ 0.416\\n        ETACL ~ 0.09875\\n        ETAVc ~ c(0.0786, 0.116)\\n        ETAVp ~ c(0.0619, 0.0377, 0.0789)\\n        ETAQ ~ 0.699\\n        ETABM_IC ~ 0.05\\n        ETAEmax ~ 0.1\\n    })\\n    model({\\n        F1 = TV_F1\\n        ka = TV_ka * exp(ETAka)\\n        CL = exp(TV_CL) * exp(ETACL)\\n        Vc = exp(TV_Vc) * exp(ETAVc)\\n        Cc = Ac/(Vc)\\n        Vp = exp(TV_Vp) * exp(ETAVp)\\n        Q = exp(TV_Q) * exp(ETAQ)\\n        MW = TV_MW\\n        BM_IC = TV_BM_IC * exp(ETABM_IC)\\n        kdeg_BM = TV_kdeg_BM\\n        Emax = TV_Emax * exp(ETAEmax)\\n        EC50 = TV_EC50\\n        Dinf = 0\\n        WTTV = 70\\n        CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID * \\n            0.1)\\n        kel = CL_IND/Vc * ((WT/WTTV))^(-0.35)\\n        kcp = Q/Vc * ((WT/WTTV))^(-0.35)\\n        kpc = Q/Vp * ((WT/WTTV))^(-0.35)\\n        ksyn_BM = kdeg_BM * BM_IC\\n        STIM = 1 + Emax * Cc/(EC50 + Cc)\\n        BM(0) = BM_IC\\n        d/dt(At) = (-ka * At)\\n        d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc + \\n            kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc\\n        d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp)\\n        d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM)\\n        C_ng_ml = Cc * MW\\n        C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK)\\n        BM_obs = BM\\n        BM_obs ~ add(add_err_BM)\\n    })\\n}\\n\\nMB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn)\\n\\nMB_obj_2_ts = list(\\n  system  = \\\"weeks\\\",\\n  details = \\n    list(months = list(verb = \\\"Months\\\", conv = 4.13359788359788e-07), \\n        weeks = list(verb = \\\"Weeks\\\", conv = 1.65343915343915e-06), \\n        days = list(verb = \\\"Days\\\", conv = 1.15740740740741e-05), \\n        hours = list(verb = \\\"Hours\\\", conv = 0.000277777777777778))\\n)\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$checksum #> [1] \"4082724f300ab03b25697cd0bc569f17\" #>  #> $CTS$MDL$mdl$MB_obj_2_rx$MDLchecksum #> [1] \"6c9105e0e03257eea849e484181f65b9\" #>  #>  #>  #>  #> $CTS$ui_ele #>  [1] \"element_name\"            \"nsub\"                    #>  [3] \"fpage\"                   \"dvcols\"                  #>  [5] \"time_scale\"              \"tc_dim\"                  #>  [7] \"evplot\"                  \"visit_times\"             #>  [9] \"trial_end\"               \"rule_condition\"          #> [11] \"action_dosing_state\"     \"action_dosing_values\"    #> [13] \"action_dosing_times\"     \"action_dosing_durations\" #> [15] \"action_set_state_state\"  \"action_set_state_value\"  #> [17] \"action_manual_code\"      \"cts_config_atol\"         #> [19] \"cts_config_rtol\"         \"cts_config_sigdig\"       #> [21] \"cts_config_seed\"         \"cts_config_nsteps\"       #> [23] \"cts_config_preamble\"     #>  #> $CTS$element_cntr #> [1] 1 #>  #> $CTS$sc_meta #> $CTS$sc_meta$config #> $CTS$sc_meta$config$atol #> $CTS$sc_meta$config$atol$group #> [1] \"ODE Solver\" #>  #> $CTS$sc_meta$config$atol$label #> [1] \"Absolute tolerance\" #>  #> $CTS$sc_meta$config$atol$tooltip #> [1] \"Absolute tolerance used by the ODE solver to determine if a good solution has been achieved; This is also used in the solved linear model to check if prior doses do not add anything to the solution.\" #>  #> $CTS$sc_meta$config$atol$uitype #> [1] \"text\" #>  #> $CTS$sc_meta$config$atol$type #> [1] \"numeric\" #>  #> $CTS$sc_meta$config$atol$value #> [1] \"1e-8\" #>  #> $CTS$sc_meta$config$atol$options #> NULL #>  #> $CTS$sc_meta$config$atol$use #> [1] \"rxSolve\" #>  #> $CTS$sc_meta$config$atol$placeholder #> [1] \"1e-8\" #>  #> $CTS$sc_meta$config$atol$ui #> [1] \"cts_config_atol\" #>  #>  #> $CTS$sc_meta$config$rtol #> $CTS$sc_meta$config$rtol$group #> [1] \"ODE Solver\" #>  #> $CTS$sc_meta$config$rtol$label #> [1] \"Relative tolerance\" #>  #> $CTS$sc_meta$config$rtol$tooltip #> [1] \"Relative tolerance used by the ODE solver to determine if a good solution has been achieved. This is also used in the solved linear model to check if prior doses do not add anything to the solution.\" #>  #> $CTS$sc_meta$config$rtol$uitype #> [1] \"text\" #>  #> $CTS$sc_meta$config$rtol$type #> [1] \"numeric\" #>  #> $CTS$sc_meta$config$rtol$value #> [1] \"1e-6\" #>  #> $CTS$sc_meta$config$rtol$options #> NULL #>  #> $CTS$sc_meta$config$rtol$use #> [1] \"rxSolve\" #>  #> $CTS$sc_meta$config$rtol$placeholder #> [1] \"1e-6\" #>  #> $CTS$sc_meta$config$rtol$ui #> [1] \"cts_config_rtol\" #>  #>  #> $CTS$sc_meta$config$sigdig #> $CTS$sc_meta$config$sigdig$group #> [1] \"ODE Solver\" #>  #> $CTS$sc_meta$config$sigdig$label #> [1] \"Significant digits\" #>  #> $CTS$sc_meta$config$sigdig$tooltip #> [1] \"Specifies the \\\"significant digits\\\" that the ode solving requests. When specified this controls the relative and absolute tolerances of the ODE solvers. By default the tolerance is 0.5*10^(-sigdig-2) for regular ODEs. For the sensitivity equations the default is ⁠0.5*10\\\\^(-sigdig-1.5)⁠ (sensitivity changes only applicable for liblsoda). This also controls the atol/rtol of the steady state solutions. The ssAtol/ssRtol is ⁠0.5*10\\\\^(-sigdig)⁠ and for the sensitivities ⁠0.5*10\\\\^(-sigdig+0.625)⁠. By default this is unspecified (NULL) and uses the standard atol/rtol.\" #>  #> $CTS$sc_meta$config$sigdig$uitype #> [1] \"text\" #>  #> $CTS$sc_meta$config$sigdig$type #> [1] \"numeric\" #>  #> $CTS$sc_meta$config$sigdig$value #> [1] \"NULL\" #>  #> $CTS$sc_meta$config$sigdig$options #> NULL #>  #> $CTS$sc_meta$config$sigdig$use #> [1] \"rxSolve\" #>  #> $CTS$sc_meta$config$sigdig$placeholder #> [1] \"NULL\" #>  #> $CTS$sc_meta$config$sigdig$ui #> [1] \"cts_config_sigdig\" #>  #>  #> $CTS$sc_meta$config$seed #> $CTS$sc_meta$config$seed$group #> [1] \"Misc\" #>  #> $CTS$sc_meta$config$seed$label #> [1] \"Random Seed\" #>  #> $CTS$sc_meta$config$seed$tooltip #> [1] \"Integer value to set the seed for the random number generator\" #>  #> $CTS$sc_meta$config$seed$uitype #> [1] \"text\" #>  #> $CTS$sc_meta$config$seed$type #> [1] \"numeric\" #>  #> $CTS$sc_meta$config$seed$value #> [1] \"5446\" #>  #> $CTS$sc_meta$config$seed$options #> NULL #>  #> $CTS$sc_meta$config$seed$use #> [1] \"Misc\" #>  #> $CTS$sc_meta$config$seed$placeholder #> [1] \"5446\" #>  #> $CTS$sc_meta$config$seed$ui #> [1] \"cts_config_seed\" #>  #>  #> $CTS$sc_meta$config$nsteps #> $CTS$sc_meta$config$nsteps$group #> [1] \"Misc\" #>  #> $CTS$sc_meta$config$nsteps$label #> [1] \"Time Steps\" #>  #> $CTS$sc_meta$config$nsteps$tooltip #> [1] \"Integer value representing the number of time steps to add between zero and the end of trial. A larger value will give smoother curves but it will also take more time to simulate.\" #>  #> $CTS$sc_meta$config$nsteps$uitype #> [1] \"text\" #>  #> $CTS$sc_meta$config$nsteps$type #> [1] \"numeric\" #>  #> $CTS$sc_meta$config$nsteps$value #> [1] \"200\" #>  #> $CTS$sc_meta$config$nsteps$options #> NULL #>  #> $CTS$sc_meta$config$nsteps$use #> [1] \"Misc\" #>  #> $CTS$sc_meta$config$nsteps$placeholder #> [1] \"200\" #>  #> $CTS$sc_meta$config$nsteps$ui #> [1] \"cts_config_nsteps\" #>  #>  #> $CTS$sc_meta$config$preamble #> $CTS$sc_meta$config$preamble$group #> [1] \"Rule Environment Preamble\" #>  #> $CTS$sc_meta$config$preamble$label #> NULL #>  #> $CTS$sc_meta$config$preamble$tooltip #> [1] \"Optional user-defined code to be executed in the rule-evaluation environment. You can create user-defined functions here.\" #>  #> $CTS$sc_meta$config$preamble$uitype #> [1] \"textarea\" #>  #> $CTS$sc_meta$config$preamble$type #> [1] \"character\" #>  #> $CTS$sc_meta$config$preamble$value #> NULL #>  #> $CTS$sc_meta$config$preamble$options #> NULL #>  #> $CTS$sc_meta$config$preamble$use #> [1] \"rules\" #>  #> $CTS$sc_meta$config$preamble$placeholder #> [1] \"my_func = function(id=NULL){\\n\\n}\" #>  #> $CTS$sc_meta$config$preamble$ui #> [1] \"cts_config_preamble\" #>  #>  #>  #> $CTS$sc_meta$cfg_summary #>       name                  ui     use      type                     group #> 1     atol     cts_config_atol rxSolve   numeric                ODE Solver #> 2     rtol     cts_config_rtol rxSolve   numeric                ODE Solver #> 3   sigdig   cts_config_sigdig rxSolve   numeric                ODE Solver #> 4     seed     cts_config_seed    Misc   numeric                      Misc #> 5   nsteps   cts_config_nsteps    Misc   numeric                      Misc #> 6 preamble cts_config_preamble   rules character Rule Environment Preamble #>  #> $CTS$sc_meta$ui_config #> [1] \"cts_config_atol\"     \"cts_config_rtol\"     \"cts_config_sigdig\"   #> [4] \"cts_config_seed\"     \"cts_config_nsteps\"   \"cts_config_preamble\" #>  #>  #> $CTS$ui #> $CTS$ui$source_model #> [1] \"MB_obj_1_rx\" #>  #>  #> $CTS$current_element #> [1] \"element_1\" #>  #> $CTS$elements #> $CTS$elements$element_1 #> $CTS$elements$element_1$isgood #> [1] TRUE #>  #> $CTS$elements$element_1$ui #> $CTS$elements$element_1$ui$element_name #> [1] \"cohort 1\" #>  #> $CTS$elements$element_1$ui$nsub #> [1] 10 #>  #> $CTS$elements$element_1$ui$visit_times #> [1] 0 #>  #> $CTS$elements$element_1$ui$trial_end #> [1] 100 #>  #> $CTS$elements$element_1$ui$fpage #> [1] \"1\" #>  #> $CTS$elements$element_1$ui$dvcols #> [1] \"Cc\" #>  #> $CTS$elements$element_1$ui$time_scale #> [1] \"\" #>  #> $CTS$elements$element_1$ui$tc_dim #> [1] \"d2x4\" #>  #> $CTS$elements$element_1$ui$evplot #> [1] 1 #>  #> $CTS$elements$element_1$ui$source_model #> [1] \"MB_obj_1_rx\" #>  #> $CTS$elements$element_1$ui$cts_config_atol #> [1] \"1e-8\" #>  #> $CTS$elements$element_1$ui$cts_config_rtol #> [1] \"1e-6\" #>  #> $CTS$elements$element_1$ui$cts_config_sigdig #> [1] \"NULL\" #>  #> $CTS$elements$element_1$ui$cts_config_seed #> [1] \"5446\" #>  #> $CTS$elements$element_1$ui$cts_config_nsteps #> [1] \"200\" #>  #>  #> $CTS$elements$element_1$id #> [1] \"element_1\" #>  #> $CTS$elements$element_1$idx #> [1] 1 #>  #> $CTS$elements$element_1$element_object_name #> [1] \"CTS_obj_1\" #>  #> $CTS$elements$element_1$cov_object_name #> [1] \"CTS_obj_1_cov\" #>  #> $CTS$elements$element_1$rules_object_name #> [1] \"CTS_obj_1_rules\" #>  #> $CTS$elements$element_1$subs_object_name #> [1] \"CTS_obj_1_subs\" #>  #> $CTS$elements$element_1$rxopts_object_name #> [1] \"CTS_obj_1_rxopts\" #>  #> $CTS$elements$element_1$rx_details_object_name #> [1] \"CTS_obj_1_rx_details\" #>  #> $CTS$elements$element_1$simres_object_name #> [1] \"CTS_obj_1_simres\" #>  #> $CTS$elements$element_1$sim_tc_object_name #> [1] \"CTS_obj_1_sim_tc\" #>  #> $CTS$elements$element_1$sim_ev_object_name #> [1] \"CTS_obj_1_sim_ev\" #>  #> $CTS$elements$element_1$ot_object_name #> [1] \"CTS_obj_1_output_times\" #>  #> $CTS$elements$element_1$fgtc_object_name #> [1] \"CTS_obj_1_fgtc\" #>  #> $CTS$elements$element_1$fgev_object_name #> [1] \"CTS_obj_1_fgev\" #>  #> $CTS$elements$element_1$nsub_object_name #> [1] \"CTS_obj_1_nsub\" #>  #> $CTS$elements$element_1$preamble_object_name #> [1] \"CTS_obj_1_preamble\" #>  #> $CTS$elements$element_1$code_previous #> [1] \"\" #>  #> $CTS$elements$element_1$dvcols_selection #> list() #>  #> $CTS$elements$element_1$rx_details #> $CTS$elements$element_1$rx_details$isgood #> [1] TRUE #>  #> $CTS$elements$element_1$rx_details$msgs #> NULL #>  #> $CTS$elements$element_1$rx_details$elements #> $CTS$elements$element_1$rx_details$elements$dosing #> character(0) #>  #> $CTS$elements$element_1$rx_details$elements$sys_units #> character(0) #>  #> $CTS$elements$element_1$rx_details$elements$covariates #> character(0) #>  #> $CTS$elements$element_1$rx_details$elements$population #> [1] \"lka\" \"lcl\" \"lvc\" #>  #> $CTS$elements$element_1$rx_details$elements$parameters #> [1] \"ka\" \"cl\" \"vc\" #>  #> $CTS$elements$element_1$rx_details$elements$secondary #> [1] \"kel\" #>  #> $CTS$elements$element_1$rx_details$elements$residual_error #> [1] \"propSd\" #>  #> $CTS$elements$element_1$rx_details$elements$iiv #> [1] \"etalcl\" \"etalvc\" #>  #> $CTS$elements$element_1$rx_details$elements$outputs #> [1] \"Cc\" #>  #> $CTS$elements$element_1$rx_details$elements$states #> [1] \"depot\"   \"central\" #>  #>  #> $CTS$elements$element_1$rx_details$txt_info #> [1] \"Outputs\\nCc\\n\\nStates/Compartments\\ndepot, central\\n\\nCovariates\\nNone found\\n\\nPopulation Parameters\\nlka, lcl, lvc\\n\\nIndividual Parameters\\nka, cl, vc\\n\\nSecondary Parameters\\nkel\\n\\nBetween-Subject Variability\\netalcl, etalvc\\n\\nResidual Error Parameters\\npropSd\\n\\n\" #>  #> $CTS$elements$element_1$rx_details$list_info #>  [1] \"1\"                                           #>  [2] \"Outputs: Cc\"                                 #>  [3] \"1\"                                           #>  [4] \"States: depot, central\"                      #>  [5] \"1\"                                           #>  [6] \"Covariates: None Found\"                      #>  [7] \"1\"                                           #>  [8] \"Population Parameters: lka, lcl, lvc\"        #>  [9] \"1\"                                           #> [10] \"Individual Parameters: ka, cl, vc\"           #> [11] \"1\"                                           #> [12] \"Secondary Parameters: kel\"                   #> [13] \"1\"                                           #> [14] \"Between-Subject Variability: etalcl, etalvc\" #> [15] \"1\"                                           #> [16] \"Residual Error Parameters: propSd\"           #>  #> $CTS$elements$element_1$rx_details$ht_info #> <b>Outputs<\/b> #> <br/> #> Cc #> <br/> #> <br/> #> <b>States/Compartments<\/b> #> <br/> #> depot, central #> <br/> #> <br/> #> <b>Covariates<\/b> #> <br/> #> <em>None found<\/em> #> <br/> #> <br/> #> <b>Population Parameters<\/b> #> <br/> #> lka, lcl, lvc #> <br/> #> <br/> #> <b>Individual Parameters<\/b> #> <br/> #> ka, cl, vc #> <br/> #> <br/> #> <b>Secondary Parameters<\/b> #> <br/> #> kel #> <br/> #> <br/> #> <b>Between-Subject Variability<\/b> #> <br/> #> etalcl, etalvc #> <br/> #> <br/> #> <b>Residual Error Parameters<\/b> #> <br/> #> propSd #> <br/> #> <br/> #>  #>  #> $CTS$elements$element_1$model_label #> [1] \"One compartment model\" #>  #> $CTS$elements$element_1$MDLchecksum #> [1] \"c1bd63cc707d0da186228563dbc83e60\" #>  #> $CTS$elements$element_1$SIMchecksum #> [1] \"NOTRUN\" #>  #> $CTS$elements$element_1$components_table #> NULL #>  #> $CTS$elements$element_1$components_list #> list() #>  #> $CTS$elements$element_1$covariates #> list() #>  #> $CTS$elements$element_1$covariates_ui_type #> list() #>  #> $CTS$elements$element_1$checksum #> [1] \"6cd7c3f954eb92a9ca2f92ae65debc8b\" #>  #> $CTS$elements$element_1$code #> [1] \"library(rxode2)\\nlibrary(nonmem2rx)\\nlibrary(nlmixr2lib)\\n\\n# Creating the model\\nMB_obj_1_fcn = function () \\n{\\n    description <- \\\"One compartment PK model with linear clearance using differential equations\\\"\\n    ini({\\n        lka <- 0.45\\n        label(\\\"Absorption rate (Ka)\\\")\\n        lcl <- 1\\n        label(\\\"Clearance (CL)\\\")\\n        lvc <- 3.45\\n        label(\\\"Central volume of distribution (V)\\\")\\n        propSd <- c(0, 0.5)\\n        label(\\\"Proportional residual error (fraction)\\\")\\n        etalcl ~ 0.1\\n        etalvc ~ 0.01\\n    })\\n    model({\\n        ka <- exp(lka)\\n        cl <- exp(lcl + etalcl)\\n        vc <- exp(lvc + etalvc)\\n        kel <- cl/vc\\n        d/dt(depot) <- -ka * depot\\n        d/dt(central) <- ka * depot - kel * central\\n        Cc <- central/vc\\n        Cc ~ prop(propSd)\\n    })\\n}\\n\\nMB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn)\\n\\nMB_obj_1_ts = list(\\n  system  = \\\"weeks\\\",\\n  details = \\n    list(months = list(verb = \\\"Months\\\", conv = 4.13359788359788e-07), \\n        weeks = list(verb = \\\"Weeks\\\", conv = 1.65343915343915e-06), \\n        days = list(verb = \\\"Days\\\", conv = 1.15740740740741e-05), \\n        hours = list(verb = \\\"Hours\\\", conv = 0.000277777777777778))\\n)\\n\\n# Setting the random seeds\\nset.seed(5446)\\nrxode2::rxSetSeed(5446)\\n\\n# Define the number of subjects to simulate for this cohort \\nCTS_obj_1_nsub = 10\\n\\n# User defined functions used in the simulations\\nCTS_obj_1_preamble = \\\"\\\"\\n\\n# Fetching the system information\\nCTS_obj_1_rx_details = fetch_rxinfo(MB_obj_1_rx)\\n\\n# Defining covariates\\nCTS_obj_1_cov = list()\\n\\n# Generating the subjects\\nCTS_obj_1_subs = mk_subjects(object = MB_obj_1_rx,\\n  nsub   = CTS_obj_1_nsub,\\n  covs   = CTS_obj_1_cov)\\n\\n# Creating rules\\nCTS_obj_1_rules = list()\\n\\n# rxSolve options\\nCTS_obj_1_rxopts = list(\\n  atol = 1e-8,\\n  rtol = 1e-6,\\n  sigdig = NULL)\\n\\n# Output times\\nCTS_obj_1_output_times = formods::linspace(0,100,200)\\n\\n# Running simulation\\nCTS_obj_1_simres =                                 \\n simulate_rules(object            = MB_obj_1_rx,\\n                subjects          = CTS_obj_1_subs[[\\\"subjects\\\"]],\\n                eval_times        = c(0),\\n                output_times      = CTS_obj_1_output_times,\\n                time_scales       = MB_obj_1_ts,\\n                preamble          = CTS_obj_1_preamble,\\n                rules             = CTS_obj_1_rules,\\n                rx_options        = CTS_obj_1_rxopts)\\n\\n# Collecting the simulation and event history values\\nCTS_obj_1_sim_tc = CTS_obj_1_simres[[\\\"simall\\\"]]\\nCTS_obj_1_sim_ev = CTS_obj_1_simres[[\\\"ev_history\\\"]]\\n\\n# Plotting timecourse\\nCTS_obj_1_fgtc =                                 \\n  plot_sr_tc(sro = CTS_obj_1_simres,\\n    xcol         = \\\"time\\\",         \\n    xlab_str     = \\\"Time\\\",         \\n    fncol        = 4,                       \\n    fnrow        = 2,                       \\n    dvcols       = \\\"Cc\\\",\\n    fpage        = 1)\\n\\n# Plotting events\\nCTS_obj_1_fgev =                                 \\n  plot_sr_ev(sro = CTS_obj_1_simres,\\n    xcol         = \\\"time\\\",         \\n    xlab_str     = \\\"Time\\\",         \\n    fncol        = 4,                       \\n    fnrow        = 2,                       \\n    evplot       = 1,\\n    fpage        = 1)\\n\" #>  #> $CTS$elements$element_1$code_ele_only #> [1] \"\\n# Fetching the system information\\nCTS_obj_1_rx_details = fetch_rxinfo(MB_obj_1_rx)\\n\\n# Defining covariates\\nCTS_obj_1_cov = list()\\n\\n# Generating the subjects\\nCTS_obj_1_subs = mk_subjects(object = MB_obj_1_rx,\\n  nsub   = CTS_obj_1_nsub,\\n  covs   = CTS_obj_1_cov)\\n\\n# Creating rules\\nCTS_obj_1_rules = list()\\n\\n# rxSolve options\\nCTS_obj_1_rxopts = list(\\n  atol = 1e-8,\\n  rtol = 1e-6,\\n  sigdig = NULL)\\n\\n# Output times\\nCTS_obj_1_output_times = formods::linspace(0,100,200)\\n\\n# Running simulation\\nCTS_obj_1_simres =                                 \\n simulate_rules(object            = MB_obj_1_rx,\\n                subjects          = CTS_obj_1_subs[[\\\"subjects\\\"]],\\n                eval_times        = c(0),\\n                output_times      = CTS_obj_1_output_times,\\n                time_scales       = MB_obj_1_ts,\\n                preamble          = CTS_obj_1_preamble,\\n                rules             = CTS_obj_1_rules,\\n                rx_options        = CTS_obj_1_rxopts)\\n\\n# Collecting the simulation and event history values\\nCTS_obj_1_sim_tc = CTS_obj_1_simres[[\\\"simall\\\"]]\\nCTS_obj_1_sim_ev = CTS_obj_1_simres[[\\\"ev_history\\\"]]\\n\" #>  #> $CTS$elements$element_1$code_figtcev #> [1] \"# Plotting timecourse\\nCTS_obj_1_fgtc =                                 \\n  plot_sr_tc(sro = CTS_obj_1_simres,\\n    xcol         = \\\"time\\\",         \\n    xlab_str     = \\\"Time\\\",         \\n    fncol        = 4,                       \\n    fnrow        = 2,                       \\n    dvcols       = \\\"Cc\\\",\\n    fpage        = 1)\\n\\n# Plotting events\\nCTS_obj_1_fgev =                                 \\n  plot_sr_ev(sro = CTS_obj_1_simres,\\n    xcol         = \\\"time\\\",         \\n    xlab_str     = \\\"Time\\\",         \\n    fncol        = 4,                       \\n    fnrow        = 2,                       \\n    evplot       = 1,\\n    fpage        = 1)\\n\" #>  #> $CTS$elements$element_1$code_figtc_rpt #>  [1] \"# Plotting timecourse\"                         #>  [2] \"CTS_obj_1_fgtc =                             \" #>  [3] \"  plot_sr_tc(sro = CTS_obj_1_simres,\"          #>  [4] \"    xcol         = \\\"time\\\",         \"         #>  [5] \"    xlab_str     = \\\"Time\\\",         \"         #>  [6] \"    fncol        = 4,                       \"  #>  [7] \"    fnrow        = 2,                       \"  #>  [8] \"    dvcols       = \\\"Cc\\\",\"                    #>  [9] \"    fpage        = fg_page)\"                   #> [10] \"\"                                              #>  #> $CTS$elements$element_1$code_figev_rpt #>  [1] \"# Plotting events\"                                 #>  [2] \"CTS_obj_1_fgev =                                 \" #>  [3] \"  plot_sr_ev(sro = CTS_obj_1_simres,\"              #>  [4] \"    xcol         = \\\"time\\\",         \"             #>  [5] \"    xlab_str     = \\\"Time\\\",         \"             #>  [6] \"    fncol        = 4,                       \"      #>  [7] \"    fnrow        = 2,                       \"      #>  [8] \"    evplot       = 1,\"                             #>  [9] \"    fpage        = fg_page)\"                       #> [10] \"\"                                                  #>  #> $CTS$elements$element_1$code_sim_only #> [1] \"\\n# Setting the random seeds\\nset.seed(5446)\\nrxode2::rxSetSeed(5446)\\n\\n# Define the number of subjects to simulate for this cohort \\nCTS_obj_1_nsub = 10\\n\\n# User defined functions used in the simulations\\nCTS_obj_1_preamble = \\\"\\\"\\n\\n# Fetching the system information\\nCTS_obj_1_rx_details = fetch_rxinfo(MB_obj_1_rx)\\n\\n# Defining covariates\\nCTS_obj_1_cov = list()\\n\\n# Generating the subjects\\nCTS_obj_1_subs = mk_subjects(object = MB_obj_1_rx,\\n  nsub   = CTS_obj_1_nsub,\\n  covs   = CTS_obj_1_cov)\\n\\n# Creating rules\\nCTS_obj_1_rules = list()\\n\\n# rxSolve options\\nCTS_obj_1_rxopts = list(\\n  atol = 1e-8,\\n  rtol = 1e-6,\\n  sigdig = NULL)\\n\\n# Output times\\nCTS_obj_1_output_times = formods::linspace(0,100,200)\\n\\n# Running simulation\\nCTS_obj_1_simres =                                 \\n simulate_rules(object            = MB_obj_1_rx,\\n                subjects          = CTS_obj_1_subs[[\\\"subjects\\\"]],\\n                eval_times        = c(0),\\n                output_times      = CTS_obj_1_output_times,\\n                time_scales       = MB_obj_1_ts,\\n                preamble          = CTS_obj_1_preamble,\\n                rules             = CTS_obj_1_rules,\\n                rx_options        = CTS_obj_1_rxopts)\\n\\n# Collecting the simulation and event history values\\nCTS_obj_1_sim_tc = CTS_obj_1_simres[[\\\"simall\\\"]]\\nCTS_obj_1_sim_ev = CTS_obj_1_simres[[\\\"ev_history\\\"]]\\n\" #>  #>  #>  #> $CTS$checksum #> [1] \"b14030ffa0d68ea554f689bbaa930856\" #>  #>  #> $MOD_TYPE #> [1] \"CTS\" #>  #> $id #> [1] \"CTS\" #>  #> $dep_mod_ids #> [1] \"MB\" #>  #> $FM_yaml_file #> [1] \"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/formods/templates/formods.yaml\" #>  #> $MOD_yaml_file #> [1] \"/private/var/folders/pq/7srbf_fx3rd3k706hgxkg61r0000gp/T/Rtmpt1Ik1b/temp_libpathd83d65dd96f7/ruminate/templates/CTS.yaml\" #>  #> $shiny_token #> [1] \"non_shiny\" #>"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_mk_preload.html","id":null,"dir":"Reference","previous_headings":"","what":"Make List of Current CTS State — CTS_mk_preload","title":"Make List of Current CTS State — CTS_mk_preload","text":"Reads app state yaml files.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_mk_preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make List of Current CTS State — CTS_mk_preload","text":"","code":"CTS_mk_preload(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_mk_preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make List of Current CTS State — CTS_mk_preload","text":"state CTS state object","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_mk_preload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make List of Current CTS State — CTS_mk_preload","text":"list following elements isgood:       Boolean indicating exit status function. msgs:         Messages passed back user. yaml_list:    Lists preload components.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_mk_preload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make List of Current CTS State — CTS_mk_preload","text":"","code":"sess_res = CTS_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 0c59339b37354c610734e8d8aa29c395 #> → MB: module checksum updated:430bd629c0c5e78c283cc0304abe132f #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: ecb9a93c56f037350e2cb06d34321c97 #> → MB: module checksum updated:01a3f453534120ca04017e76abc3eefd #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: c1bd63cc707d0da186228563dbc83e60 #> → MB: module checksum updated:90f9f2e8190d15064f051a771a143dfd #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 6d61865fa59c51f8d09d038b34bb2292 #> → MB: module checksum updated:93f226bbcb119c680e13cea620bf622c #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6c9105e0e03257eea849e484181f65b9 #> → MB: module checksum updated:4082724f300ab03b25697cd0bc569f17 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 6cd7c3f954eb92a9ca2f92ae65debc8b #> → CTS: module checksum updated: b14030ffa0d68ea554f689bbaa930856 #> → CTS: State initialized #> → CTS: loading element idx: 1 #> → CTS: setting cohort name: Single dose #> → CTS: setting model source: MB_obj_1_rx #> → CTS: setting trial options: #> → CTS:   - nsub: 3 #> → CTS:   - visit_times: 0 #> → CTS:   - trial_end: 100 #> → CTS:   - fpage: 1 #> → CTS:   - dvcols: Cc #> → CTS:   - time_scale:  #> → CTS:   - tc_dim: d2x4 #> → CTS:   - evplot: 1 #> → CTS:   - cts_config_atol: 1e-8 #> → CTS:   - cts_config_rtol: 1e-6 #> → CTS:   - cts_config_sigdig: NULL #> → CTS:   - cts_config_seed: 5446 #> → CTS:   - cts_config_nsteps: 5 #> → CTS:   - cts_config_preamble:  #> → CTS: cohort checksum updated: f20a1ff76af4c5117f644f8ed8da9e2b #> → CTS: module checksum updated: af1fd3c31f88ee22e375457aebbd4ff5 #> → CTS: adding rule: first_dose #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: a7b4f3b4fc3a8edafaac98b841208571 #> → CTS: module checksum updated: d371c15d6b344c2f39dc182046ccd02c #>   #>   #> using C compiler: ‘Apple clang version 16.0.0 (clang-1600.0.26.6)’ #> using SDK: ‘’ #>   #>   #> using C compiler: ‘Apple clang version 16.0.0 (clang-1600.0.26.6)’ #> using SDK: ‘’ #> Warning: multi-subject simulation without without 'omega' #>   #>   #> Warning: multi-subject simulation without without 'omega' #> → CTS: simulation complete #> → CTS: plot complete #> → CTS: cohort checksum updated: c29d866e3dbe4c25c25b0b41c81b89c6 #> → CTS: module checksum updated: 773a599936cc0bdd0bd39663bea4a341 #> → CTS: added element idx: 1 #> → CTS: module isgood: TRUE state = sess_res$state res = CTS_mk_preload(state) #> → CTS: saving element (1) Single dose #> → CTS:   -> rule dose #> → CTS: mk_preload isgood: TRUE"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_new_element.html","id":null,"dir":"Reference","previous_headings":"","what":"New Clinical Trial Simulation Cohort — CTS_new_element","title":"New Clinical Trial Simulation Cohort — CTS_new_element","text":"Appends new empty cohort CTS state object makes new cohort active cohort.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_new_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Clinical Trial Simulation Cohort — CTS_new_element","text":"","code":"CTS_new_element(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_new_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New Clinical Trial Simulation Cohort — CTS_new_element","text":"state CTS state CTS_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_new_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New Clinical Trial Simulation Cohort — CTS_new_element","text":"CTS state object containing new cohort cohort set current active cohort. See help CTS_fetch_state() ===ELEMENT== format.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_new_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New Clinical Trial Simulation Cohort — CTS_new_element","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 046099ecff200e7fef5937ceaa66ce73 #> → CTS: module checksum updated: cc70120423e280257bca0d9af9fc1114 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: 458af6f7bf90af6734da2e631e274f7c #> → CTS: module checksum updated: 2f56b880447f2cd24e3275b9f18bce7d #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 81f72912628b1d8c66dc60cd293a355f #> → CTS: module checksum updated: db1abdefe5e5ac126818916a33b80edf #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 8cb2475a2e4f2945529656421ce8e754 #> → CTS: module checksum updated: 74f5aa91efbb0f3c72a7b71cea60afaf"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_plot_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the Specified Element — CTS_plot_element","title":"Plots the Specified Element — CTS_plot_element","text":"Takes CTS state element simulates current set rules.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_plot_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the Specified Element — CTS_plot_element","text":"","code":"CTS_plot_element(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_plot_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the Specified Element — CTS_plot_element","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_plot_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the Specified Element — CTS_plot_element","text":"Simulation element plot results stored '\"plotres\" element. isgood   Boolean value indicating state figure generation code. msgs     messages passed user. capture  Captured figure generation output plot_sr_tc()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_plot_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the Specified Element — CTS_plot_element","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 046099ecff200e7fef5937ceaa66ce73 #> → CTS: module checksum updated: cc70120423e280257bca0d9af9fc1114 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: 458af6f7bf90af6734da2e631e274f7c #> → CTS: module checksum updated: 2f56b880447f2cd24e3275b9f18bce7d #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 81f72912628b1d8c66dc60cd293a355f #> → CTS: module checksum updated: db1abdefe5e5ac126818916a33b80edf #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 8cb2475a2e4f2945529656421ce8e754 #> → CTS: module checksum updated: 74f5aa91efbb0f3c72a7b71cea60afaf"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_preload.html","id":null,"dir":"Reference","previous_headings":"","what":"Preload Data for CTS Module — CTS_preload","title":"Preload Data for CTS Module — CTS_preload","text":"Populates supplied session variable information list sources.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preload Data for CTS Module — CTS_preload","text":"","code":"CTS_preload(   session,   src_list,   yaml_res,   mod_ID = NULL,   react_state = list(),   quickload = FALSE )"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preload Data for CTS Module — CTS_preload","text":"session Shiny session variable (app) list (outside app) src_list List preload data (read together module IDs top level) yaml_res List data module yaml config mod_ID Module ID module loaded. react_state Reactive shiny object (app) list (outside app) used trigger reactions. quickload Logical TRUE load reduced analysis FALSE load full analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_preload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preload Data for CTS Module — CTS_preload","text":"list following elements isgood:      Boolean indicating exit status function. msgs:        Messages passed back user. session:     Session object input:       value shiny input end session initialization. state:       App state. react_state: react_state components.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_set_current_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the Value for the Current cohort — CTS_set_current_element","title":"Sets the Value for the Current cohort — CTS_set_current_element","text":"Takes CTS state returns current active cohort","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_set_current_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the Value for the Current cohort — CTS_set_current_element","text":"","code":"CTS_set_current_element(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_set_current_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the Value for the Current cohort — CTS_set_current_element","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_set_current_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the Value for the Current cohort — CTS_set_current_element","text":"CTS state object current cohort set using supplied value.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_set_current_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the Value for the Current cohort — CTS_set_current_element","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 046099ecff200e7fef5937ceaa66ce73 #> → CTS: module checksum updated: cc70120423e280257bca0d9af9fc1114 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: 458af6f7bf90af6734da2e631e274f7c #> → CTS: module checksum updated: 2f56b880447f2cd24e3275b9f18bce7d #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 81f72912628b1d8c66dc60cd293a355f #> → CTS: module checksum updated: db1abdefe5e5ac126818916a33b80edf #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 8cb2475a2e4f2945529656421ce8e754 #> → CTS: module checksum updated: 74f5aa91efbb0f3c72a7b71cea60afaf"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_sim_isgood.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Simulation in Element for Goodness — CTS_sim_isgood","title":"Checks Simulation in Element for Goodness — CTS_sim_isgood","text":"Takes supplied element determines underlying simulation good state .","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_sim_isgood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Simulation in Element for Goodness — CTS_sim_isgood","text":"","code":"CTS_sim_isgood(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_sim_isgood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Simulation in Element for Goodness — CTS_sim_isgood","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_sim_isgood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Simulation in Element for Goodness — CTS_sim_isgood","text":"List following elements: isgood: Boolean object indicating file successfully loaded. msgs: Text description failure.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_simulate_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates the Specified Element — CTS_simulate_element","title":"Simulates the Specified Element — CTS_simulate_element","text":"Takes CTS state element simulates current set rules.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_simulate_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates the Specified Element — CTS_simulate_element","text":"","code":"CTS_simulate_element(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_simulate_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates the Specified Element — CTS_simulate_element","text":"state CTS state CTS_fetch_state() element Element list CTS_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_simulate_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates the Specified Element — CTS_simulate_element","text":"Simulation element simulation results stored \"simres\" element.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_simulate_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates the Specified Element — CTS_simulate_element","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 046099ecff200e7fef5937ceaa66ce73 #> → CTS: module checksum updated: cc70120423e280257bca0d9af9fc1114 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: 458af6f7bf90af6734da2e631e274f7c #> → CTS: module checksum updated: 2f56b880447f2cd24e3275b9f18bce7d #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 81f72912628b1d8c66dc60cd293a355f #> → CTS: module checksum updated: db1abdefe5e5ac126818916a33b80edf #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 8cb2475a2e4f2945529656421ce8e754 #> → CTS: module checksum updated: 74f5aa91efbb0f3c72a7b71cea60afaf"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_test_mksession.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate Session Data for Module Testing — CTS_test_mksession","title":"Populate Session Data for Module Testing — CTS_test_mksession","text":"Populates supplied session variable testing.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_test_mksession.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate Session Data for Module Testing — CTS_test_mksession","text":"","code":"CTS_test_mksession(session = list(), full = FALSE)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_test_mksession.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate Session Data for Module Testing — CTS_test_mksession","text":"session Shiny session variable (app) list (outside app) full Boolean indicating full test session created (TRUE) minimal test session created (FALSE, default)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_test_mksession.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate Session Data for Module Testing — CTS_test_mksession","text":"CTS portion all_sess_res returned FM_app_preload","code":""},{"path":[]},{"path":"https://ruminate.ubiquity.tools/reference/CTS_test_mksession.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate Session Data for Module Testing — CTS_test_mksession","text":"","code":"# \\donttest{ session = shiny::MockShinySession$new() sess_res = CTS_test_mksession(session=session) #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 7708c04fa4cfb1ebffd3f38dd644c954 #> → MB: module checksum updated:3a862a1c08eba8b17c70b27276e46b36 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 40677f60aeb06715b7cb563b93b44ea1 #> → MB: module checksum updated:92cf98c4c2ac00cf716033d7f392fd76 #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: b76f48caaa88372fe56a96e12a7f5a91 #> → MB: module checksum updated:ed4ee27d166e11a7ea755d03d43cbe70 #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: f1d37b3992181b354f6b571c10d2a3ad #> → MB: module checksum updated:9a9485c6501fcdd43e350c6e42f3b2b6 #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6ec1ea6d2da1d3cf7c7b5dd3b3054c85 #> → MB: module checksum updated:ade17e877354c2b87321a9e2846a39d5 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: caa08306253f56bd3923ae7ce04ee3fe #> → CTS: module checksum updated: 0150e38a5fae23afc6493c96f7a7af61 #> → CTS: State initialized #> → CTS: loading element idx: 1 #> → CTS: setting cohort name: Single dose #> → CTS: setting model source: MB_obj_1_rx #> → CTS: setting trial options: #> → CTS:   - nsub: 3 #> → CTS:   - visit_times: 0 #> → CTS:   - trial_end: 100 #> → CTS:   - fpage: 1 #> → CTS:   - dvcols: Cc #> → CTS:   - time_scale:  #> → CTS:   - tc_dim: d2x4 #> → CTS:   - evplot: 1 #> → CTS:   - cts_config_atol: 1e-8 #> → CTS:   - cts_config_rtol: 1e-6 #> → CTS:   - cts_config_sigdig: NULL #> → CTS:   - cts_config_seed: 5446 #> → CTS:   - cts_config_nsteps: 5 #> → CTS:   - cts_config_preamble:  #> → CTS: cohort checksum updated: 4316883dc54b694c8ff8938511f73b61 #> → CTS: module checksum updated: 119634e9b61ba21085de1dea9049a87e #> → CTS: adding rule: first_dose #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: 1e1b5b1f8e7439e92bbbf0467e3ffca3 #> → CTS: module checksum updated: a23e8e8de11fc3c17d0fb80a3cab5214 #>   #>   #>   #>   #> Warning: multi-subject simulation without without 'omega' #>   #>   #> Warning: multi-subject simulation without without 'omega' #> → CTS: simulation complete #> → CTS: plot complete #> → CTS: cohort checksum updated: a94719dbb817c8c94a1e7e1e3d9f848d #> → CTS: module checksum updated: f98f68396fd3ec8002a5521bbdf42906 #> → CTS: added element idx: 1 #> → CTS: module isgood: TRUE # }"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_update_checksum.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates CTS Module Checksum — CTS_update_checksum","title":"Updates CTS Module Checksum — CTS_update_checksum","text":"Takes CTS state updates checksum used trigger downstream updates","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_update_checksum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates CTS Module Checksum — CTS_update_checksum","text":"","code":"CTS_update_checksum(state)"},{"path":"https://ruminate.ubiquity.tools/reference/CTS_update_checksum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates CTS Module Checksum — CTS_update_checksum","text":"state CTS state CTS_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_update_checksum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates CTS Module Checksum — CTS_update_checksum","text":"CTS state object checksum updated","code":""},{"path":"https://ruminate.ubiquity.tools/reference/CTS_update_checksum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates CTS Module Checksum — CTS_update_checksum","text":"","code":"# For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # This will populate the session variable with the model building (MB) module sess_res = MB_test_mksession() session = sess_res[[\"session\"]]  id     = \"CTS\" id_ASM = \"ASM\" id_MB  = \"MB\" input  = list()  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"CTS.yaml\")  state = CTS_fetch_state(id              = id,                         id_ASM          = id_ASM,                         id_MB           = id_MB,                         input           = input,                         session         = session,                         FM_yaml_file    = FM_yaml_file,                         MOD_yaml_file   = MOD_yaml_file,                         react_state     = NULL)   # Fetch a list of the current element current_ele = CTS_fetch_current_element(state)  # You can modify the element current_ele[[\"element_name\"]] = \"A more descriptive name\"  # Defining the source model state[[\"CTS\"]][[\"ui\"]][[\"source_model\"]] = \"MB_obj_1_rx\" current_ele = CTS_change_source_model(state, current_ele)  # Single visit current_ele[[\"ui\"]][[\"visit_times\"]]                 = \"0\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]]           = \"5\"  # Creating a dosing rule state[[\"CTS\"]][[\"ui\"]][[\"rule_condition\"]]           = \"time == 0\" state[[\"CTS\"]][[\"ui\"]][[\"rule_type\"]]                = \"dose\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_state\"]]      = \"central\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_values\"]]     = \"c(1)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_times\"]]      = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"action_dosing_durations\"]]  = \"c(0)\" state[[\"CTS\"]][[\"ui\"]][[\"rule_name\"]]                = \"Single_Dose\"  # Adding the rule: current_ele = CTS_add_rule(state, current_ele)  # Appending the plotting details as well current_ele[[\"ui\"]][[\"fpage\"]]             = \"1\" current_ele[[\"ui\"]][[\"dvcols\"]]            = \"Cc\"  # Reducing the number of subjects and steps to speed things up on CRAN current_ele[[\"ui\"]][[\"nsub\"]]              = \"2\" current_ele[[\"ui\"]][[\"cts_config_nsteps\"]] = \"5\"  # Putting the element back in the state forcing code generation state = CTS_set_current_element(   state   = state,   element = current_ele)  # Now we pull out the current element, and simulate it current_ele = CTS_fetch_current_element(state) #current_ele = CTS_simulate_element(state, current_ele)  # Next we plot the element current_ele = CTS_plot_element(state, current_ele)  # Now we save those results back into the state: state = CTS_set_current_element(   state   = state,   element = current_ele)  # This will extract the code for the current module code = CTS_fetch_code(state) code  # This will update the checksum of the module state state = CTS_update_checksum(state)   # Access the datasets generated from simulations ds = CTS_fetch_ds(state)  # CTS_add_covariate state[[\"CTS\"]][[\"ui\"]][[\"covariate_value\"]]            = \"70, .1\" state[[\"CTS\"]][[\"ui\"]][[\"covariate_type_selected\"]]    = \"cont_lognormal\" state[[\"CTS\"]][[\"ui\"]][[\"selected_covariate\"]]         = \"WT\" current_ele = CTS_add_covariate(state, current_ele)  # Creates a new empty element state = CTS_new_element(state)  # Delete the current element state = CTS_del_current_element(state) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → CTS:   dest:   file.path(\"config\",\"report.docx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → CTS:   dest:   file.path(\"config\",\"report.pptx\") #> → CTS: including file #> → CTS:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → CTS:   dest:   file.path(\"config\",\"report.yaml\") #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 046099ecff200e7fef5937ceaa66ce73 #> → CTS: module checksum updated: cc70120423e280257bca0d9af9fc1114 #> → CTS: State initialized #> → CTS: add rule success #> → CTS: rule added #> → CTS: cohort checksum updated: 458af6f7bf90af6734da2e631e274f7c #> → CTS: module checksum updated: 2f56b880447f2cd24e3275b9f18bce7d #> → CTS: CTS_plot_element() #> → CTS: # Plotting timecourse #> → CTS: CTS_obj_1_fgtc =                                  #> → CTS:   plot_sr_tc(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     dvcols       = \"Cc\", #> → CTS:     fpage        = 1) #> → CTS:  #> → CTS: # Plotting events #> → CTS: CTS_obj_1_fgev =                                  #> → CTS:   plot_sr_ev(sro = CTS_obj_1_simres, #> → CTS:     xcol         = \"time\",          #> → CTS:     xlab_str     = \"Time\",          #> → CTS:     fncol        = 4,                        #> → CTS:     fnrow        = 2,                        #> → CTS:     evplot       = 1, #> → CTS:     fpage        = 1) #> → CTS: No simulation available, you need to run the simulation first. #> → CTS: cohort checksum updated: 81f72912628b1d8c66dc60cd293a355f #> → CTS: module checksum updated: db1abdefe5e5ac126818916a33b80edf #> → CTS: source model change detected #> → CTS:  > covariates reset #> → CTS: cohort checksum updated: 8cb2475a2e4f2945529656421ce8e754 #> → CTS: module checksum updated: 74f5aa91efbb0f3c72a7b71cea60afaf"},{"path":"https://ruminate.ubiquity.tools/reference/FM_fetch_mdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Models from Modules in the App — FM_fetch_mdl","title":"Fetches Models from Modules in the App — FM_fetch_mdl","text":"Loops specified module ID modules ID specified. ID, attempt made extract models available.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/FM_fetch_mdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Models from Modules in the App — FM_fetch_mdl","text":"","code":"FM_fetch_mdl(state, session, ids = NULL)"},{"path":"https://ruminate.ubiquity.tools/reference/FM_fetch_mdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Models from Modules in the App — FM_fetch_mdl","text":"state Current module state yaml file read session Shiny session variable ids Vector ID strings modules containing models NULL modules models available.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/FM_fetch_mdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Models from Modules in the App — FM_fetch_mdl","text":"list containing current dataset following format: JMH isgood: General logical indicator successfully. hasmdl: Logical indicating least one model found. modules: List module checksums. mdl: Result XX_fetch_mdl, see  vignette(\"making_modules\", package = \"formods\") catalog: Dataframe containing tabular catalog models found. label:  Text label model. object :  Name object contains compiled rxode2 model. MOD_TYPE:  Type 'formods' module model came . id: Source 'formods' Module ID. checksum: Checksum module model came . MDLchecksum: Checksum model. code:  Code generate model.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/FM_fetch_mdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Models from Modules in the App — FM_fetch_mdl","text":"","code":"# We need a module state and a Shiny session variable # to use this function: id=\"UD\" sess_res = UD_test_mksession(session=list(), id=id) #> Error in UD_test_mksession(session = list(), id = id): could not find function \"UD_test_mksession\" session = sess_res$session #> Error in eval(expr, envir, enclos): object 'sess_res' not found state   = sess_res$state #> Error in eval(expr, envir, enclos): object 'sess_res' not found mdl = FM_fetch_mdl(state, session) #> Error in FM_fetch_app_state(session): object 'session' not found mdl$catalog #> Error in eval(expr, envir, enclos): object 'mdl' not found"},{"path":"https://ruminate.ubiquity.tools/reference/MB_Server.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Builder State Server — MB_Server","title":"Model Builder State Server — MB_Server","text":"Server function Model Builder  Shiny Module","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_Server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Builder State Server — MB_Server","text":"","code":"MB_Server(   id,   id_ASM = \"ASM\",   FM_yaml_file = system.file(package = \"formods\", \"templates\", \"formods.yaml\"),   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\"),   deployed = FALSE,   react_state = NULL )"},{"path":"https://ruminate.ubiquity.tools/reference/MB_Server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Builder State Server — MB_Server","text":"id ID string corresponds ID used call modules UI elements id_ASM ID string app state managment module used save load app states FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. deployed Boolean variable indicating whether app deployed . react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_Server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Builder State Server — MB_Server","text":"MB Server object","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_append_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Report Elements — MB_append_report","title":"Append Report Elements — MB_append_report","text":"Appends report elements formods report.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_append_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Report Elements — MB_append_report","text":"","code":"MB_append_report(state, rpt, rpttype, gen_code_only = FALSE)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_append_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Report Elements — MB_append_report","text":"state MB state MB_fetch_state() rpt Report current content report appended function. details structure see documentation formods::FM_generate_report() rpttype Type report generate (supported \"xlsx\", \"pptx\", \"docx\"). gen_code_only Boolean value indicating code generated (FALSE).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_append_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Report Elements — MB_append_report","text":"list containing following elements isgood:    Return status function. hasrptele: Boolean indicator module reportable elements. code:      Code generate reporting elements. msgs:      Messages passed back user. rpt:       Report additions passed back user.","code":""},{"path":[]},{"path":"https://ruminate.ubiquity.tools/reference/MB_build_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Code to Generate Model — MB_build_code","title":"Build Code to Generate Model — MB_build_code","text":"Takes function definition rxode object, function object name rxode object name creates code build objects.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_build_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Code to Generate Model — MB_build_code","text":"","code":"MB_build_code(   state,   session,   fcn_def,   time_scale,   fcn_obj_name,   rx_obj_name,   ts_obj_name )"},{"path":"https://ruminate.ubiquity.tools/reference/MB_build_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Code to Generate Model — MB_build_code","text":"state MB state MB_fetch_state() session Shiny session variable fcn_def Character string containing function definition model time_scale Short name model timescale (see names state$MC$formatting$time_scales$choices). fcn_obj_name Object name function create. rx_obj_name Object name rxode2 object create. ts_obj_name Object name tiemscale object create.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_build_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Code to Generate Model — MB_build_code","text":"List following elements model_code Block code create model context larger script. model_code_sa model_code element meant stand alone.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_build_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Code to Generate Model — MB_build_code","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_del_current_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Deletes Current model — MB_del_current_element","title":"Deletes Current model — MB_del_current_element","text":"Takes MB state deletes current model. last element, new default added.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_del_current_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deletes Current model — MB_del_current_element","text":"","code":"MB_del_current_element(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_del_current_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deletes Current model — MB_del_current_element","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_del_current_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deletes Current model — MB_del_current_element","text":"MB state object current model deleted.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_del_current_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deletes Current model — MB_del_current_element","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_appends.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches List of Available Models — MB_fetch_appends","title":"Fetches List of Available Models — MB_fetch_appends","text":"Creates catalog models available system file.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_appends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches List of Available Models — MB_fetch_appends","text":"","code":"MB_fetch_appends(state, current_ele)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_appends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches List of Available Models — MB_fetch_appends","text":"state MB state MB_fetch_state() current_ele MB model element MB_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_appends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches List of Available Models — MB_fetch_appends","text":"List following attributes: isgood: Boolean variable indicating success failure. msgs: Messages passed back user. hasappends: Boolean variable indicating appendable models found. select_plain: Flat list models (ungrouped). choicesOpt List witht subtext filled .","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_appends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches List of Available Models — MB_fetch_appends","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_catalog.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches List of Available Models — MB_fetch_catalog","title":"Fetches List of Available Models — MB_fetch_catalog","text":"Creates catalog models available system file.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_catalog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches List of Available Models — MB_fetch_catalog","text":"","code":"MB_fetch_catalog(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_catalog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches List of Available Models — MB_fetch_catalog","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_catalog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches List of Available Models — MB_fetch_catalog","text":"List following attributes: summary: Dataframe summary models catlog sources: information found summary table list form. select_group: List models grouped source. select_plain: Flat list models (ungrouped). select_subtext: Subtext pulldown menus. msgs: Messages passed back user. hasmdl: Boolean value indicating models found. isgood: Boolean variable indicating success failure.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_catalog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches List of Available Models — MB_fetch_catalog","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Module Code — MB_fetch_code","title":"Fetch Module Code — MB_fetch_code","text":"Fetches code generate results seen app","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Module Code — MB_fetch_code","text":"","code":"MB_fetch_code(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Module Code — MB_fetch_code","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Module Code — MB_fetch_code","text":"Character object vector lines code","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Module Code — MB_fetch_code","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Selected Current Model Component — MB_fetch_component","title":"Fetch Selected Current Model Component — MB_fetch_component","text":"Fetches selected component provided model.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Selected Current Model Component — MB_fetch_component","text":"","code":"MB_fetch_component(state, current_ele, component_id = NULL)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Selected Current Model Component — MB_fetch_component","text":"state MB state MB_fetch_state() current_ele MB model element MB_fetch_current_element() component_id numeric component id select (default NULL) return selected ID.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Selected Current Model Component — MB_fetch_component","text":"list current component following attributes isgood: Boolean object indicating success. rx_obj: rxode2 object model. ts_obj: timescale object model. fcn_def: Just model function definition. note: Note field components_table model_code: Code generate model. model_code_sa: Stand-alone code generate model msgs:      Messages passed back user.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Selected Current Model Component — MB_fetch_component","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_current_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Current model — MB_fetch_current_element","title":"Fetches Current model — MB_fetch_current_element","text":"Takes MB state returns current active model object.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_current_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Current model — MB_fetch_current_element","text":"","code":"MB_fetch_current_element(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_current_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Current model — MB_fetch_current_element","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_current_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Current model — MB_fetch_current_element","text":"List containing details active data view. structure list structure state$MB$elements output MB_fetch_state().","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_current_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Current model — MB_fetch_current_element","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Model Builder Module Datasets — MB_fetch_ds","title":"Fetch Model Builder Module Datasets — MB_fetch_ds","text":"Fetches datasets contained module.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Model Builder Module Datasets — MB_fetch_ds","text":"","code":"MB_fetch_ds(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Model Builder Module Datasets — MB_fetch_ds","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Model Builder Module Datasets — MB_fetch_ds","text":"Character object vector lines code list containing following elements isgood:    Return status function. hasds:     Boolean indicator module datasets msgs:      Messages passed back user. ds:        List datasets. list element name R-object dataset. element following structure: label: Text label dataset MOD_TYPE: Short name type module. id: module ID DS: Dataframe containing actual dataset. DSMETA: Metadata describing DS code: Complete code build dataset. checksum: Module checksum. DSchecksum: Dataset checksum.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Model Builder Module Datasets — MB_fetch_ds","text":"","code":"# We need a module state: sess_res = MB_test_mksession(session=list()) #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> → MB: State initialized state = sess_res$state  ds = MB_fetch_ds(state) #> Error in MB_fetch_ds(state): object 'object_name' not found  ds #> Error in eval(expr, envir, enclos): object 'ds' not found"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_mdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Model Builder Module Models — MB_fetch_mdl","title":"Fetch Model Builder Module Models — MB_fetch_mdl","text":"Fetches models contained module.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_mdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Model Builder Module Models — MB_fetch_mdl","text":"","code":"MB_fetch_mdl(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_mdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Model Builder Module Models — MB_fetch_mdl","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_mdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Model Builder Module Models — MB_fetch_mdl","text":"list containing following elements isgood:      Return status function. hasmdl:      Boolean indicator module models msgs:        Messages passed back user. mdl:         List models. list element name R-object dataset. element following structure: label:       Text label model (e.g. one-compartment model). MOD_TYPE:    Type module. id:          Module ID. rx_obj:      rxode2 object. rx_obj_name: rxode2 object name holds model. ts_obj       List elements system details ts_obj_name: object name holds model time scale information. fcn_def:     Text define model MDLMETA:     Notes model. code:        Code generate model. checksum:    Module checksum. MDLchecksum: Model checksum.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_mdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Model Builder Module Models — MB_fetch_mdl","text":"","code":"# We need a module state: sess_res = MB_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE state = sess_res$state  mdls = MB_fetch_mdl(state)  names(mdls) #> [1] \"hasmdl\"     \"isgood\"     \"ts_details\" \"msgs\"       \"mdl\""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Model Builder State — MB_fetch_state","title":"Fetch Model Builder State — MB_fetch_state","text":"Merges default app options changes made UI","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Model Builder State — MB_fetch_state","text":"","code":"MB_fetch_state(   id,   id_ASM,   input,   session,   FM_yaml_file,   MOD_yaml_file,   react_state )"},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Model Builder State — MB_fetch_state","text":"id Shiny module ID id_ASM ID string app state management module used save load app states input Shiny input variable session Shiny session variable FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Model Builder State — MB_fetch_state","text":"list containing current state app including default values yaml file well changes made user. list following structure: yaml: Full contents supplied yaml file. MC: Module components yaml file. MB: isgood: Boolean object indicating file successfully loaded. checksum: MD5 sum contents element can used detect changes state. MOD_TYPE: Character data containing type module \"MB\" id: Character data containing module id module session variable. FM_yaml_file: App configuration file FM main section. MOD_yaml_file:  Module configuration file MC main section.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_fetch_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Model Builder State — MB_fetch_state","text":"","code":"# Within shiny both session and input variables will exist, # this creates examples here for testing purposes: sess_res = MB_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE session = sess_res$session input   = sess_res$input  # Configuration files FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\") MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")  # Creating an empty state object state = MB_fetch_state(id              = \"MB\",                        id_ASM          = \"ASM\",                        input           = input,                        session         = session,                        FM_yaml_file    = FM_yaml_file,                        MOD_yaml_file   = MOD_yaml_file,                        react_state     = NULL)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_init_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize MB Module State — MB_init_state","title":"Initialize MB Module State — MB_init_state","text":"Creates list initialized module state","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_init_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize MB Module State — MB_init_state","text":"","code":"MB_init_state(FM_yaml_file, MOD_yaml_file, id, session)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_init_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize MB Module State — MB_init_state","text":"FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. id ID string module. session Shiny session variable","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_init_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize MB Module State — MB_init_state","text":"list containing empty MB state","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_init_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize MB Module State — MB_init_state","text":"","code":"# Within shiny both session and input variables will exist, # this creates examples here for testing purposes: sess_res = MB_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE session = sess_res$session input   = sess_res$input  state = MB_init_state(    FM_yaml_file  = system.file(package = \"formods\",                                \"templates\",                                \"formods.yaml\"),    MOD_yaml_file = system.file(package = \"ruminate\",                                \"templates\",                                \"MB.yaml\"),    id              = \"MB\",    session         = session) #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized  state #> $yaml #> $yaml$FM #> $yaml$FM$include #> $yaml$FM$include$files #> $yaml$FM$include$files[[1]] #> $yaml$FM$include$files[[1]]$file #> $yaml$FM$include$files[[1]]$file$source #> [1] \"file.path(system.file(package=\\\"onbrand\\\"), \\\"templates\\\", \\\"report.docx\\\")\" #>  #> $yaml$FM$include$files[[1]]$file$dest #> [1] \"file.path(\\\"config\\\",\\\"report.docx\\\")\" #>  #>  #>  #> $yaml$FM$include$files[[2]] #> $yaml$FM$include$files[[2]]$file #> $yaml$FM$include$files[[2]]$file$source #> [1] \"file.path(system.file(package=\\\"onbrand\\\"), \\\"templates\\\", \\\"report.pptx\\\")\" #>  #> $yaml$FM$include$files[[2]]$file$dest #> [1] \"file.path(\\\"config\\\",\\\"report.pptx\\\")\" #>  #>  #>  #> $yaml$FM$include$files[[3]] #> $yaml$FM$include$files[[3]]$file #> $yaml$FM$include$files[[3]]$file$source #> [1] \"file.path(system.file(package=\\\"onbrand\\\"), \\\"templates\\\", \\\"report.yaml\\\")\" #>  #> $yaml$FM$include$files[[3]]$file$dest #> [1] \"file.path(\\\"config\\\",\\\"report.yaml\\\")\" #>  #>  #>  #>  #>  #> $yaml$FM$deployed #> [1] FALSE #>  #> $yaml$FM$code #> $yaml$FM$code$theme #> [1] \"vibrant_ink\" #>  #> $yaml$FM$code$showLineNumbers #> [1] TRUE #>  #> $yaml$FM$code$gen_file #> [1] \"run_analysis.R\" #>  #> $yaml$FM$code$gen_preamble #> [1] \"# formods automated output ------------------------------------------------\\n# https://formods.ubiquity.tools/\\nrm(list=ls())\" #>  #> $yaml$FM$code$packages #> [1] \"onbrand\" \"writexl\" #>  #>  #> $yaml$FM$notifications #> $yaml$FM$notifications$config #> $yaml$FM$notifications$config$success #> $yaml$FM$notifications$config$success$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$success$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$success$background #> [1] \"#5bb85b\" #>  #>  #> $yaml$FM$notifications$config$failure #> $yaml$FM$notifications$config$failure$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$failure$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$failure$background #> [1] \"#d9534f\" #>  #>  #> $yaml$FM$notifications$config$info #> $yaml$FM$notifications$config$info$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$info$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$info$background #> [1] \"#5bc0de\" #>  #>  #> $yaml$FM$notifications$config$warning #> $yaml$FM$notifications$config$warning$useFontAwesome #> [1] FALSE #>  #> $yaml$FM$notifications$config$warning$useIcon #> [1] FALSE #>  #> $yaml$FM$notifications$config$warning$background #> [1] \"#f0ac4d\" #>  #>  #>  #>  #> $yaml$FM$reporting #> $yaml$FM$reporting$enabled #> [1] TRUE #>  #> $yaml$FM$reporting$content_init #> $yaml$FM$reporting$content_init$xlsx #> [1] \"rpt = list(summary = NULL,\\n           sheets  = list())\" #>  #> $yaml$FM$reporting$content_init$docx #> [1] \"rpt  = onbrand::read_template(\\n  template = file.path(\\\"config\\\", \\\"report.docx\\\"),\\n  mapping  = file.path(\\\"config\\\", \\\"report.yaml\\\"))\" #>  #> $yaml$FM$reporting$content_init$pptx #> [1] \"rpt  = onbrand::read_template(\\n  template = file.path(\\\"config\\\", \\\"report.pptx\\\"),\\n  mapping  = file.path(\\\"config\\\", \\\"report.yaml\\\"))\" #>  #>  #> $yaml$FM$reporting$phs #> $yaml$FM$reporting$phs[[1]] #> $yaml$FM$reporting$phs[[1]]$name #> [1] \"HEADERLEFT\" #>  #> $yaml$FM$reporting$phs[[1]]$location #> [1] \"header\" #>  #> $yaml$FM$reporting$phs[[1]]$value #> [1] \"\" #>  #> $yaml$FM$reporting$phs[[1]]$tooltip #> [1] \"left header text\" #>  #>  #> $yaml$FM$reporting$phs[[2]] #> $yaml$FM$reporting$phs[[2]]$name #> [1] \"HEADERRIGHT\" #>  #> $yaml$FM$reporting$phs[[2]]$location #> [1] \"header\" #>  #> $yaml$FM$reporting$phs[[2]]$value #> [1] \"\" #>  #> $yaml$FM$reporting$phs[[2]]$tooltip #> [1] \"right header text\" #>  #>  #> $yaml$FM$reporting$phs[[3]] #> $yaml$FM$reporting$phs[[3]]$name #> [1] \"FOOTERLEFT\" #>  #> $yaml$FM$reporting$phs[[3]]$location #> [1] \"footer\" #>  #> $yaml$FM$reporting$phs[[3]]$value #> [1] \"\" #>  #> $yaml$FM$reporting$phs[[3]]$tooltip #> [1] \"left footer text\" #>  #>  #>  #> $yaml$FM$reporting$phs_formatting #> $yaml$FM$reporting$phs_formatting$width #> [1] \"100%\" #>  #> $yaml$FM$reporting$phs_formatting$tt_position #> [1] \"left\" #>  #> $yaml$FM$reporting$phs_formatting$tt_size #> [1] \"medium\" #>  #>  #>  #> $yaml$FM$ui #> $yaml$FM$ui$button_style #> [1] \"fill\" #>  #> $yaml$FM$ui$select_size #> [1] 10 #>  #> $yaml$FM$ui$color_green #> [1] \"#00BB8A\" #>  #> $yaml$FM$ui$color_red #> [1] \"#FF475E\" #>  #> $yaml$FM$ui$color_blue #> [1] \"#0088FF\" #>  #> $yaml$FM$ui$color_purple #> [1] \"#bd2cf4\" #>  #>  #> $yaml$FM$data_meta #> $yaml$FM$data_meta$data_header #> [1] \"<span style='color:===COLOR==='><b>===NAME===<\/b><br/><font size='-3'>===LABEL===<\/font><\/span>\" #>  #> $yaml$FM$data_meta$subtext #> [1] \"===LABEL===: ===RANGE===\" #>  #> $yaml$FM$data_meta$many_sep #> [1] \",...,\" #>  #> $yaml$FM$data_meta$data_types #> $yaml$FM$data_meta$data_types$character #> $yaml$FM$data_meta$data_types$character$color #> [1] \"#DD4B39\" #>  #> $yaml$FM$data_meta$data_types$character$label #> [1] \"text\" #>  #>  #> $yaml$FM$data_meta$data_types$double #> $yaml$FM$data_meta$data_types$double$color #> [1] \"#3C8DBC\" #>  #> $yaml$FM$data_meta$data_types$double$label #> [1] \"num\" #>  #>  #> $yaml$FM$data_meta$data_types$integer #> $yaml$FM$data_meta$data_types$integer$color #> [1] \"#3C8DBC\" #>  #> $yaml$FM$data_meta$data_types$integer$label #> [1] \"num\" #>  #>  #> $yaml$FM$data_meta$data_types$other #> $yaml$FM$data_meta$data_types$other$color #> [1] \"black\" #>  #> $yaml$FM$data_meta$data_types$other$label #> [1] \"other\" #>  #>  #>  #>  #> $yaml$FM$workflows #> $yaml$FM$workflows$example #> $yaml$FM$workflows$example$group #> [1] \"Examples\" #>  #> $yaml$FM$workflows$example$desc #> [1] \"Example Workflow\" #>  #> $yaml$FM$workflows$example$require_ds #> [1] TRUE #>  #> $yaml$FM$workflows$example$preload #> [1] \"file.path('.', 'example.yaml')\" #>  #>  #>  #> $yaml$FM$labels #> $yaml$FM$labels$ui_label #> [1] \"put labels here\" #>  #>  #> $yaml$FM$user_files #> $yaml$FM$user_files$use_tmpdir #> [1] TRUE #>  #>  #> $yaml$FM$logging #> $yaml$FM$logging$enabled #> [1] TRUE #>  #> $yaml$FM$logging$timestamp #> [1] TRUE #>  #> $yaml$FM$logging$timestamp_fmt #> [1] \"%Y-%m-%d %H:%M:%S\" #>  #> $yaml$FM$logging$log_file #> [1] \"formods_log.txt\" #>  #> $yaml$FM$logging$console #> [1] TRUE #>  #>  #>  #>  #> $MC #> $MC$module #> $MC$module$type #> [1] \"MB\" #>  #> $MC$module$depends #> $MC$module$depends$id_ASM #> [1] \"ASM\" #>  #>  #>  #> $MC$element_object_name #> [1] \"MB_obj\" #>  #> $MC$sources #> $MC$sources[[1]] #> $MC$sources[[1]]$source #> $MC$sources[[1]]$source$group #> [1] \"User-defined Models\" #>  #> $MC$sources[[1]]$source$name #> [1] \"rxode2 User model\" #>  #> $MC$sources[[1]]$source$description #> [1] \"User-defined rxode2 model\" #>  #> $MC$sources[[1]]$source$type #> [1] \"rxode2\" #>  #> $MC$sources[[1]]$source$obj #> [1] \"my_fcn\" #>  #> $MC$sources[[1]]$source$file #> [1] \"file.path(getwd(),\\\"user_model.R\\\")\" #>  #>  #>  #> $MC$sources[[2]] #> $MC$sources[[2]]$source #> $MC$sources[[2]]$source$group #> [1] \"User-defined Models\" #>  #> $MC$sources[[2]]$source$name #> [1] \"NONMEM User model\" #>  #> $MC$sources[[2]]$source$description #> [1] \"User-defined NONMEM model\" #>  #> $MC$sources[[2]]$source$type #> [1] \"NONMEM\" #>  #> $MC$sources[[2]]$source$file #> [1] \"file.path(getwd(),\\\"user_model.ctl\\\")\" #>  #>  #>  #> $MC$sources[[3]] #> $MC$sources[[3]]$source #> $MC$sources[[3]]$source$group #> [1] \"Model Library\" #>  #> $MC$sources[[3]]$source$type #> [1] \"nlmixr2lib\" #>  #> $MC$sources[[3]]$source$name #> [1] \"nlmixr2 Model Library\" #>  #>  #>  #>  #> $MC$code #> $MC$code$packages #> [1] \"rxode2\"     \"nonmem2rx\"  \"nlmixr2lib\" #>  #> $MC$code$readOnly #> [1] TRUE #>  #> $MC$code$mode #> [1] \"r\" #>  #>  #> $MC$compact #> $MC$compact$code #> [1] TRUE #>  #> $MC$compact$clip #> [1] TRUE #>  #>  #> $MC$reporting #> $MC$reporting$enabled #> [1] TRUE #>  #> $MC$reporting$priority #> [1] 1 #>  #>  #> $MC$formatting #> $MC$formatting$code #> $MC$formatting$code$width #> [1] 800 #>  #> $MC$formatting$code$height #> [1] 300 #>  #>  #> $MC$formatting$preview #> $MC$formatting$preview$width #> [1] \"800px\" #>  #> $MC$formatting$preview$height #> [1] \"500px\" #>  #>  #> $MC$formatting$input #> NULL #>  #> $MC$formatting$current_element #> $MC$formatting$current_element$width #> [1] \"200px\" #>  #> $MC$formatting$current_element$tooltip #> [1] \"Change the current model.\" #>  #> $MC$formatting$current_element$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$element_name #> $MC$formatting$element_name$width #> [1] \"200px\" #>  #>  #> $MC$formatting$button_clk_run #> $MC$formatting$button_clk_run$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_run$block #> [1] TRUE #>  #>  #> $MC$formatting$button_clk_del #> $MC$formatting$button_clk_del$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_del$block #> [1] TRUE #>  #> $MC$formatting$button_clk_del$tooltip #> [1] \"Delete the current model.\" #>  #> $MC$formatting$button_clk_del$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_save #> $MC$formatting$button_clk_save$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_save$block #> [1] TRUE #>  #> $MC$formatting$button_clk_save$tooltip #> [1] \"Save the name for the current model.\" #>  #> $MC$formatting$button_clk_save$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_clip #> $MC$formatting$button_clk_clip$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_clip$block #> [1] TRUE #>  #> $MC$formatting$button_clk_clip$tooltip #> [1] \"Copy the code to generate the current model to the clipboard.\" #>  #> $MC$formatting$button_clk_clip$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_copy #> $MC$formatting$button_clk_copy$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_copy$block #> [1] TRUE #>  #> $MC$formatting$button_clk_copy$tooltip #> [1] \"Make a copy of the current model.\" #>  #> $MC$formatting$button_clk_copy$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_append_model #> $MC$formatting$button_clk_append_model$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_append_model$block #> [1] TRUE #>  #> $MC$formatting$button_clk_append_model$tooltip #> [1] \"Append to current model.\" #>  #> $MC$formatting$button_clk_append_model$tooltip_position #> [1] \"right\" #>  #>  #> $MC$formatting$button_clk_new #> $MC$formatting$button_clk_new$size #> [1] \"sm\" #>  #> $MC$formatting$button_clk_new$block #> [1] TRUE #>  #> $MC$formatting$button_clk_new$tooltip #> [1] \"Create a new model.\" #>  #> $MC$formatting$button_clk_new$tooltip_position #> [1] \"right\" #>  #> $MC$formatting$button_clk_new$width #> [1] 100 #>  #>  #> $MC$formatting$export_nonmem #> $MC$formatting$export_nonmem$size #> [1] \"sm\" #>  #> $MC$formatting$export_nonmem$block #> [1] TRUE #>  #> $MC$formatting$export_nonmem$color #> [1] \"primary\" #>  #> $MC$formatting$export_nonmem$tooltip #> [1] \"Download the current model in NONMEM format.\" #>  #> $MC$formatting$export_nonmem$tooltip_position #> [1] \"right\" #>  #> $MC$formatting$export_nonmem$width #> [1] 100 #>  #>  #> $MC$formatting$export_monolix #> $MC$formatting$export_monolix$size #> [1] \"sm\" #>  #> $MC$formatting$export_monolix$block #> [1] TRUE #>  #> $MC$formatting$export_monolix$color #> [1] \"primary\" #>  #> $MC$formatting$export_monolix$tooltip #> [1] \"Download the current model in Monolix format.\" #>  #> $MC$formatting$export_monolix$tooltip_position #> [1] \"right\" #>  #> $MC$formatting$export_monolix$width #> [1] 100 #>  #>  #> $MC$formatting$catalog_selection #> $MC$formatting$catalog_selection$width #> [1] \"200px\" #>  #> $MC$formatting$catalog_selection$truncate #> [1] 65 #>  #> $MC$formatting$catalog_selection$tooltip #> [1] \"Select base model from the catalog.\" #>  #> $MC$formatting$catalog_selection$tooltip_position #> [1] \"top\" #>  #>  #> $MC$formatting$model_type_selection #> $MC$formatting$model_type_selection$width #> [1] \"200px\" #>  #> $MC$formatting$model_type_selection$tooltip #> [1] \"Select the type of the model being uploaded.\" #>  #> $MC$formatting$model_type_selection$tooltip_position #> [1] \"right\" #>  #> $MC$formatting$model_type_selection$choices #> $MC$formatting$model_type_selection$choices$rxode2 #> [1] \"rxode2 function\" #>  #> $MC$formatting$model_type_selection$choices$NONMEM #> [1] \"NONMEM (XML, lst, or ctl)\" #>  #>  #> $MC$formatting$model_type_selection$default #> [1] \"rxode2\" #>  #>  #> $MC$formatting$upload_model_file #> $MC$formatting$upload_model_file$width #> [1] \"400px\" #>  #>  #> $MC$formatting$append_model #> $MC$formatting$append_model$tooltip #> [1] \"Append the selected sub-model to the current model.\" #>  #> $MC$formatting$append_model$tooltip_position #> [1] \"bottom\" #>  #> $MC$formatting$append_model$no_models #> [1] \"None available\" #>  #> $MC$formatting$append_model$width #> [1] \"200px\" #>  #>  #> $MC$formatting$base_from #> $MC$formatting$base_from$size #> [1] \"normal\" #>  #> $MC$formatting$base_from$status #> [1] \"primary\" #>  #> $MC$formatting$base_from$tooltip #> [1] \"You can select the base model from a catalog or upload your own\" #>  #> $MC$formatting$base_from$tooltip_position #> [1] \"bottom\" #>  #> $MC$formatting$base_from$choices #> $MC$formatting$base_from$choices$catalog #> [1] \"Model Catalog\" #>  #> $MC$formatting$base_from$choices$user #> [1] \"User-defined model\" #>  #>  #> $MC$formatting$base_from$default #> [1] \"catalog\" #>  #>  #> $MC$formatting$time_scales #> $MC$formatting$time_scales$width #> [1] \"200px\" #>  #> $MC$formatting$time_scales$default #> [1] \"weeks\" #>  #> $MC$formatting$time_scales$tooltip #> [1] \"Choose the timescale of the model.\" #>  #> $MC$formatting$time_scales$tooltip_position #> [1] \"top\" #>  #> $MC$formatting$time_scales$choices #> $MC$formatting$time_scales$choices$months #> $MC$formatting$time_scales$choices$months$conv #> [1] \"1/(60*60*24*7*4)\" #>  #> $MC$formatting$time_scales$choices$months$verb #> [1] \"Months\" #>  #> $MC$formatting$time_scales$choices$months$match #> [1] \"mo\" #>  #>  #> $MC$formatting$time_scales$choices$weeks #> $MC$formatting$time_scales$choices$weeks$conv #> [1] \"1/(60*60*24*7)\" #>  #> $MC$formatting$time_scales$choices$weeks$verb #> [1] \"Weeks\" #>  #> $MC$formatting$time_scales$choices$weeks$match #> [1] \"wk\"    \"weeks\" #>  #>  #> $MC$formatting$time_scales$choices$days #> $MC$formatting$time_scales$choices$days$conv #> [1] \"1/(60*60*24)\" #>  #> $MC$formatting$time_scales$choices$days$verb #> [1] \"Days\" #>  #> $MC$formatting$time_scales$choices$days$match #> [1] \"d\"    \"day\"  \"days\" #>  #>  #> $MC$formatting$time_scales$choices$hours #> $MC$formatting$time_scales$choices$hours$conv #> [1] \"1/(60*60)\" #>  #> $MC$formatting$time_scales$choices$hours$verb #> [1] \"Hours\" #>  #> $MC$formatting$time_scales$choices$hours$match #> [1] \"hr\"    \"hours\" \"hrs\"   #>  #>  #>  #>  #>  #> $MC$labels #> $MC$labels$current_element #> [1] \"Select model\" #>  #> $MC$labels$element_name #> NULL #>  #> $MC$labels$upload_model_file #> NULL #>  #> $MC$labels$base_from #> NULL #>  #> $MC$labels$catalog_selection #> NULL #>  #> $MC$labels$export_nonmem #> [1] \"NONMEM\" #>  #> $MC$labels$export_monolix #> [1] \"Monolix\" #>  #> $MC$labels$export_pause #> [1] \"Exporting model.\" #>  #> $MC$labels$model_type_selection #> NULL #>  #> $MC$labels$time_scale #> NULL #>  #> $MC$labels$catalog_empty #> [1] \"No models were found, the catalog is empty\" #>  #> $MC$labels$save_btn #> [1] \"Save\" #>  #> $MC$labels$clip_btn #> [1] \"Code\" #>  #> $MC$labels$copy_btn #> [1] \"Copy\" #>  #> $MC$labels$del_btn #> [1] \"Delete\" #>  #> $MC$labels$new_btn #> [1] \"New\" #>  #> $MC$labels$append_model_btn #> [1] \"Append Model\" #>  #> $MC$labels$append_model #> [1] \"Available Sub-Models\" #>  #> $MC$labels$building_model #> [1] \"Building model, be patient.\" #>  #> $MC$labels$appending_model #> [1] \"Appending sub-model, be patient.\" #>  #> $MC$labels$element_name_diff #> [1] \"The model name has changed.\" #>  #> $MC$labels$model_code_diff #> [1] \"Manual changes have been made to the model.\" #>  #> $MC$labels$save_change_detected #> [1] \"You need to click on the save button for these changes to take effect.\" #>  #> $MC$labels$head_base_model #> [1] \"Starting model\" #>  #> $MC$labels$head_model_code #> [1] \"Model code\" #>  #> $MC$labels$head_time_scale #> [1] \"Model time-scale\" #>  #>  #> $MC$errors #> $MC$errors$no_model_found #> [1] \"No model was found.\" #>  #> $MC$errors$base_model_build_failed #> [1] \"The base model build failed.\" #>  #> $MC$errors$manual_model_update_failed #> [1] \"Manual model update failed.\" #>  #> $MC$errors$user_file_upload_failed #> [1] \"User-defined model failed.\" #>  #> $MC$errors$nlmixr2lib_not_found #> [1] \"The nlmixr2lib package was not found. This library will not be available.\" #>  #> $MC$errors$selected_id_bad_list #> [1] \"Unable to find a list for the selected component.\" #>  #> $MC$errors$selected_id_bad_row #> [1] \"Selected component should have 1 row.\" #>  #> $MC$errors$fetch_catalog_failed #> [1] \"Unable to fetch model catalog.\" #>  #> $MC$errors$fetch_appends_failed #> [1] \"Unable to fetch appendable models\" #>  #> $MC$errors$append_failed #> [1] \"Unable to append sub-model\" #>  #>  #> $MC$tooltips #> $MC$tooltips$include #> [1] TRUE #>  #> $MC$tooltips$elements #> [1] \"Show model components\" #>  #> $MC$tooltips$show_code #> [1] \"Show model code\" #>  #> $MC$tooltips$url_rxode #> [1] \"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html\" #>  #> $MC$tooltips$url_model_types #> [1] \"https://ruminate.ubiquity.tools/articles/model_builder.html#model-catalog\" #>  #> $MC$tooltips$components #> $MC$tooltips$components$input_tip #> [1] \"My tool tip\" #>  #>  #>  #>  #> $MB #> $MB$button_counters #> $MB$button_counters$button_clk_save #> [1] 0 #>  #> $MB$button_counters$button_clk_clip #> [1] 0 #>  #> $MB$button_counters$button_clk_del #> [1] 0 #>  #> $MB$button_counters$button_clk_copy #> [1] 0 #>  #> $MB$button_counters$button_clk_new #> [1] 0 #>  #> $MB$button_counters$button_clk_append_model #> [1] 0 #>  #>  #> $MB$ui_hold #> $MB$ui_hold$button_clk_save #> [1] FALSE #>  #> $MB$ui_hold$button_clk_clip #> [1] FALSE #>  #> $MB$ui_hold$button_clk_del #> [1] FALSE #>  #> $MB$ui_hold$button_clk_copy #> [1] FALSE #>  #> $MB$ui_hold$button_clk_new #> [1] FALSE #>  #> $MB$ui_hold$button_clk_append_model #> [1] FALSE #>  #> $MB$ui_hold$catalog_selection #> [1] FALSE #>  #> $MB$ui_hold$base_from #> [1] FALSE #>  #> $MB$ui_hold$element_name #> [1] FALSE #>  #> $MB$ui_hold$time_scale #> [1] FALSE #>  #> $MB$ui_hold$model_type_selection #> [1] FALSE #>  #> $MB$ui_hold$ui_select_element #> [1] FALSE #>  #> $MB$ui_hold$ui_mb_model #> [1] FALSE #>  #> $MB$ui_hold$uploaded_model #> [1] FALSE #>  #> $MB$ui_hold$append_model #> [1] FALSE #>  #> $MB$ui_hold$element_selection #> [1] FALSE #>  #>  #> $MB$ui_ids #>  [1] \"button_clk_save\"         \"button_clk_clip\"         #>  [3] \"button_clk_del\"          \"button_clk_copy\"         #>  [5] \"button_clk_new\"          \"button_clk_append_model\" #>  [7] \"catalog_selection\"       \"base_from\"               #>  [9] \"element_name\"            \"time_scale\"              #> [11] \"model_type_selection\"    \"ui_select_element\"       #> [13] \"ui_mb_model\"             \"model_type_selection\"    #> [15] \"uploaded_model\"          \"append_model\"            #> [17] \"element_selection\"       #>  #> $MB$isgood #> [1] TRUE #>  #> $MB$ui_ele #> [1] \"catalog_selection\" \"base_from\"         \"element_name\"      #> [4] \"time_scale\"        #>  #> $MB$element_cntr #> [1] 1 #>  #> $MB$model_type_selection #> [1] \"rxode2\" #>  #> $MB$suggested #> $MB$suggested$found #> [1] TRUE #>  #> $MB$suggested$pkgs #> $MB$suggested$pkgs$rxode2 #> $MB$suggested$pkgs$rxode2$found #> [1] TRUE #>  #> $MB$suggested$pkgs$rxode2$msg #> [1] \"\" #>  #>  #> $MB$suggested$pkgs$nonmem2rx #> $MB$suggested$pkgs$nonmem2rx$found #> [1] TRUE #>  #> $MB$suggested$pkgs$nonmem2rx$msg #> [1] \"\" #>  #>  #> $MB$suggested$pkgs$nlmixr2lib #> $MB$suggested$pkgs$nlmixr2lib$found #> [1] TRUE #>  #> $MB$suggested$pkgs$nlmixr2lib$msg #> [1] \"\" #>  #>  #>  #>  #> $MB$model_catalog #> $MB$model_catalog$sources #> $MB$model_catalog$sources[[1]] #> $MB$model_catalog$sources[[1]]$source #> $MB$model_catalog$sources[[1]]$source$group #> [1] \"User-defined Models\" #>  #> $MB$model_catalog$sources[[1]]$source$name #> [1] \"rxode2 User model\" #>  #> $MB$model_catalog$sources[[1]]$source$description #> [1] \"User-defined rxode2 model\" #>  #> $MB$model_catalog$sources[[1]]$source$type #> [1] \"rxode2\" #>  #> $MB$model_catalog$sources[[1]]$source$obj #> [1] \"my_fcn\" #>  #> $MB$model_catalog$sources[[1]]$source$file #> [1] \"file.path(getwd(),\\\"user_model.R\\\")\" #>  #>  #>  #> $MB$model_catalog$sources[[2]] #> $MB$model_catalog$sources[[2]]$source #> $MB$model_catalog$sources[[2]]$source$group #> [1] \"User-defined Models\" #>  #> $MB$model_catalog$sources[[2]]$source$name #> [1] \"NONMEM User model\" #>  #> $MB$model_catalog$sources[[2]]$source$description #> [1] \"User-defined NONMEM model\" #>  #> $MB$model_catalog$sources[[2]]$source$type #> [1] \"NONMEM\" #>  #> $MB$model_catalog$sources[[2]]$source$file #> [1] \"file.path(getwd(),\\\"user_model.ctl\\\")\" #>  #>  #>  #> $MB$model_catalog$sources[[3]] #> $MB$model_catalog$sources[[3]]$source #> $MB$model_catalog$sources[[3]]$source$group #> [1] \"Model Library\" #>  #> $MB$model_catalog$sources[[3]]$source$type #> [1] \"nlmixr2lib\" #>  #> $MB$model_catalog$sources[[3]]$source$name #> [1] \"nlmixr2 Model Library\" #>  #>  #>  #>  #> $MB$model_catalog$summary #>    ana_sol depends mod_id                                Name #> 1      yes    <NA>  mod_1                             PK_1cmt #> 2       no    <NA>  mod_2                         PK_1cmt_des #> 3      yes    <NA>  mod_3                             PK_2cmt #> 4       no    <NA>  mod_4                         PK_2cmt_des #> 5       no    <NA>  mod_5                    PK_2cmt_no_depot #> 6       no    <NA>  mod_6                    PK_2cmt_tdcl_des #> 7      yes    <NA>  mod_7                             PK_3cmt #> 8       no    <NA>  mod_8                         PK_3cmt_des #> 9       no    <NA>  mod_9      phenylalanine_charbonneau_2021 #> 10      no    <NA> mod_10             indirect_0cpt_transitEx #> 11      no    <NA> mod_11              indirect_1cpt_inhi_kin #> 12      no    <NA> mod_12          indirect_1cpt_inhi_kin_CLV #> 13      no    <NA> mod_13  indirect_1cpt_inhi_kin_r0rmaxcrmax #> 14      no    <NA> mod_14             indirect_1cpt_inhi_kout #> 15      no    <NA> mod_15         indirect_1cpt_inhi_kout_CLV #> 16      no    <NA> mod_16 indirect_1cpt_inhi_kout_r0rmaxcrmax #> 17      no    <NA> mod_17              indirect_1cpt_stim_kin #> 18      no    <NA> mod_18          indirect_1cpt_stim_kin_CLV #> 19      no    <NA> mod_19  indirect_1cpt_stim_kin_r0rmaxcrmax #> 20      no    <NA> mod_20             indirect_1cpt_stim_kout #> 21      no    <NA> mod_21         indirect_1cpt_stim_kout_CLV #> 22      no    <NA> mod_22 indirect_1cpt_stim_kout_r0rmaxcrmax #> 23      no    <NA> mod_23   indirect_circ_1cpt_inhi_kin_kin_t #> 24      no    <NA> mod_24  indirect_circ_1cpt_inhi_kin_kout_t #> 25      no    <NA> mod_25  indirect_circ_1cpt_inhi_kout_kin_t #> 26      no    <NA> mod_26 indirect_circ_1cpt_inhi_kout_kout_t #> 27      no    <NA> mod_27   indirect_circ_1cpt_stim_kin_kin_t #> 28      no    <NA> mod_28  indirect_circ_1cpt_stim_kin_kout_t #> 29      no    <NA> mod_29  indirect_circ_1cpt_stim_kout_kin_t #> 30      no    <NA> mod_30 indirect_circ_1cpt_stim_kout_kout_t #> 31      no    <NA> mod_31         indirect_prec_1cpt_inhi_CLV #> 32      no    <NA> mod_32 indirect_prec_1cpt_inhi_r0rmaxcrmax #> 33      no    <NA> mod_33         indirect_prec_1cpt_stim_CLV #> 34      no    <NA> mod_34 indirect_prec_1cpt_stim_r0rmaxcrmax #> 35     yes    <NA> mod_35              PK_2cmt_mAb_Davda_2014 #> 36      no    <NA> mod_36                    PK_double_sim_01 #> 37      no    <NA> mod_37                    PK_double_sim_10 #> 38      no    <NA> mod_38                    PK_double_sim_11 #> 39     yes    <NA> mod_39      CarlssonPetri_2021_liraglutide #> 40      no    <NA> mod_40           Cirincione_2017_exenatide #> 41      no    <NA> mod_41            Kovalenko_2020_dupilumab #> 42     yes    <NA> mod_42           Soehoel_2022_tralokinumab #> 43     yes    <NA> mod_43               Zhu_2017_lebrikizumab #> 44      no      Cc mod_44              oncology_sdm_lobo_2002 #> 45      no      Cc mod_45     oncology_xenograft_simeoni_2004 #> 46      no    <NA> mod_46                     tgi_no_sat_Koch #> 47      no    <NA> mod_47                     tgi_no_sat_expo #> 48      no    <NA> mod_48                   tgi_no_sat_linear #> 49      no    <NA> mod_49                 tgi_no_sat_powerLaw #> 50      no    <NA> mod_50              tgi_sat_VonBertalanffy #> 51      no    <NA> mod_51           tgi_sat_genVonBertalanffy #> 52      no    <NA> mod_52                    tgi_sat_logistic #>                                 Object   Type #> 1                              PK_1cmt rxode2 #> 2                          PK_1cmt_des rxode2 #> 3                              PK_2cmt rxode2 #> 4                          PK_2cmt_des rxode2 #> 5                     PK_2cmt_no_depot rxode2 #> 6                     PK_2cmt_tdcl_des rxode2 #> 7                              PK_3cmt rxode2 #> 8                          PK_3cmt_des rxode2 #> 9       phenylalanine_charbonneau_2021 rxode2 #> 10             indirect_0cpt_transitEx rxode2 #> 11              indirect_1cpt_inhi_kin rxode2 #> 12          indirect_1cpt_inhi_kin_CLV rxode2 #> 13  indirect_1cpt_inhi_kin_r0rmaxcrmax rxode2 #> 14             indirect_1cpt_inhi_kout rxode2 #> 15         indirect_1cpt_inhi_kout_CLV rxode2 #> 16 indirect_1cpt_inhi_kout_r0rmaxcrmax rxode2 #> 17              indirect_1cpt_stim_kin rxode2 #> 18          indirect_1cpt_stim_kin_CLV rxode2 #> 19  indirect_1cpt_stim_kin_r0rmaxcrmax rxode2 #> 20             indirect_1cpt_stim_kout rxode2 #> 21         indirect_1cpt_stim_kout_CLV rxode2 #> 22 indirect_1cpt_stim_kout_r0rmaxcrmax rxode2 #> 23   indirect_circ_1cpt_inhi_kin_kin_t rxode2 #> 24  indirect_circ_1cpt_inhi_kin_kout_t rxode2 #> 25  indirect_circ_1cpt_inhi_kout_kin_t rxode2 #> 26 indirect_circ_1cpt_inhi_kout_kout_t rxode2 #> 27   indirect_circ_1cpt_stim_kin_kin_t rxode2 #> 28  indirect_circ_1cpt_stim_kin_kout_t rxode2 #> 29  indirect_circ_1cpt_stim_kout_kin_t rxode2 #> 30 indirect_circ_1cpt_stim_kout_kout_t rxode2 #> 31         indirect_prec_1cpt_inhi_CLV rxode2 #> 32 indirect_prec_1cpt_inhi_r0rmaxcrmax rxode2 #> 33         indirect_prec_1cpt_stim_CLV rxode2 #> 34 indirect_prec_1cpt_stim_r0rmaxcrmax rxode2 #> 35              PK_2cmt_mAb_Davda_2014 rxode2 #> 36                    PK_double_sim_01 rxode2 #> 37                    PK_double_sim_10 rxode2 #> 38                    PK_double_sim_11 rxode2 #> 39      CarlssonPetri_2021_liraglutide rxode2 #> 40           Cirincione_2017_exenatide rxode2 #> 41            Kovalenko_2020_dupilumab rxode2 #> 42           Soehoel_2022_tralokinumab rxode2 #> 43               Zhu_2017_lebrikizumab rxode2 #> 44              oncology_sdm_lobo_2002 rxode2 #> 45     oncology_xenograft_simeoni_2004 rxode2 #> 46                     tgi_no_sat_Koch rxode2 #> 47                     tgi_no_sat_expo rxode2 #> 48                   tgi_no_sat_linear rxode2 #> 49                 tgi_no_sat_powerLaw rxode2 #> 50              tgi_sat_VonBertalanffy rxode2 #> 51           tgi_sat_genVonBertalanffy rxode2 #> 52                    tgi_sat_logistic rxodeodelcmt <- function() {\\n  description <- \"One compartment PK model with linear clearance\"\\n  ini({\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n\\n    Cc <- linCmt()\\n    Cc ~ prop(propSd)\\n  })\\n} #> 2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PK_1cmt_des <- function() {\\n  description <- \"One compartment PK model with linear clearance using differential equations\"\\n  dosing<-c(\"central\", \"depot\")\\n  ini({\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n\\n    kel <- cl / vc\\n\\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n\\n    Cc <- central / vc\\n    Cc ~ prop(propSd)\\n  })\\n}cmt <- function() {\\n  description <- \"Two compartment PK model with linear clearance\"\\n  ini({\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    lvp  <- 5 ; label(\"Peripheral volume of distribution (Vp)\")\\n    lq  <- 0.1 ; label(\"Intercompartmental clearance (Q)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    vp <- exp(lvp)\\n    q  <- exp(lq)\\n\\n    Cc<- linCmt()\\n    Cc ~ prop(propSd)\\n  })\\n}cmt_des <- function() {\\n  description <- \"Two compartment PK model with linear clearance using differential equations\"\\n  ini({\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    lvp  <- 5 ; label(\"Peripheral volume of distribution (Vp)\")\\n    lq  <- 0.1 ; label(\"Intercompartmental clearance (Q)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    vp <- exp(lvp)\\n    q  <- exp(lq)\\n\\n    kel <- cl/vc\\n    k12 <- q/vc\\n    k21 <- q/vp\\n\\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <-  ka*depot - kel*central - k12*central + k21*peripheral1\\n    d/dt(peripheral1) <- k12*central - k21*peripheral1\\n    Cc <- central / vc\\n\\n    Cc ~ prop(propSd)\\n  })\\n}cmt_no_depot <- function() {\\n  description <- \"Two compartment PK model with linear clearance using differential equations\"\\n  ini({\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    lvp  <- 5 ; label(\"Peripheral volume of distribution (Vp)\")\\n    lq  <- 0.1 ; label(\"Intercompartmental clearance (Q)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    vp <- exp(lvp)\\n    q  <- exp(lq)\\n    \\n    kel <- cl/vc\\n    k12 <- q/vc\\n    k21 <- q/vp\\n    \\n  \\n    d/dt(central) <-  - kel*central - k12*central + k21*peripheral1\\n    d/dt(peripheral1) <- k12*central - k21*peripheral1\\n    Cc <- central / vc\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}cmt_tdcl_des <- function() {\\n  description <- \"Two compartment PK model with time-dependent clearance using differential equations (structured like nivolumab PK model)\"\\n  reference <- \"C Liu, J Yu, H Li, J Liu, Y Xu, P Song, Q Liu, H Zhao, J Xu, V E Maher, B P Booth, G Kim, A Rahman, Y Wang; Association of time-varying clearance of nivolumab with disease dynamics and its implications on exposure response analysis.  Clin Pharmacol Ther May 2017; 101(5): 657-666. https://doi.org/10.1002/cpt.656\"\\n  ini({\\n    lcl <- log(0.2) ; label(\"Time-stationary clearance (CLTS)\")\\n    lcltmax <- log(0.22) ; label(\"Typical value of the maximal change of clearance relative to baseline (Tmax)\")\\n    lclgamma <- log(1) ; label(\"Hill coefficient for time-dependent clearance\")\\n    lclt50 <- log(30) ; label(\"Time for 50% of maximal CL change\")\\n    lvc  <- log(20) ; label(\"Central volume of distribution (V)\")\\n    lvp  <- log(150) ; label(\"Peripheral volume of distribution (Vp)\")\\n    lq  <- log(0.75) ; label(\"Intercompartmental clearance (Q)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    clts <- exp(lcl)\\n    cltmax <- exp(lcltmax)\\n    clgamma <- exp(lclgamma)\\n    clt50 <- exp(lclt50)\\n    vc <- exp(lvc)\\n    vp <- exp(lvp)\\n    q  <- exp(lq)\\n\\n    cl <- clts*exp(cltmax*time^clgamma/(clt50^clgamma+time^clgamma))\\n\\n    kel <- cl/vc\\n    k12 <- q/vc\\n    k21 <- q/vp\\n\\n    d/dt(central)     <- - kel*central - k12*central + k21*peripheral1\\n    d/dt(peripheral1) <- k12*central - k21*peripheral1\\n    Cc <- central / vc\\n\\n    Cc ~ prop(propSd)\\n  })\\n}cmt <- function() {\\n  description <- \"Three compartment PK model with linear clearance\"\\n  ini({\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    lvp  <- 5 ; label(\"Peripheral volume of distribution (Vp)\")\\n    lvp2  <- 8 ; label(\"Second peripheral volume of distribution (Vp2)\")\\n    lq  <- 0.1 ; label(\"Intercompartmental clearance (Q)\")\\n    lq2  <- 0.5 ; label(\"Second intercompartmental clearance (Q2)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    vp <- exp(lvp)\\n    vp2 <- exp(lvp2)\\n    q   <- exp(lq)\\n    q2  <- exp(lq2)\\n\\n    Cc <- linCmt()\\n    Cc ~ prop(propSd)\\n  })\\n}cmt_des <- function() {\\n  description <- \"Three compartment PK model with linear clearance using differential equations\"\\n  ini({\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    lvp  <- 5 ; label(\"Peripheral volume of distribution (Vp)\")\\n    lvp2  <- 8 ; label(\"Second peripheral volume of distribution (Vp2)\")\\n    lq  <- 0.1 ; label(\"Intercompartmental clearance (Q)\")\\n    lq2  <- 0.5 ; label(\"Second intercompartmental clearance (Q2)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    vp <- exp(lvp)\\n    vp2 <- exp(lvp2)\\n    q  <- exp(lq)\\n    q2  <- exp(lq2)\\n\\n    kel <- cl/vc\\n    k12 <- q/vc\\n    k21 <- q/vp\\n    k13 <- q2/vc\\n    k31 <- q2/vp2\\n\\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <-  ka*depot - kel*central - k12*central + k21*peripheral1 - k13*central + k31*peripheral2\\n    d/dt(peripheral1) <- k12*central - k21*peripheral1\\n    d/dt(peripheral2) <- k13*central - k31*peripheral2\\n    Cc <- central / vc\\n\\n    Cc ~ prop(propSd)\\n  })\\n}phenylalanine_charbonneau_2021 <- function() {\\n  description <- \"Phenylalanine model for absorption and metabolism in healthy subjects and patients with PKU\"\\n  reference <- \"Charbonneau, M.R., Denney, W.S., Horvath, N.G. et al. Development of a mechanistic model to predict synthetic biotic activity in healthy volunteers and patients with phenylketonuria. Commun Biol 4, 898 (2021). https://doi.org/10.1038/s42003-021-02183-1\"\\n  covariates <-\\n    list(\\n      WT = \"Body weight in kg\",\\n      time = \"Time in hours\",\\n      f_pah = \"Fraction of healthy PAH activity (healthy = 1; PKU patient = 0 to 0.03)\",\\n      bl_phe = \"Typical values are about 0.075 mmol/L in healthy subjects and 1.18 mmol/L in patients\"\\n    )\\n  # parameters come from Table 4 in paper\\n  ini({\\n    bl_phe <- 1.18; label(\"Baseline Phenylalanine (Phe) concentration (mmol/L)\")\\n    bl_gut <- 0; label(\"Baseline Phe in the gut (mg)\")\\n\\n    ka_gut <- 0.25; label(\"Absorption rate from gut to plasma\")\\n    v_npd <- 0.015; label(\"Rate of net protein breakdown ((mmol/L)/hr)\")\\n\\n    vmax_pah <- 0.9; label(\"Maximum rate of Phe breakdown by PAH in a healthy subject ((mmol/L)/hr)\")\\n    f_pah <- 0; label(\"Fraction of healthy PAH activity (PKU patient = 0 to 0.02)\")\\n    km_pah <- 0.51; label(\"Michaelis-Menten constant for Phe with PAH (mmol/L)\")\\n    kact_pah <- 0.54; label(\"Phe activation constant for PAH\")\\n\\n    vmax_trans <- 0.063; label(\"Maximum rate of Phe breakdown by transaminase ((mmol/L)/hr)\")\\n    km_trans <- 1.37; label(\"Michaelis-Menten constant for Phe with transaminase (mmol/L)\")\\n\\n    cl_renal <- 5.696e-4; label(\"Renal clearance of Phe per body weight ((L/kg)/hr)\")\\n\\n    vd <- 0.5; label(\"Body-weight normalized volume distribution of Phe (L/kg)\")\\n  })\\n  model({\\n    # Molecular weight of Phe (g/mol)\\n    mw_phe <- 165.19\\n    # Unit conversion adjustment from Gut to Plasma concentrations (mmol/L)/mg\\n    f_gut_plasma <- 1/(mw_phe * vd_phe * WT)\\n\\n    v_pah <- vmax_pah*f_pah / (1 + km_pah/phe + km_pah*kact_pah/(phe^2)) # units: (mmol/L)/hr\\n    v_trans <- vmax_trans / (1 + km_trans/phe) # units: (mmol/L)/hr\\n    v_renal <- phe * cl_renal * vd # units: (mmol/L)/hr\\n\\n    d/dt(gut) <- -ka_gut*gut\\n    d/dt(phe) <- ka*gut*f_gut_plasma + v_npd - v_pah - v_trans - v_renal\\n    gut(0) <- bl_gut\\n    phe(0) <- bl_phe\\n    phe_umol <- phe * 1000 # units: umol/L (more commonly used in clinical laboratories)\\n\\n    # The following is an augmentation of the model reported in the paper.  It\\n    # indicates the approximate daily Phe intake (in mg) to achieve\\n    # steady-state.\\n    daily_phe_intake <- 24 * vd * (v_pah + v_trans + v_renal - v_npd) / f_gut_plasma\\n  })\\n}indirect_0cpt_transitEx <- function() {\\n  description <- \"Two compartment PK model with Michealis-Menten clearance using differential equations\"\\n  ini({\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lktr1 <- c(0, 0.05)\\n    lktr2 <- c(0, 0.05)\\n    lktr3 <- c(0, 0.05)\\n    lktr4 <- c(0, 0.05)\\n    lktr5 <- c(0, 0.05)\\n    lktr6 <- c(0, 0.05)\\n    lktr7 <- c(0, 0.05)\\n    lktr8 <- c(0, 0.05)\\n    lktr9 <- c(0, 0.05)\\n    lktr10 <- c(0, 0.05)\\n    lvm <- 0.04\\n    label(\"maximum target-mediated rate of elimination (mg/L/d)\")\\n    lkm <- 0.01\\n    label(\"Michaelis-Menten constant (mg/L)\")\\n    lvc <- 3\\n    label(\"central volume of distribution (Vc)\")\\n    lvp <- 5\\n    label(\"Peripheral volume of distribution (Vp)\")\\n    lq <- 0.1\\n    label(\"Intercompartmental clearance (Q)\")\\n    propSd <- c(0, 0.5)\\n    label(\"Proportional residual error (fraction)\")\\n\\n  })\\n  model({\\n    ka <- exp(lka)\\n    ktr1 <- exp(lktr1)\\n    ktr2 <- exp(lktr2)\\n    ktr3 <- exp(lktr3)\\n    ktr4 <- exp(lktr4)\\n    ktr5 <- exp(lktr5)\\n    ktr6 <- exp(lktr6)\\n    ktr7 <- exp(lktr7)\\n    ktr8 <- exp(lktr8)\\n    ktr9 <- exp(lktr9)\\n    ktr10 <- exp(lktr10)\\n    km <- exp(lkm)\\n    vm <- exp(lvm)\\n    vc <- exp(lvc)\\n    vp <- exp(lvp)\\n    q <- exp(lq)\\n    k12 <- q/vc\\n    k21 <- q/vp\\n    d/dt(depot) <- -ka*depot\\n    d/dt(transit1) <- ka * depot - ktr1 * transit1\\n    d/dt(transit2) <- ktr1 * transit1 - ktr2 * transit2\\n    d/dt(transit3) <- ktr2 * transit2 - ktr3 * transit3\\n    d/dt(transit4) <- ktr3 * transit3 - ktr4 * transit4\\n    d/dt(transit5) <- ktr4 * transit4 - ktr5 * transit5\\n    d/dt(transit6) <- ktr5 * transit5 - ktr6 * transit6\\n    d/dt(transit7) <- ktr6 * transit6 - ktr7 * transit7\\n    d/dt(transit8) <- ktr7 * transit7 - ktr8 * transit8\\n    d/dt(transit9) <- ktr8 * transit8 - ktr9 * transit9\\n    d/dt(transit10) <- ktr9 * transit9 - ktr10 * transit10\\n    d/dt(central) <- ktr10 * transit10 - (vm/(km + central/vc)) * \\n      central - k12 * central + k21 * peripheral1\\n    d/dt(peripheral1) <- k12 * central - k21 * peripheral1\\n    Cc <- central/vc\\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_inhi_kin  <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kin.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- log(90) ; label(\"Central volume of distribution (Vc)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    limax <- 0.56; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    kel <- exp(lkel)\\n    IC50 <- exp(lIC50)\\n    imax <- exp(limax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -kel*central\\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin*(1-imax*Cc/(Cc + IC50)) - kout*effect\\n    Cc ~ prop(propSd)\\n  })\\n}\\n #> 12                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                indirect_1cpt_inhi_kin_CLV <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kin.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- log(90) ; label(\"Central volume of distribution (Vc)\")\\n    lcl <- 1 ; label(\"Clearance (Cl)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    limax <- 0.56; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl  <- exp(lcl)\\n    IC50 <- exp(lIC50)\\n    imax <- exp(limax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin*(1-imax*Cc/(Cc + IC50)) - kout*effect\\n   \\n    Cc ~ prop(propSd)\\n  })\\n}\\nindirect_1cpt_inhi_kin_r0rmaxcrmax <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kin.\"\\n  ini({\\n    lka     <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc     <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lcl     <- 0.85 ; label(\"Clearance (Cl)\")\\n    lr0     <- 0.2  ; label(\"Baseline response prior to drug administration (R0)\")\\n    lrmax   <- 0.9  ; label(\"Maximal response (CRmax)\")\\n    ls1     <- 1.0  ; label(\"Initial slope of the response versus time curve (S1)\")\\n    limax   <- 0.56 ; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lcrmax  <- 0.67 ; label(\"Plasma concentration of drug at the time of maximal response (CRmax)\")\\n    lfdepot <- 0.4  ; label(\"Bioavailability (F)\")\\n    propSd  <- 0.5  ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka     <- exp(lka)\\n    vc     <- exp(lvc)\\n    cl     <- exp(lcl)\\n    r0     <- exp(lr0)\\n    rmax   <- exp(lrmax)\\n    s1     <- exp(ls1)\\n    imax   <- exp(limax)\\n    crmax  <- exp(lcrmax)\\n    fdepot <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    imax <- (r0-rmax)/r0\\n    kin <- -s1/imax\\n    kout <- kin/r0\\n    IC50 <- crmax*(rmax-(1-imax)*r0)/(r0-rmax)\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin*(1-imax*Cc/(Cc + IC50)) - kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_inhi_kout  <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kout.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- log(90) ; label(\"Central volume of distribution (Vc)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    kel <- exp(lkel)\\n    IC50 <- exp(lIC50)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(cl/vc)*central\\n    \\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin - kout*(1-Cc/(Cc + IC50))*effect\\n    \\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_inhi_kout_CLV <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kout.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lcl <- 1 ; label(\"Clearance (Cl)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl  <- exp(lcl)\\n    IC50 <- exp(lIC50)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin - kout*(1-Cc/(Cc + IC50))*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_inhi_kout_r0rmaxcrmax <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kout.\"\\n  ini({\\n    lka     <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc     <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lcl     <- 0.85 ; label(\"Clearance (Cl)\")\\n    lr0     <- 0.2  ; label(\"Baseline response prior to drug administration (R0)\")\\n    lrmax   <- 0.9  ; label(\"Maximal response (CRmax)\")\\n    ls1     <- 1.0  ; label(\"Initial slope of the response versus time curve (S1)\")\\n    limax   <- 0.56 ; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lcrmax  <- 0.67 ; label(\"Plasma concentration of drug at the time of maximal response (CRmax)\")\\n    lfdepot <- 0.4  ; label(\"Bioavailability (F)\")\\n    propSd  <- 0.5  ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka     <- exp(lka)\\n    vc     <- exp(lvc)\\n    cl     <- exp(lcl)\\n    r0     <- exp(lr0)\\n    rmax   <- exp(lrmax)\\n    s1     <- exp(ls1)\\n    imax   <- exp(limax)\\n    crmax  <- exp(lcrmax)\\n    fdepot <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    imax <- (rmax-r0)/rmax\\n    kin <- s1/imax\\n    kout <- kin/r0\\n    IC50 <- crmax*(r0-(1-imax)*rmax)/(rmax-r0)\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    d/dt(effect) <- kin - kout*(1-imax*Cc/(Cc + IC50))*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_stim_kin <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kin.Parameterized using rate cosntants\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- log(90) ; label(\"Central volume of distribution (Vc)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    kel <- exp(lkel)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -kel*central\\n    \\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin*(1+Emax*Cc/(Cc + IC50)) - kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_stim_kin_CLV <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kin.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lcl <- 1 ; label(\"Clearance (Cl)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl  <- exp(lcl)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -kel*central\\n    \\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin*(1+Emax*Cc/(Cc + IC50)) - kout*effect\\n    \\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_stim_kin_r0rmaxcrmax <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kin.\"\\n  ini({\\n    lka     <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc     <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lcl     <- 0.85 ; label(\"Clearance (Cl)\")\\n    lr0     <- 0.2  ; label(\"Baseline response prior to drug administration (R0)\")\\n    lrmax   <- 0.9  ; label(\"Maximal response (CRmax)\")\\n    ls1     <- 1.0  ; label(\"Initial slope of the response versus time curve (S1)\")\\n    lemax   <- 0.56 ; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lcrmax  <- 0.67 ; label(\"Plasma concentration of drug at the time of maximal response (CRmax)\")\\n    lfdepot <- 0.4  ; label(\"Bioavailability (F)\")\\n    propSd  <- 0.5  ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka     <- exp(lka)\\n    vc     <- exp(lvc)\\n    cl     <- exp(lcl)\\n    r0     <- exp(lr0)\\n    rmax   <- exp(lrmax)\\n    s1     <- exp(ls1)\\n    emax   <- exp(lemax)\\n    crmax  <- exp(lcrmax)\\n    fdepot <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    emax <- (rmax-r0)/rmax\\n    kin <- s1/emax\\n    kout <- kin/r0\\n    IC50 <- crmax*(r0*(1+emax)-rmax)/(rmax-r0)\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    \\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin*(1+Emax*Cc/(Cc + IC50)) - kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_stim_kout <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kout.Parameterized using rate cosntants\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    \\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin - kout*(1+Emax*Cc/(Cc + EC50))*effect\\n    \\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_stim_kout_CLV <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kout.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lcl <- 1 ; label(\"Clearance (Cl)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkin <- 0.48; label(\"Zero-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl  <- exp(lcl)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    Cc <-  central/vc\\n    \\n    d/dt(effect) <- kin - kout*(1+Emax*Cc/(Cc + EC50))*effect\\n    \\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_1cpt_stim_kout_r0rmaxcrmax <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kout.\"\\n  ini({\\n    lka     <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc     <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lcl     <- 0.85 ; label(\"Clearance (Cl)\")\\n    lr0     <- 0.2  ; label(\"Baseline response prior to drug administration (R0)\")\\n    lrmax   <- 0.9  ; label(\"Maximal response (CRmax)\")\\n    ls1     <- 1.0  ; label(\"Initial slope of the response versus time curve (S1)\")\\n    lemax   <- 0.56 ; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lcrmax  <- 0.67 ; label(\"Plasma concentration of drug at the time of maximal response (CRmax)\")\\n    lfdepot <- 0.4  ; label(\"Bioavailability (F)\")\\n    propSd  <- 0.5  ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka     <- exp(lka)\\n    vc     <- exp(lvc)\\n    cl     <- exp(lcl)\\n    r0     <- exp(lr0)\\n    rmax   <- exp(lrmax)\\n    s1     <- exp(ls1)\\n    emax   <- exp(lemax)\\n    crmax  <- exp(lcrmax)\\n    fdepot <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    emax <- (r0-rmax)/rmax\\n    kin <- -s1/emax\\n    kout <- kin/r0\\n    IC50 <- crmax*(rmax*(1+emax)-r0)/(r0-rmax)\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(kel)*central\\n    Cc <-  central/vc\\n    \\n  \\n    d/dt(effect) <- kin - kout*(1+Emax*Cc/(Cc + EC50))*effect\\n    \\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_circ_1cpt_inhi_kin_kin_t  <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kin and circadian kin_t.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (Vc)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    limax <- 0.56; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    vc  <- exp(lvc)\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    imax <- exp(limax)\\n    IC50 <- exp(lIC50)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kin_t <- kout*rm+kout*ra*cos(0.2616*(t-tz))-0.2616*ra*sin(0.2616*(t-tz))\\n    Cc <-  central/vc\\n   \\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(cl/vc)*central\\n    d/dt(effect) <- kin_t*(1-imax*Cc/(Cc + IC50)) - kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_circ_1cpt_inhi_kin_kout_t  <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kin and circadian kin_t.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    limax <- 0.56; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lkin <- 0.34; label(\"Zero-order rate constant for production of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    imax <- exp(limax)\\n    IC50 <- exp(lIC50)\\n    kin  <- exp(lkin)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kout_t <- kin + 0.2616*ra*sin(0.2616*(t-tz))/(rm+ra*cos*(0.2616*(t-tz)))\\n    Cc <-  central/vc\\n    \\n    \\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(cl/vc)*central\\n    d/dt(effect) <- kin - kout_t*(1-imax*Cc/(Cc + IC50))*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_circ_1cpt_inhi_kout_kin_t  <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kout and circadian kin_t.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    limax <- 0.56; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    imax <- exp(limax)\\n    IC50 <- exp(lIC50)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kin_t <- kout*rm+kout*ra*cos(0.2616*(t-tz))-0.2616*ra*sin(0.2616*(t-tz))\\n    Cc <-  central/vc\\n    \\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(cl/vc)*central\\n    d/dt(effect) <- kin_t - kout*(1-imax*Cc/(Cc + IC50))*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_circ_1cpt_inhi_kout_kout_t  <- function() {\\n  description <- \"One compartment indirect response model with inhibition of kout and circadian kin_t.\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    limax <- 0.56; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lkin <- 0.34; label(\"Zero-order rate constant for production of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    imax <- exp(limax)\\n    IC50 <- exp(lIC50)\\n    kin <- exp(lkin)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kout_t <- kin + 0.2616*ra*sin(0.2616*(t-tz))/(rm+ra*cos*(0.2616*(t-tz)))\\n    Cc <-  central/vc\\n    \\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -(cl/vc)*central\\n    d/dt(effect) <- kin - kout_t*(1-imax*Cc/(Cc + IC50))*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_circ_1cpt_stim_kin_kin_t <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kin and circadian kin_t.Parameterized using rate cosntants\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kin_t <- kout*rm+kout*ra*cos(0.2616*(t-tz))-0.2616*ra*sin(0.2616*(t-tz))\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -kel*central\\n    d/dt(effect) <- kin_t*(1+Emax*Cc/(Cc + IC50)) - kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_circ_1cpt_stim_kin_kout_t <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kin and circadian kout_t.Parameterized using rate constants\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkin <- 0.34; label(\"Zero-order rate constant for production of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kin <- exp(lkin)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kout_t <- kin + 0.2616*ra*sin(0.2616*(t-tz))/(rm+ra*cos*(0.2616*(t-tz)))\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -kel*central\\n    d/dt(effect) <- kin*(1+Emax*Cc/(Cc + IC50)) - kout_t*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_circ_1cpt_stim_kout_kin_t <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kout and circadian kin_t.Parameterized using rate cosntants\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kout <- exp(lkout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kin_t <- kout*rm+kout*ra*cos(0.2616*(t-tz))-0.2616*ra*sin(0.2616*(t-tz))\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -kel*central\\n    d/dt(effect) <- kin_t - kout*(1+Emax*Cc/(Cc + IC50))*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n} #> 30                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   indirect_circ_1cpt_stim_kout_kout_t <- function() {\\n  description <- \"One compartment indirect response model with stimulation of kout and circadian kout_t.Parameterized using rate cosntants\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lkel <- 0.534; label(\"elimination rate (1/d)\")\\n    lrm  <- 0.62; label (\"Mean Baseline for drug response (mesor)(Rm)\")\\n    lra  <- 0.62; label (\"Amplitude of drug response (Ra)\")\\n    ltz  <- 0.62; label (\"peak time (Acrophase) (Tz)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum stimulation at effect site (EC50)\")\\n    lEmax <- 0.85; label(\"Maximum effect attributed to drug (Emax)\")\\n    lkin <- 0.34; label(\"Zero-order rate constant for production of drug response\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    kel <- exp(lkel)\\n    rm <- exp(lrm)\\n    ra <- exp(lra)\\n    tz <- exp(ltz)\\n    EC50 <- exp(lEC50)\\n    Emax <- exp(lEmax)\\n    kin <- exp(lkin)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kout_t <- kin + 0.2616*ra*sin(0.2616*(t-tz))/(rm+ra*cos*(0.2616*(t-tz)))\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot -kel*central\\n    d/dt(effect) <- kin_t - kout*(1+Emax*Cc/(Cc + IC50))*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_prec_1cpt_inhi_CLV  <- function() {\\n  description <- \"One compartment precursor-dependent indirect response model with inhibition of drug response. Parameterized with clearance and volume. (effect).\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc <- 3.45  ; label(\"Central volume of distribution (Vc)\")\\n    lcl   <- 0.04 ; label(\"Clearance (CL)\")\\n    limax <- 0.56 ; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lIC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    lkin <- 0.48; label(\"First-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lkpin <- 0.45 ; label(\"Zero order rate constant for production of precursor (kpin)\")\\n    lkpout <- 0.45 ; label(\"First order rate constant for loss of precursor (kpout)\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl <- exp(lcl)\\n    IC50 <- exp(lIC50)\\n    imax<- exp(limax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    kpin <- exp(lkpin)\\n    kpout <- exp(lkpout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot-kel*central\\n    d/dt(precursor)  <- kpin -(kin + kpout)*(1-imax*Cc/(Cc + IC50))*precursor\\n    d/dt(effect)   <- kin*(1-imax*Cc/(Cc + IC50))*precursor-kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_prec_1cpt_inhi_r0rmaxcrmax  <- function() {\\n  description <- \"One compartment precursor-dependent indirect response model with inhibition of drug response (effect).\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc <- 3.45  ; label(\"Central volume of distribution (Vc)\")\\n    lcl   <- 0.04 ; label(\"Clearance (CL)\")\\n    lr0     <- 0.2  ; label(\"Baseline response prior to drug administration (R0)\")\\n    lrmax   <- 0.9  ; label(\"Maximal response (CRmax)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lkpin <- 0.45 ; label(\"Zero order rate constant for production of precursor (kpin)\")\\n    lkpout <- 0.45 ; label(\"First order rate constant for loss of precursor (kpout)\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl <- exp(lcl)\\n    r0<- exp(lr0)\\n    rmax<- exp(lrmax)\\n    kout <- exp(lkout)\\n    kpin <- exp(lkpin)\\n    kpout <- exp(lkpout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    imax <- (r0-rmax)/r0\\n    kin <- (kout*(kin+kpout)*r0)/kpin\\n    IC50 <- crmax*(rmax-(1-imax)*r0)/(r0-rmax)\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot-kel*central\\n    d/dt(precursor)  <- kpin -(kin + kpout)*(1-imax*Cc/(Cc + IC50))*precursor\\n    d/dt(effect)   <- kin*(1-imax*Cc/(Cc + IC50))*precursor-kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_prec_1cpt_stim_CLV  <- function() {\\n  description <- \"One compartment precursor-dependent indirect response model with inhibition of drug response (effect). Parameterized with clearance and volume\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc <- 3.45  ; label(\"Central volume of distribution (Vc)\")\\n    lcl <- 0.534; label(\"clearance (CL)\")\\n    lemax <- 0.56 ; label(\"Maximum inhibitory factor attributed to drug (Imax)\")\\n    lEC50 <- 0.67; label(\"Drug concentration producing 50% of maximum inhibition at effect site (IC50)\")\\n    lkin <- 0.48; label(\"First-order rate constant for production of drug response(1/d)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lkpin <- 0.45 ; label(\"Zero order rate constant for production of precursor (kpin)\")\\n    lkpout <- 0.45 ; label(\"First order rate constant for loss of precursor (kpout)\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl <- exp(lcl)\\n    EC50 <- exp(lEC50)\\n    emax<- exp(lemax)\\n    kin <- exp(lkin)\\n    kout <- exp(lkout)\\n    kpin <- exp(lkpin)\\n    kpout <- exp(lkpout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot-kel*central\\n    d/dt(precursor)  <- kpin -(kin + kpout)*(1+emax*Cc/(Cc + EC50))*precursor\\n    d/dt(effect)   <- kin*(1+emax*Cc/(Cc + EC50))*precursor-kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}indirect_prec_1cpt_stim_r0rmaxcrmax <- function() {\\n  description <- \"One compartment precursor-dependent indirect response model with inhibition of drug response (effect). Parameterized with clearance and volume\"\\n  ini({\\n    lka  <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lvc <- 3.45  ; label(\"Central volume of distribution (Vc)\")\\n    lcl <- 0.534; label(\"clearance (CL)\")\\n    lr0     <- 0.2  ; label(\"Baseline response prior to drug administration (R0)\")\\n    lrmax   <- 0.9  ; label(\"Maximal response (CRmax)\")\\n    lkout <- 0.34; label(\"First-order rate constant for loss of drug response\")\\n    lkpin <- 0.45 ; label(\"Zero order rate constant for production of precursor (kpin)\")\\n    lkpout <- 0.45 ; label(\"First order rate constant for loss of precursor (kpout)\")\\n    lfdepot <- 0.4; label(\"Bioavailability (F)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka  <- exp(lka)\\n    vc  <- exp(lvc)\\n    cl <- exp(lcl)\\n    r0<- exp(lr0)\\n    rmax<- exp(lrmax)\\n    kout <- exp(lkout)\\n    kpin <- exp(lkpin)\\n    kpout <- exp(lkpout)\\n    fdepot   <- exp(lfdepot)\\n    \\n    kel <- cl/vc\\n    emax <- (rmax-r0)/rmax\\n    kin <- (kout*(kin+kpout)*r0)/kpin\\n    EC50 <- crmax*(r0*(1+emax)-rmax)/(rmax-r0)\\n    Cc <-  central/vc\\n    \\n    d/dt(depot)      <- -ka*depot\\n    f(depot)         <- fdepot\\n    d/dt(central)    <- ka*depot-kel*central\\n    d/dt(precursor)  <- kpin -(kin + kpout)*(1+emax*Cc/(Cc + EC50))*precursor\\n    d/dt(effect)   <- kin*(1+emax*Cc/(Cc + EC50))*precursor-kout*effect\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}cmt_mAb_Davda_2014 <- function() {\\n  description <- \"Two compartment PK model with linear clearance for average monoclonal antibodies (Davda 2014)\"\\n  reference <- \"Davda JP, Dodds MG, Gibbs MA, Wisdom W, Gibbs JP. A model-based meta-analysis of monoclonal antibody pharmacokinetics to guide optimal first-in-human study design. MAbs. 2014;6(4):1094-1102. doi:10.4161/mabs.29095\"\\n  units = list(time = \"day\", dosing = \"mg\")\\n  ini({\\n    lfdepot <- log(0.744) ; label(\"Subcutaneous bioavailability (fraction)\")\\n    lka <- log(0.282) ; label(\"Absorption rate (Ka, 1/day)\")\\n    lcl <- log(0.200) ; label(\"Clearance (CL, L/day)\")\\n    lv  <- log(3.61) ; label(\"Central volume of distribution (V, L)\")\\n    lvp  <- log(2.75) ; label(\"Peripheral volume of distribution (Vp, L)\")\\n    lq  <- log(0.747) ; label(\"Intercompartmental clearance (Q, L/day)\")\\n\\n    allocl <- 0.865 ; label(\"Allometric exponent on clearance and intercompartmental clearance (unitless)\")\\n    allov <- 0.957 ; label(\"Allometric exponent on volumes of distribution (unitless)\")\\n\\n    etafdepot ~ 0\\n    etaka ~ 0.416\\n    etacl + etav + etavp ~ c(0.0987,\\n                             0.0786, 0.116,\\n                             0.0377, 0.0619, 0.0789)\\n    etaq ~ 0.699\\n\\n    prop.err <- 0.144 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    # WT is body weight in kg\\n    fdepot <- exp(lfdepot + etafdepot)\\n    ka <- exp(lka + etaka)\\n    wtnorm <- log(WT/70)\\n    cl <- exp(lcl + allocl*wtnorm + etacl)\\n    q  <- exp(lq + allocl*wtnorm + etaq)\\n    v <- exp(lv + allov*wtnorm + etav)\\n    vp <- exp(lvp + allov*wtnorm + etavp)\\n\\n    Cc <- linCmt()\\n    \\n    f(depot) <- fdepot  # Units are dosing units/L (typically mg/L = ug/mL)\\n    Cc ~ prop(prop.err)\\n  })\\n} #> 36                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          PK_double_sim_01 <- function() {\\n  description <- \"PK double absorption model with simultaneous zero order and first order absorptions\"\\n  ini({\\n    tk01 <- 0.4 ; label(\"Zero order absorption rate from first site (K01)\")\\n    lka2 <- 0.45 ; label(\"First order Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n    lgfdepot1 <- logit(0.8);\\n    lalag <- log (9); \\n  })\\n  model({\\n    k01 <- exp(tk01)\\n    ka2 <- exp(lka2)\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    fdepot1 <- expit(lgfdepot1)\\n    alag <- exp(lalag)\\n    \\n    kel <- cl/vc\\n    \\n    d/dt(depot1) <- -k01\\n    f(depot1) <- fdepot1\\n    d/dt(depot2) <- -ka2*depot2\\n    lag(depot2) <- alag\\n    f(depot2) <- 1-fdepot1\\n    d/dt(central) <-  k01+ka2*depot2-kel*central \\n    \\n    Cc <- central / vc\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}double_sim_10 <- function() {\\n  description <-  \"PK double absorption model with simultaneous first order and zero order absorptions\"\\n  ini({\\n    lka1 <- 0.45 ; label(\"First order Absorption rate (Ka)\")\\n    tk02 <- 0.4 ; label(\"Zero order absorption rate from second site (K02)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n    lgfdepot1 <- logit(0.8);\\n    lalag <- log (9); \\n  })\\n  model({\\n    ka1 <- exp(lka1)\\n    k02 <- exp(tk02)\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    fdepot1 <- expit(lgfdepot1)\\n    alag <- exp(lalag)\\n    \\n    kel <- cl/vc\\n    \\n    d/dt(depot1) <- -ka1*depot1\\n    f(depot1) <- fdepot1\\n    d/dt(depot2) <- -k02\\n    lag(depot2) <- alag\\n    f(depot2) <- 1-fdepot1\\n    d/dt(central) <-  ka1*depot1+ k02- kel*central \\n    \\n    Cc <- central / vc\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}double_sim_11 <- function() {\\n  description <- \"PK double absorption model with simultaneous first order absorptions\"\\n  ini({\\n    lka1 <- 0.45 ; label(\"First order Absorption rate from first site (Ka)\")\\n    lka2 <- 0.45 ; label(\"First order Absorption rate from second site (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3 ; label(\"Central volume of distribution (V)\")\\n    propSd <- 0.5 ; label(\"Proportional residual error (fraction)\")\\n    lgfdepot1 <- logit(0.7);\\n    lalag <- log (9); \\n  })\\n  model({\\n    ka1 <- exp(lka1)\\n    ka2 <- exp(lka2)\\n    cl <- exp(lcl)\\n    vc <- exp(lvc)\\n    fdepot1 <- expit(lgfdepot1)\\n    alag <- exp(lalag)\\n    \\n    kel <- cl/vc\\n    \\n    d/dt(depot1) <- -ka1*depot1\\n    f(depot1) <- fdepot1\\n    d/dt(depot2) <- -ka2*depot2\\n    lag(depot2) <- alag\\n    f(depot2) <- 1-fdepot1\\n    d/dt(central) <-  ka1*depot1+ka2*depot2 - kel*central \\n    \\n    Cc <- central / vc\\n    \\n    Cc ~ prop(propSd)\\n  })\\n}\\n\\n\\n #> 39                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                CarlssonPetri_2021_liraglutide <- function() {\\n  description <- \"Liraglutide PK model in adolescents (Carlsson Petri 2021)\"\\n  reference <- \"Carlsson Petri KC, Hale PM, Hesse D, Rathor N, Mastrandrea LD. Liraglutide pharmacokinetics and exposure-response in adolescents with obesity. Pediatric Obesity. 2021;16(10):e12799. doi:10.1111/ijpo.12799\"\\n  units <-list(time=\"hr\", dosing=\"mg\")\\n  covariateData <-\\n    list(\\n      WT = \"Baseline body weight in kg\",\\n      CHILD = \"Is the subject a child? (1 for yes, 0 for no)\",\\n      ADOLESCENT = \"Is the subject an adolescent? (1 for yes, 0 for no)\",\\n      SEXM = \"1 for male, 0 for female\"\\n    )\\n  ini({\\n    lka <- fixed(log(0.0813)) ; label(\"Absorption rate (1/hr)\")\\n    lcl <- log(1.01) ; label(\"Apparent clearance (L/h)\")\\n    e_wt_cl <- 0.762; label(\"Body weight exponent on CL/F\")\\n    e_sex_cl <- 1.12; label(\"Sex contrast (male/female) on CL/F\")\\n    e_age_child_cl <- 1.11; label(\"Age contrast (child/adult) on CL/F\")\\n    e_age_adolescent_cl <- 1.06; label(\"Age contrast (adolescent/adult) on CL/F\")\\n    lvc  <- fixed(log(13.8)) ; label(\"Apparent central volume of distribution (L)\")\\n    e_wt_vc <- 0.587; label(\"Body weight exponent on Vc/F\")\\n    \\n    etalcl ~ log(1.312)\\n    etalvc ~ log(1.317)\\n    propSd <- 0.433 ; label(\"Proportional residual error (fraction)\")\\n  })\\n  model({\\n    ka <- exp(lka)\\n    cl_wt <- (WT/100)^e_wt_cl # Equation 2 in the paper\\n    cl_sex <- SEXM^e_sex_cl # Equation 3 in the paper\\n    cl_age <- CHILD^e_age_child_cl * ADOLESCENT^e_age_adolescent_cl # Equation 4 in the paper\\n    cl <- exp(lcl + etalcl)*cl_wt*cl_sex*cl_age # Equation 1 in the paper\\n    vc_wt <- (WT/100)^e_wt_vc # Not in the paper, based on Equation 2 in the paper\\n    vc  <- exp(lvc + etalvc)*vc_wt # Equation 5 in the paper\\n    \\n    Cc <- linCmt()\\n    Cc ~ prop(propSd)\\n  })\\n}irincione_2017_exenatide <- function() {\\n  description <- \"Exenatide immediate-release PK model (Cirincione 2017)\"\\n  reference <- \"Cirincione B, Mager DE. Population pharmacokinetics of exenatide. British Journal of Clinical Pharmacology. 2017;83(3):517-526. doi:10.1111/bcp.13135\"\\n  covariateData <-\\n    list(\\n      AMT = \"Dose (ug)\",\\n      DV = \"Exenatide plasma concentration (pg/mL)\",\\n      eGFR = \"Modification of Diet in Renal Disease estimate of glomerular filtration rate (mL/min/(1.73m^2))\",\\n      WT = \"Baseline body weight (kg)\",\\n      DVID = \"Was the subject in Study 1 ('study1'), Study 5 ('study5'), or another study ('otherStudy')?  Typically 'otherStudy'\"\\n    )\\n  # parameters are from Table 2 in the paper\\n  ini({\\n    lcl <- log(4.58) ; label(\"Linear clearance rate (L/hr)\")\\n    etalcl ~ log(1.339)\\n    e_cl_gfr <- 0.838; label(\"Effect of eGFR on clearance (unitless)\")\\n\\n    lq <- log(3.72); label(\"Intercompartmental clearance (L/hr)\") # written as Cld in the model table\\n\\n    lkm <- log(567); label(\"Michaelis-Menten constant for clearance (pg/mL)\")\\n    etalkm ~ log(1.957)\\n\\n    lvmax <- log(1.55); label(\"Maximum Michaelis-Menten clearance (ug/hr)\")\\n\\n    lvp <- log(7.04); label(\"Peripheral compartment volume (L)\")\\n\\n    lvc <- log(7.03); label(\"Typical central compartment clearance (L)\")\\n    etalvc ~ log(1.805)\\n    e_vc_wt <- 2.67; label(\"Effect of body weight on central volume (unitless)\")\\n\\n    lkamax <- log(0.0813); label(\"Maximum first-order absorption rate (1/hr)\")\\n    lkmka <- log(16.9); label(\"Michaelis-Menten constant for absorption (ug)\")\\n    ttau <- fixed(1.35); label(\"Duration of zero-order absorption\")\\n    fdepot <- fixed(1); label(\"Bioavailability (fraction)\")\\n    logitfr <- logit(0.628); label(\"Fraction of dose with first-order absorption\")\\n\\n    expSdOther <- 0.373 ; label(\"Exponential residual error for all other studies\")\\n    expSdStudy1 <- 0.39 ; label(\"Exponential residual error for Study 1\")\\n    expSdStudy5 <- 0.08 ; label(\"Exponential residual error for Study 5\")\\n  })\\n  model({\\n    # declare compartment order\\n    cmt(depot)\\n    cmt(central)\\n    cmt(peripheral1)\\n    # cl equation is from table 2 in the paper\\n    cl <- exp(lcl + etalcl)*(eGFR/80)^e_cl_gfr\\n    q <- exp(lq)\\n    km <- exp(lkm + etalkm)\\n    vmax <- exp(lvmax)\\n    vp <- exp(lvp)\\n    # vc equation is from table 2 in the paper\\n    vc  <- exp(lvc + etalvc)*(WT/84.8)^e_vc_wt\\n    kamax <- exp(lkamax)\\n    kmka <- exp(lkmka)\\n    fr <- expit(logitfr)\\n\\n    kel <- cl/vc + vmax/(km*vc + central)\\n    k12 <- q/vc\\n    k21 <- q/vp\\n\\n    # Need to turn k0 off at time > tau\\n    mtime(tau) <- ttau\\n\\n    kzero <- (1-fr)*podo(depot)/tau\\n    if (tad(depot) > tau) kzero <- 0.0\\n\\n    # Need to turn ka on at time > tau\\n    ka <- fr*kamax/(kmka + depot)\\n    if (tad(depot) <= tau) ka <- 0.0\\n\\n    d/dt(depot) <-  -ka*depot - kzero\\n    d/dt(central) <- ka*depot + kzero - kel*central - k12*central + k21*peripheral1\\n    d/dt(peripheral1) <-                              k12*central - k21*peripheral1\\n    f(depot) <- fdepot\\n\\n    cp <- central/vc\\n\\n    cp1 <- cp\\n    cp5 <- cp\\n    \\n    cp ~ lnorm(expSdOther) | otherStudy\\n    cp1 ~ lnorm(expSdStudy1) | study1\\n    cp5 ~ lnorm(expSdStudy5) | study5\\n  })\\n}ovalenko_2020_dupilumab <- function() {\\n  description <- \"Dupilumab PK model (Kovalenko 2020)\"\\n  reference <- \"Kovalenko P, Davis JD, Li M, et al. Base and Covariate Population Pharmacokinetic Analyses of Dupilumab Using Phase 3 Data. Clinical Pharmacology in Drug Development. 2020;9(6):756-767. doi:10.1002/cpdd.780\"\\n  units<-list(time=\"day\", dosing=\"mg\")\\n  # Model 1 from table 1 and supplementary Table 2 in the publication and its\\n  # supplement.\\n  covariateData <-\\n    list(\\n      WT = \"Body weight in kg\"\\n    )\\n  ini({\\n    lvc <- log(2.48); label(\"central volume (L)\")\\n    lke <- log(0.0534); label(\"elimination rate (1/d)\")\\n    lkcp <- log(0.213); label(\"central-to-peripheral rate (1/d)\")\\n    Mpc <- 0.686; label(\"ratio of kcp and kpc (kpc is peripheral to central rate with units of 1/d)\")\\n    lka <- log(0.256); label(\"absorption rate (1/d)\")\\n    lMTT <- log(0.105); label(\"mean transit time (d)\")\\n    lVm <- log(1.07); label(\"maximum target-mediated rate of elimination (mg/L/d)\")\\n    Km <- fixed(0.01); label(\"Michaelis-Menten constant (mg/L)\")\\n    lfdepot <- log(0.643); label(\"Bioavailability (fraction)\")\\n    e_wt_vc <- 0.711; label(\"Exponent of weight on central volume (unitless)\")\\n\\n    etalvc ~ 0.192\\n    etalke ~ 0.285\\n    etalka ~ 0.474\\n    etalvm ~ 0.236\\n    etamtt ~ 0.525 # etamtt is assumed to be on log-scale MTT to prevent negative values; this is a difference relative to Supplementary Table 2\\n\\n    CcpropSd <- 0.15; label(\"Proportional residual error (fraction)\")\\n    CcaddSd <- fixed(0.03); label(\"Additive residual error (mg/L)\")\\n  })\\n  model({\\n    # Weight normalization to 75 kg is assumed based on prior publication.  It\\n    # is not specified in the current publication:\\n    # Kovalenko P, DiCioccio AT, Davis JD, et al. Exploratory Population PK\\n    # Analysis of Dupilumab, a Fully Human Monoclonal Antibody Against\\n    # IL-4Ralpha, in Atopic Dermatitis Patients and Normal Volunteers. CPT\\n    # Pharmacometrics Syst Pharmacol. 2016;5(11):617-624. doi:10.1002/psp4.12136\\n    vc <- exp(lvc + etalvc)*(WT/75)^e_wt_vc\\n    ke <- exp(lke + etalke)\\n    kcp <- exp(lkcp)\\n    ka <- exp(lka + etalka)\\n    MTT <- exp(lMTT + etamtt)\\n    Vm <- exp(lVm + etalvm)\\n\\n    # Derived parameters\\n    kpc <- kcp/Mpc\\n    ktr <- (3 + 1)/MTT\\n\\n    d/dt(depot) <- -ktr*depot\\n    d/dt(transit1) <- ktr*(depot - transit1)\\n    d/dt(transit2) <- ktr*(transit1 - transit2)\\n    d/dt(transit3) <- ktr*transit2 - ka*transit3\\n    # Linear and Michaelis-Menten clearance\\n    d/dt(central) <-                 ka*transit3 - ke*central - kcp*central + kpc*periph - central*(Vm/(Km + central/vc))\\n    d/dt(periph) <-                                             kcp*central - kpc*periph\\n\\n    f(depot) <- exp(lfdepot)\\n    # No unit conversion is required to change mg/L (dosing amount/central\\n    # volume unit) to mg/L (measurement unit)\\n    Cc <- central/vc\\n    Cc ~ add(CcaddSd) + prop(CcpropSd)\\n  })\\n}oehoel_2022_tralokinumab <- function() {\\n  description <- \"Tralokinumab PK model (Soehoel 2022)\"\\n  reference <- \"Soehoel A, Larsen MS, Timmermann S. Population Pharmacokinetics of Tralokinumab in Adult Subjects With Moderate to Severe Atopic Dermatitis. Clinical Pharmacology in Drug Development. 2022;11(8):910-921. doi:10.1002/cpdd.1113\"\\n  units<-list(time=\"day\",dosing=\"mg\") \\n  # From Table 2 footnotes\\n  covariateData <-\\n    list(\\n      nonECZTRA = \"1 = any study other than ECZTRA; 0 = ECZTRA study\",\\n      WT = \"Body weight in kg\",\\n      dilution = \"Was the drug diluted as it was in study D2213C00001? 1 = yes, 0 = no (0 is typical)\"\\n    )\\n  ini({\\n    lka <- log(0.184); label(\"Absorption rate (1/day)\")\\n    lvc <- log(2.71); label(\"Central volume of distribution (L)\")\\n    lcl <- log(0.149); label(\"Clearance (L/day)\")\\n    lvp <- log(1.44); label(\"Peripheral volume of distribution (L)\")\\n    lq <- log(0.159); label(\"Intercompartmental clearance (L/day)\")\\n    lfdepot <- log(0.761); label(\"Subcutaneous bioavailability (fraction)\")\\n    CcaddSd <- 0.238; label(\"Additive residual error (ug/mL)\")\\n    CcpropSd <- 0.216; label(\"Proportional residual error (fraction)\")\\n\\n    e_wt_vcvp <- 0.793; label(\"Effect of body weight on central and peripheral volumes (unitless)\")\\n    e_wt_clq <- 0.873; label(\"Effect of body weight on clearance and intercompartmental clearance (unitless)\")\\n    e_nonECZTRA_cl <- 0.344; label(\"Effect of non-ECZTRA trials on clearance (unitless)\")\\n    e_nonECZTRA_vc <- 0.258; label(\"Effect of non-ECZTRA trials on central volume (unitless)\")\\n    e_f_dilution <- 0.354; label(\"Effect of dilution on bioavailability (unitless)\")\\n    e_ka_dilution <- -0.519; label(\"Effect of dilution trials on absorption rate (unitless)\")\\n\\n    etavc + etacl ~ c(0.386148, 0.2683494, 0.3057157)\\n  })\\n  model({\\n    fdepot <- exp(lfdepot)*(1 + e_f_dilution*dilution)\\n    ka <- exp(lka)*(1 + e_ka_dilution*dilution)\\n    cl <- exp(lcl + etacl)*(WT/75)^e_wt_clq * (1 + e_nonECZTRA_cl*nonECZTRA)\\n    vc <- exp(lvc + etavc)*(WT/75)^e_wt_vcvp * (1 + e_nonECZTRA_vc*nonECZTRA)\\n    q <- exp(lq)*(WT/75)^e_wt_clq\\n    vp <- exp(lvp)*(WT/75)^e_wt_vcvp\\n\\n    # No unit conversion is required to change mg/L (dosing amount/central\\n    # volume unit) to ug/mL (measurement unit)\\n    Cc <- linCmt()\\n    f(depot) <- fdepot\\n    Cc ~ add(CcaddSd) + prop(CcpropSd)\\n  })\\n}\\n\\n# etavc, etacl, and the covariance were calculated from the Table 2 footnotes\\n# as:\\n# etavc: sqrt(log(0.313^2 + 1)) = 0.386148\\n# etacl: sqrt(log(0.401^2 + 1)) = 0.3057157\\n# cov(etavc, etacl): sqrt(0.61*0.386148*0.3057157) #> 43 Zhu_2017_lebrikizumab <- function() {\\n  description <- \"Lebrikizumab PK model (Zhu 2017)\"\\n  reference <- \"Zhu R, Zheng Y, Dirks NL, et al. Model-based clinical pharmacology profiling and exposure-response relationships of the efficacy and biomarker of lebrikizumab in patients with moderate-to-severe asthma. Pulmonary Pharmacology & Therapeutics. 2017;46:88-98. doi:10.1016/j.pupt.2017.08.010\"\\n  units <- list(time=\"day\", dosing=\"mg\")\\n  covariateData <-\\n    list(\\n      WT = \"Baseline body weight in kg\",\\n      AGE = \"Age in years\",\\n      SEXF = \"1 for female, 0 for male\",\\n      FORM_NS0 = \"Is the formulation NS0? 1 for yes, 0 for no (typically no)\",\\n      FORM_CHO_PHASE2 = \"Is the formulation CHO from Phase 2? 1 for yes, 0 for no (typically no)\",\\n      ADA = \"Is the subject ADA positive ever? 1 for yes, 0 for no\",\\n      RACE_BLACK = \"Is the race of the subject black or African American? 1 for yes, 0 for no\",\\n      RACE_ASIAN = \"Is the race of the subject Asian? 1 for yes, 0 for no\",\\n      RACE_OTHER = \"Is the race of the subject 'other'? 1 for yes, 0 for no\"\\n    )\\n  ini({\\n    lcl <- log(0.156); label(\"Clearance (L/day)\")\\n    lvc <- log(4.10); label(\"Central volume of distribution (L)\")\\n    lvp <- log(1.45); label(\"Peripheral volume of distribution (L)\")\\n    lq <- log(0.284); label(\"Intercompartmental clearance (L/day)\")\\n    lka <- log(0.239); label(\"Absorption rate (1/day)\")\\n    lfdepot <- log(0.856); label(\"Subcutaneous bioavailability (fraction)\")\\n\\n    e_cl_wt <- 1.00; label(\"Effect of body weight on clearance (unitless)\")\\n    e_vc_wt <- 0.814; label(\"Effect of body weight on central volume (unitless)\")\\n    e_vp_wt <- 0.692; label(\"Effect of body weight on peripheral volume (unitless)\")\\n    e_q_wt <- 0.479; label(\"Effect of body weight on intercompartmentl clearance (unitless)\")\\n    e_cl_age <- 0.0241; label(\"Effect of age on clearance (unitless)\")\\n    e_cl_sexf <- 1.06; label(\"Effect of sex on clearance (unitless)\")\\n    e_cl_race_black <- 1.07; label(\"Effect of race (black or African American) on clearance (unitless)\")\\n    e_cl_race_asian <- 1.09; label(\"Effect of race (Asian) on clearance (unitless)\")\\n    e_cl_race_other <- 1.11; label(\"Effect of race (other) on clearance (unitless)\")\\n    e_ka_form_nso <- 0.981; label(\"Effect of NSO formulation on absorption rate (unitless)\")\\n    e_ka_form_cho_phase2 <- 0.989; label(\"Effect of CHO formulation used during Phase 2 on absorption rate (unitless)\")\\n    e_f_form_nso <- 1.00; label(\"Effect of NSO formulation on bioavailability (unitless)\")\\n    e_f_form_cho_phase2 <- 0.973; label(\"Effect of CHO formulation used during Phase 2 on bioavailability (unitless)\")\\n    e_cl_ada_positive<- 1.04; label(\"Effect of anti-drug antibody (ADA) positivity on clearance (unitless)\")\\n\\n    # converted from covariance matrix reported in Table 3\\n    etacl + etavc + etaka ~\\n      c(\\n        0.32403703,\\n        0.28844410, 0.35213634,\\n        0.04505552, 0.06625708, 0.39242834\\n      )\\n\\n    CcpropSd <- 0.0490; label(\"Proportional residual error (fraction)\")\\n    CcaddSd <- 0.00154; label(\"Additive residual error (ug/mL)\")\\n  })\\n  model({\\n    # Normalized continuous covariate values based on footnote to Table 3\\n    WTNORM <- WT/70\\n    AGENORM <- AGE/40\\n\\n    cl <-\\n      exp(lcl + etacl) *\\n      WTNORM^e_cl_wt * AGENORM^e_cl_age * e_cl_sexf^SEXF *\\n      e_cl_race_black^RACE_BLACK * e_cl_race_asian^RACE_ASIAN * e_cl_race_other^RACE_OTHER *\\n      e_cl_ada_positive^ADA\\n    vc <- exp(lvc + etavc) * WTNORM^e_vc_wt\\n    vp <- exp(lvp) * WTNORM^e_vp_wt\\n    q <- exp(lq) * WTNORM^e_q_wt\\n    ka <- exp(lka + etaka) * e_ka_form_nso^FORM_NSO * e_ka_form_cho_phase2^FORM_CHO_PHASE2\\n    fdepot <- exp(lfdepot) * e_f_form_nso^FORM_NSO * e_f_form_cho_phase2^FORM_CHO_PHASE2\\n    Cc <- linCmt()\\n    f(depot) <- fdepot\\n    Cc ~ add(CcaddSd) + prop(CcpropSd)\\n  })\\n} #> 44                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    oncology_sdm_lobo_2002 <- function() {\\n  description <- \"Signal transduction model for delayed concentration effects on cancer cell growth\"\\n  reference <- \"Lobo ED, Balthasar JP. Pharmacodynamic modeling of chemotherapeutic effects: Application of a transit compartment model to characterize methotrexate effects in vitro. AAPS J. 2002;4(4):212-222. doi:10.1208/ps040442\"\\n  depends<-\"Cc\"\\n  units<-list(time=\"hr\")\\n  # Values for lkng, ltau, lec50, and kmax are for methotrexate from Lobo 2002,\\n  # Table 2.  propErr and addErr are added as reasonable values though not from\\n  # Lobo 2002 where no value is apparent in the paper.\\n  ini({\\n    lkng <- log(0.02) ; label(\"Cell net growth rate (growth minus death) (1/hr)\")\\n    ltau <- log(34.1) ; label(\"Mean transit time of each transit compartment (hr)\")\\n    lec50 <- log(0.1) ; label(\"Drug concentration reducing the cell growth by 50% (ug/mL)\")\\n    kmax <- 0.29 ; label(\"Maximum drug-related reduction in cell growth (1/hr)\")\\n\\n    tumorVolpropSd <- c(0, 0.3) ; label(\"Proportional residual error (fraction)\")\\n    tumorVoladdSd <- c(0, 50, 1000) ; label(\"Additive residual error (tumor volume units)\")\\n  })\\n  model({\\n    # Cc is the drug concentration\\n    kng <- exp(lkng)\\n    tau <- exp(ltau)\\n    ec50 <- exp(lec50)\\n\\n    drugEffectTumorVol <- kmax*Cc/(ec50 + Cc)\\n\\n    tumorVol(0) <- tumorVol0\\n    d/dt(tumorVol) <- kng*tumorVol - transit4*tumorVol\\n    d/dt(transit1) <- (drugEffectTumorVol - transit1)/tau\\n    d/dt(transit2) <- (transit1 - transit2)/tau\\n    d/dt(transit3) <- (transit2 - transit3)/tau\\n    d/dt(transit4) <- (transit3 - transit4)/tau\\n    tumorVol ~ prop(tumorVolpropSd) + add(tumorVoladdSd)\\n  })\\n}oncology_xenograft_simeoni_2004 <- function() {\\n  description <- \"Oncology tumor growth model in xenograft models\"\\n  reference <- \"Monica Simeoni, Paolo Magni, Cristiano Cammia, Giuseppe De Nicolao, Valter Croci, Enrico Pesenti, Massimiliano Germani, Italo Poggesi, Maurizio Rocchetti; Predictive Pharmacokinetic-Pharmacodynamic Modeling of Tumor Growth Kinetics in Xenograft Models after Administration of Anticancer Agents. Cancer Res 1 February 2004; 64 (3): 1094–1101. https://doi.org/10.1158/0008-5472.CAN-03-2524\"\\n  depends<- \"Cc\"\\n  units<-list(time=\"day\")\\n  # Values for damageTransit (k1), drugSlope (k2), tumorExpGrowth (lambda0),\\n  # tumorLinGrowth (lambda1) are from paclitaxel experiment 1 reported in Table\\n  # 2 from the reference (limits are not from the reference). The values from\\n  # Table 2 will be estimated on the log scale to ensure positive values.\\n  # Residual errors are not in the original reference.\\n  ini({\\n    ldamageTransit <- log(c(0.1, 0.968, 10)) ; label(\"Transit rate through damage (1/day)\")\\n    ldrugSlope <- log(c(0.00001, 0.000629, 0.1)) ; label(\"Linear drug effect on cycling cells (1/(day*ng/mL))\")\\n    ltumorExpGrowth <- log(c(0.001, 0.273, 2)) ; label(\"Tumor exponential growth rate (1/day)\")\\n    ltumorLinGrowth <- log(c(0.01, 0.814, 5)) ; label(\"Tumor linear growth rate (tumor volume/day)\")\\n    tumorVolpropSd <- 0.2 ; label(\"Proportional residual error (fraction)\")\\n    tumorVoladdSd <- 30 ; label(\"Additive residual error (tumor volume)\")\\n  })\\n  model({\\n    damageTransit <- exp(ldamageTransit)\\n    drugSlope <- exp(ldrugSlope)\\n    tumorExpGrowth <- exp(ltumorExpGrowth)\\n    tumorLinGrowth <- exp(ltumorLinGrowth)\\n\\n    # tumorVol0 is provided in the data as the initial volume of the tumor.  It\\n    # can also be estimated.\\n    cyclingCells(0) <- tumorVol0\\n    psi <- 20 # psi is defined in the paper to cause a rapid switch between exponential and linear regimes\\n    tumorVol <- cyclingCells + damagedCells1 + damagedCells2 + damagedCells3\\n    # Cc is provided in the data (or in an appended model) as the drug\\n    # concentration.  Units for Cc will be apply to k2.\\n    drugEffectCyclingCells <- drugSlope*Cc\\n    d/dt(cyclingCells) <- tumorExpGrowth*cyclingCells/(1 + (tumorExpGrowth/tumorLinGrowth * tumorVol)^psi)^(1/psi) - drugEffectCyclingCells*cyclingCells\\n    d/dt(damagedCells1) <- drugEffectCyclingCells*cyclingCells - damageTransit*damagedCells1\\n    d/dt(damagedCells2) <- damageTransit*(damagedCells1 - damagedCells2)\\n    d/dt(damagedCells3) <- damageTransit*(damagedCells2 - damagedCells3)\\n    tumorVol ~ prop(tumorVolpropSd) + add(tumorVoladdSd)\\n  })\\n}\\n\\nattr(oncology_xenograft_simeoni_2004, \"message\") <- \"You can modify the number of damaged cell compartments in the model using the function updateOncologyXenograftSimeoni2004(model, ncmt)\"\\noncology_xenograft_simeonitgi_no_sat_Koch <- function() {\\n  description <- \"One compartment TGI model with with exponential tumor growth, without saturation.\"\\n  ini({\\n    lts0 <- 0.8; label(\"Initial tumor size (TS0)\")\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    lkgl <- 0.7; label(\"Zero-order linear growth rate\")\\n    lkge <- 0.7; label(\"First-order exponential growth rate\")\\n    CcpropSd <- 0.5 ; label(\"PK proportional residual error (fraction)\")\\n    tumorSizepropSd <- 0.5 ; label(\"Tumor size proportional residual error (fraction)\")\\n    tumorSizeaddSd <- 30 ; label(\"Tumor size additive residual error (tumor volume)\")\\n  })\\n  model({\\n    ts0 <- exp(lts0)\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n    kge <- exp(lkge)\\n    kgl <- exp(lkgl)\\n    \\n    kel <- cl / vc\\n    tumorSize(0) <- ts0\\n    \\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n    d/dt(tumorSize) <- (2*kge*kgl*tumorSize)/(kgl+2*kge*tumorSize)\\n    \\n    Cc <- central / vc\\n    Cc ~ prop(CcpropSd)\\n    tumorSize ~ prop(tumorSizepropSd) + add(tumorSizeaddSd)\\n  })\\n}tgi_no_sat_expo <- function() {\\n  description <- \"One compartment TGI model with with exponential tumor growth, without saturation.\"\\n  ini({\\n    lts0 <- 0.8; label(\"Initial tumor size (TS0)\") \\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    lkge <- 0.7; label(\"FIrst-order exponential growth rate\")\\n    CcpropSd <- 0.5 ; label(\"PK proportional residual error (fraction)\")\\n    tumorSizepropSd <- 0.5 ; label(\"Tumor size proportional residual error (fraction)\")\\n    tumorSizeaddSd <- 30 ; label(\"Tumor size additive residual error (tumor volume)\")\\n  })\\n  model({\\n    ts0 <- exp(lts0)\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n    kge <- exp(lkge)\\n    \\n    kel <- cl / vc\\n    tumorSize(0) <- ts0\\n    \\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n    d/dt(tumorSize) <- kge*tumorSize\\n    \\n    Cc <- central / vc\\n    Cc ~ prop(CcpropSd)\\n    tumorSize ~ prop(tumorSizepropSd) + add(tumorSizeaddSd)\\n  })\\n}tgi_no_sat_linear <- function() {\\n  description <- \"One compartment TGI model with with linear tumor growth, without saturation.\"\\n  ini({\\n    lts0 <- 0.8; label(\"Initial tumor size (TS0)\") \\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    lkgl <- 0.7; label(\"Zero-order linear growth rate\")\\n    CcpropSd <- 0.5 ; label(\"PK proportional residual error (fraction)\")\\n    tumorSizepropSd <- 0.5 ; label(\"Tumor size proportional residual error (fraction)\")\\n    tumorSizeaddSd <- 30 ; label(\"Tumor size additive residual error (tumor volume)\")\\n  })\\n  model({\\n    ts0 <- exp(lts0)\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n    kgl <- exp(lkgl)\\n    \\n    kel <- cl / vc\\n    tumorSize(0) <- ts0\\n    \\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n    d/dt(tumorSize) <- kgl\\n    \\n    Cc <- central / vc\\n    Cc ~ prop(CcpropSd)\\n    tumorSize ~ prop(tumorSizepropSd) + add(tumorSizeaddSd)\\n  })\\n}tgi_no_sat_powerLaw <- function() {\\n  description <- \"One compartment TGI model with with exponential tumor growth, without saturation.\"\\n  ini({\\n    lts0 <- 0.8; label(\"Initial tumor size (TS0)\")\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    lgamma <- 0.95; label(\"proliferative cells as a fraction of the full tumor volume (gamma)\")\\n    lkgl <- 0.7; label(\"Zero-order linear growth rate\")\\n    lkge <- 0.7; label(\"First-order exponential growth rate\")\\n    CcpropSd <- 0.5 ; label(\"PK proportional residual error (fraction)\")\\n    tumorSizepropSd <- 0.5 ; label(\"Tumor size proportional residual error (fraction)\")\\n    tumorSizeaddSd <- 30 ; label(\"Tumor size additive residual error (tumor volume)\")\\n  })\\n  model({\\n    ts0 <- exp(lts0)\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n    gamma<- exp(lgamma)\\n    kge <- exp(lkge)\\n    kgl <- exp(lkgl)\\n    \\n    kel <- cl / vc\\n    tumorSize(0) <- ts0\\n    \\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n    d/dt(tumorSize) <- kge*tumorSize^gamma\\n    \\n    Cc <- central / vc\\n    Cc ~ prop(CcpropSd)\\n    tumorSize ~ prop(tumorSizepropSd) + add(tumorSizeaddSd)\\n  })\\n}tgi_sat_VonBertalanffy <- function() {\\n  description <- \"One compartment TGI model where tumor growth is limited by a loss term, with saturation.\"\\n  ini({\\n    lts0 <- 0.3; label(\"Initial tumor size (TS0)\") \\n    ltsmax <- 0.9; label(\"Maximum tumor size at saturation (TSmax)\")\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    lkg <- 0.7; label(\"Birth rate\")\\n    lkd <- 0.7; label (\"Death rate\")\\n    CcpropSd <- 0.5 ; label(\"PK proportional residual error (fraction)\")\\n    tumorSizepropSd <- 0.5 ; label(\"Tumor size proportional residual error (fraction)\")\\n    tumorSizeaddSd <- 30 ; label(\"Tumor size additive residual error (tumor volume)\")\\n  })\\n  model({\\n    ts0 <- exp(lts0)\\n    tsmax <- exp(ltsmax)\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n    kg <- exp(lkg)\\n    kd <-exp(lkd)\\n    \\n    kel <- cl / vc\\n    tumorSize(0) <- ts0\\n    \\n    \\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n    d/dt(tumorSize) <- kg*tumorSize^(2/3)-kd*tumorSize\\n    \\n    Cc <- central / vc\\n    Cc ~ prop(CcpropSd)\\n    tumorSize ~ prop(tumorSizepropSd) + add(tumorSizeaddSd)\\n  })\\n}tgi_sat_genVonBertalanffy <- function() {\\n  description <- \"One compartment TGI model where tumor growth is limited by a loss term, with saturation.\"\\n  ini({\\n    lts0 <- 0.3; label(\"Initial tumor size (TS0)\") \\n    ltsmax <- 0.9; label(\"Maximum tumor size at saturation (TSmax)\")\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    lkg <- 0.7; label(\"Birth rate\")\\n    lkd <- 0.7; label (\"Death rate\")\\n    lgamma <- 0.95; label(\"proliferative cells as a fraction of the full tumor volume (gamma)\")\\n    CcpropSd <- 0.5 ; label(\"PK proportional residual error (fraction)\")\\n    tumorSizepropSd <- 0.5 ; label(\"Tumor size proportional residual error (fraction)\")\\n    tumorSizeaddSd <- 30 ; label(\"Tumor size additive residual error (tumor volume)\")\\n  })\\n  model({\\n    ts0 <- exp(lts0)\\n    tsmax <- exp(ltsmax)\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n    kg <- exp(lkg)\\n    kd <-exp(lkd)\\n    gamma <- exp(lgamma)\\n    \\n    kel <- cl / vc\\n    tumorSize(0) <- ts0\\n    \\n    \\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n    d/dt(tumorSize) <- kg*tumorSize^(gamma)-kd*tumorSize\\n    \\n    Cc <- central / vc\\n    Cc ~ prop(CcpropSd)\\n    tumorSize ~ prop(tumorSizepropSd) + add(tumorSizeaddSd)\\n  })\\n}tgi_sat_logistic <- function() {\\n  description <- \"One compartment TGI model with with exponential tumor growth that decelerates linearly, with saturation.\"\\n  ini({\\n    lts0 <- 0.3; label(\"Initial tumor size (TS0)\") \\n    ltsmax <- 0.9; label(\"Maximum tumor size at saturation (TSmax)\")\\n    lka <- 0.45 ; label(\"Absorption rate (Ka)\")\\n    lcl <- 1 ; label(\"Clearance (CL)\")\\n    lvc  <- 3.45 ; label(\"Central volume of distribution (V)\")\\n    lkgl <- 0.7; label(\"Zero-order linear growth rate\")\\n    CcpropSd <- 0.5 ; label(\"PK proportional residual error (fraction)\")\\n    tumorSizepropSd <- 0.5 ; label(\"Tumor size proportional residual error (fraction)\")\\n    tumorSizeaddSd <- 30 ; label(\"Tumor size additive residual error (tumor volume)\")\\n  })\\n  model({\\n    ts0 <- exp(lts0)\\n    tsmax <- exp(ltsmax)\\n    ka <- exp(lka)\\n    cl <- exp(lcl)\\n    vc  <- exp(lvc)\\n    kgl <- exp(lkgl)\\n    \\n    kel <- cl / vc\\n    tumorSize(0) <- ts0\\n    \\n    \\n    d/dt(depot) <- -ka*depot\\n    d/dt(central) <- ka*depot-kel*central\\n    d/dt(tumorSize) <- kge*tumorSize*(1-(tumorSize/tsmax))\\n    \\n    Cc <- central / vc\\n    Cc ~ prop(CcpropSd)\\n    tumorSize ~ prop(tumorSizepropSd) + add(tumorSizeaddSd)\\n  })\\n} #>                                                                                                                                         Description #> 1                                                                                                    One compartment PK model with linear clearance #> 2                                                                       One compartment PK model with linear clearance using differential equations #> 3                                                                                                    Two compartment PK model with linear clearance #> 4                                                                       Two compartment PK model with linear clearance using differential equations #> 5                                                                       Two compartment PK model with linear clearance using differential equations #> 6                          Two compartment PK model with time-dependent clearance using differential equations (structured like nivolumab PK model) #> 7                                                                                                  Three compartment PK model with linear clearance #> 8                                                                     Three compartment PK model with linear clearance using differential equations #> 9                                                       Phenylalanine model for absorption and metabolism in healthy subjects and patients with PKU #> 10                                                            Two compartment PK model with Michealis-Menten clearance using differential equations #> 11                                                                                  One compartment indirect response model with inhibition of kin. #> 12                                                                                  One compartment indirect response model with inhibition of kin. #> 13                                                                                  One compartment indirect response model with inhibition of kin. #> 14                                                                                 One compartment indirect response model with inhibition of kout. #> 15                                                                                 One compartment indirect response model with inhibition of kout. #> 16                                                                                 One compartment indirect response model with inhibition of kout. #> 17                                               One compartment indirect response model with stimulation of kin.Parameterized using rate cosntants #> 18                                                                                 One compartment indirect response model with stimulation of kin. #> 19                                                                                 One compartment indirect response model with stimulation of kin. #> 20                                              One compartment indirect response model with stimulation of kout.Parameterized using rate cosntants #> 21                                                                                One compartment indirect response model with stimulation of kout. #> 22                                                                                One compartment indirect response model with stimulation of kout. #> 23                                                              One compartment indirect response model with inhibition of kin and circadian kin_t. #> 24                                                              One compartment indirect response model with inhibition of kin and circadian kin_t. #> 25                                                             One compartment indirect response model with inhibition of kout and circadian kin_t. #> 26                                                             One compartment indirect response model with inhibition of kout and circadian kin_t. #> 27                           One compartment indirect response model with stimulation of kin and circadian kin_t.Parameterized using rate cosntants #> 28                          One compartment indirect response model with stimulation of kin and circadian kout_t.Parameterized using rate constants #> 29                          One compartment indirect response model with stimulation of kout and circadian kin_t.Parameterized using rate cosntants #> 30                         One compartment indirect response model with stimulation of kout and circadian kout_t.Parameterized using rate cosntants #> 31 One compartment precursor-dependent indirect response model with inhibition of drug response. Parameterized with clearance and volume. (effect). #> 32                                           One compartment precursor-dependent indirect response model with inhibition of drug response (effect). #> 33   One compartment precursor-dependent indirect response model with inhibition of drug response (effect). Parameterized with clearance and volume #> 34   One compartment precursor-dependent indirect response model with inhibition of drug response (effect). Parameterized with clearance and volume #> 35                                                    Two compartment PK model with linear clearance for average monoclonal antibodies (Davda 2014) #> 36                                                              PK double absorption model with simultaneous zero order and first order absorptions #> 37                                                              PK double absorption model with simultaneous first order and zero order absorptions #> 38                                                                             PK double absorption model with simultaneous first order absorptions #> 39                                                                                        Liraglutide PK model in adolescents (Carlsson Petri 2021) #> 40                                                                                           Exenatide immediate-release PK model (Cirincione 2017) #> 41                                                                                                              Dupilumab PK model (Kovalenko 2020) #> 42                                                                                                             Tralokinumab PK model (Soehoel 2022) #> 43                                                                                                                 Lebrikizumab PK model (Zhu 2017) #> 44                                                                Signal transduction model for delayed concentration effects on cancer cell growth #> 45                                                                                                  Oncology tumor growth model in xenograft models #> 46                                                                One compartment TGI model with with exponential tumor growth, without saturation. #> 47                                                                One compartment TGI model with with exponential tumor growth, without saturation. #> 48                                                                     One compartment TGI model with with linear tumor growth, without saturation. #> 49                                                                One compartment TGI model with with exponential tumor growth, without saturation. #> 50                                                         One compartment TGI model where tumor growth is limited by a loss term, with saturation. #> 51                                                         One compartment TGI model where tumor growth is limited by a loss term, with saturation. #> 52                                         One compartment TGI model with with exponential tumor growth that decelerates linearly, with saturation. #>  #> $MB$model_catalog$select_group #> $MB$model_catalog$select_group$`Model Library` #> $MB$model_catalog$select_group$`Model Library`$PK_1cmt_des #> [1] \"mod_2\" #>  #> $MB$model_catalog$select_group$`Model Library`$PK_2cmt_des #> [1] \"mod_4\" #>  #> $MB$model_catalog$select_group$`Model Library`$PK_2cmt_no_depot #> [1] \"mod_5\" #>  #> $MB$model_catalog$select_group$`Model Library`$PK_2cmt_tdcl_des #> [1] \"mod_6\" #>  #> $MB$model_catalog$select_group$`Model Library`$PK_3cmt_des #> [1] \"mod_8\" #>  #> $MB$model_catalog$select_group$`Model Library`$phenylalanine_charbonneau_2021 #> [1] \"mod_9\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_0cpt_transitEx #> [1] \"mod_10\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_inhi_kin #> [1] \"mod_11\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_inhi_kin_CLV #> [1] \"mod_12\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_inhi_kin_r0rmaxcrmax #> [1] \"mod_13\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_inhi_kout #> [1] \"mod_14\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_inhi_kout_CLV #> [1] \"mod_15\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_inhi_kout_r0rmaxcrmax #> [1] \"mod_16\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_stim_kin #> [1] \"mod_17\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_stim_kin_CLV #> [1] \"mod_18\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_stim_kin_r0rmaxcrmax #> [1] \"mod_19\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_stim_kout #> [1] \"mod_20\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_stim_kout_CLV #> [1] \"mod_21\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_1cpt_stim_kout_r0rmaxcrmax #> [1] \"mod_22\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_inhi_kin_kin_t #> [1] \"mod_23\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_inhi_kin_kout_t #> [1] \"mod_24\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_inhi_kout_kin_t #> [1] \"mod_25\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_inhi_kout_kout_t #> [1] \"mod_26\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_stim_kin_kin_t #> [1] \"mod_27\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_stim_kin_kout_t #> [1] \"mod_28\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_stim_kout_kin_t #> [1] \"mod_29\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_circ_1cpt_stim_kout_kout_t #> [1] \"mod_30\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_prec_1cpt_inhi_CLV #> [1] \"mod_31\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_prec_1cpt_inhi_r0rmaxcrmax #> [1] \"mod_32\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_prec_1cpt_stim_CLV #> [1] \"mod_33\" #>  #> $MB$model_catalog$select_group$`Model Library`$indirect_prec_1cpt_stim_r0rmaxcrmax #> [1] \"mod_34\" #>  #> $MB$model_catalog$select_group$`Model Library`$PK_double_sim_01 #> [1] \"mod_36\" #>  #> $MB$model_catalog$select_group$`Model Library`$PK_double_sim_10 #> [1] \"mod_37\" #>  #> $MB$model_catalog$select_group$`Model Library`$PK_double_sim_11 #> [1] \"mod_38\" #>  #> $MB$model_catalog$select_group$`Model Library`$Cirincione_2017_exenatide #> [1] \"mod_40\" #>  #> $MB$model_catalog$select_group$`Model Library`$Kovalenko_2020_dupilumab #> [1] \"mod_41\" #>  #> $MB$model_catalog$select_group$`Model Library`$tgi_no_sat_Koch #> [1] \"mod_46\" #>  #> $MB$model_catalog$select_group$`Model Library`$tgi_no_sat_expo #> [1] \"mod_47\" #>  #> $MB$model_catalog$select_group$`Model Library`$tgi_no_sat_linear #> [1] \"mod_48\" #>  #> $MB$model_catalog$select_group$`Model Library`$tgi_no_sat_powerLaw #> [1] \"mod_49\" #>  #> $MB$model_catalog$select_group$`Model Library`$tgi_sat_VonBertalanffy #> [1] \"mod_50\" #>  #> $MB$model_catalog$select_group$`Model Library`$tgi_sat_genVonBertalanffy #> [1] \"mod_51\" #>  #> $MB$model_catalog$select_group$`Model Library`$tgi_sat_logistic #> [1] \"mod_52\" #>  #>  #>  #> $MB$model_catalog$select_plain #> $MB$model_catalog$select_plain$PK_1cmt_des #> [1] \"mod_2\" #>  #> $MB$model_catalog$select_plain$PK_2cmt_des #> [1] \"mod_4\" #>  #> $MB$model_catalog$select_plain$PK_2cmt_no_depot #> [1] \"mod_5\" #>  #> $MB$model_catalog$select_plain$PK_2cmt_tdcl_des #> [1] \"mod_6\" #>  #> $MB$model_catalog$select_plain$PK_3cmt_des #> [1] \"mod_8\" #>  #> $MB$model_catalog$select_plain$phenylalanine_charbonneau_2021 #> [1] \"mod_9\" #>  #> $MB$model_catalog$select_plain$indirect_0cpt_transitEx #> [1] \"mod_10\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_inhi_kin #> [1] \"mod_11\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_inhi_kin_CLV #> [1] \"mod_12\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_inhi_kin_r0rmaxcrmax #> [1] \"mod_13\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_inhi_kout #> [1] \"mod_14\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_inhi_kout_CLV #> [1] \"mod_15\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_inhi_kout_r0rmaxcrmax #> [1] \"mod_16\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_stim_kin #> [1] \"mod_17\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_stim_kin_CLV #> [1] \"mod_18\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_stim_kin_r0rmaxcrmax #> [1] \"mod_19\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_stim_kout #> [1] \"mod_20\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_stim_kout_CLV #> [1] \"mod_21\" #>  #> $MB$model_catalog$select_plain$indirect_1cpt_stim_kout_r0rmaxcrmax #> [1] \"mod_22\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_inhi_kin_kin_t #> [1] \"mod_23\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_inhi_kin_kout_t #> [1] \"mod_24\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_inhi_kout_kin_t #> [1] \"mod_25\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_inhi_kout_kout_t #> [1] \"mod_26\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_stim_kin_kin_t #> [1] \"mod_27\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_stim_kin_kout_t #> [1] \"mod_28\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_stim_kout_kin_t #> [1] \"mod_29\" #>  #> $MB$model_catalog$select_plain$indirect_circ_1cpt_stim_kout_kout_t #> [1] \"mod_30\" #>  #> $MB$model_catalog$select_plain$indirect_prec_1cpt_inhi_CLV #> [1] \"mod_31\" #>  #> $MB$model_catalog$select_plain$indirect_prec_1cpt_inhi_r0rmaxcrmax #> [1] \"mod_32\" #>  #> $MB$model_catalog$select_plain$indirect_prec_1cpt_stim_CLV #> [1] \"mod_33\" #>  #> $MB$model_catalog$select_plain$indirect_prec_1cpt_stim_r0rmaxcrmax #> [1] \"mod_34\" #>  #> $MB$model_catalog$select_plain$PK_double_sim_01 #> [1] \"mod_36\" #>  #> $MB$model_catalog$select_plain$PK_double_sim_10 #> [1] \"mod_37\" #>  #> $MB$model_catalog$select_plain$PK_double_sim_11 #> [1] \"mod_38\" #>  #> $MB$model_catalog$select_plain$Cirincione_2017_exenatide #> [1] \"mod_40\" #>  #> $MB$model_catalog$select_plain$Kovalenko_2020_dupilumab #> [1] \"mod_41\" #>  #> $MB$model_catalog$select_plain$tgi_no_sat_Koch #> [1] \"mod_46\" #>  #> $MB$model_catalog$select_plain$tgi_no_sat_expo #> [1] \"mod_47\" #>  #> $MB$model_catalog$select_plain$tgi_no_sat_linear #> [1] \"mod_48\" #>  #> $MB$model_catalog$select_plain$tgi_no_sat_powerLaw #> [1] \"mod_49\" #>  #> $MB$model_catalog$select_plain$tgi_sat_VonBertalanffy #> [1] \"mod_50\" #>  #> $MB$model_catalog$select_plain$tgi_sat_genVonBertalanffy #> [1] \"mod_51\" #>  #> $MB$model_catalog$select_plain$tgi_sat_logistic #> [1] \"mod_52\" #>  #>  #> $MB$model_catalog$select_subtext #>  [1] \"One compartment PK model with linear clearance using differential equations\"                                                                      #>  [2] \"Two compartment PK model with linear clearance using differential equations\"                                                                      #>  [3] \"Two compartment PK model with linear clearance using differential equations\"                                                                      #>  [4] \"Two compartment PK model with time-dependent clearance using differential equations (structured like nivolumab PK model)\"                         #>  [5] \"Three compartment PK model with linear clearance using differential equations\"                                                                    #>  [6] \"Phenylalanine model for absorption and metabolism in healthy subjects and patients with PKU\"                                                      #>  [7] \"Two compartment PK model with Michealis-Menten clearance using differential equations\"                                                            #>  [8] \"One compartment indirect response model with inhibition of kin.\"                                                                                  #>  [9] \"One compartment indirect response model with inhibition of kin.\"                                                                                  #> [10] \"One compartment indirect response model with inhibition of kin.\"                                                                                  #> [11] \"One compartment indirect response model with inhibition of kout.\"                                                                                 #> [12] \"One compartment indirect response model with inhibition of kout.\"                                                                                 #> [13] \"One compartment indirect response model with inhibition of kout.\"                                                                                 #> [14] \"One compartment indirect response model with stimulation of kin.Parameterized using rate cosntants\"                                               #> [15] \"One compartment indirect response model with stimulation of kin.\"                                                                                 #> [16] \"One compartment indirect response model with stimulation of kin.\"                                                                                 #> [17] \"One compartment indirect response model with stimulation of kout.Parameterized using rate cosntants\"                                              #> [18] \"One compartment indirect response model with stimulation of kout.\"                                                                                #> [19] \"One compartment indirect response model with stimulation of kout.\"                                                                                #> [20] \"One compartment indirect response model with inhibition of kin and circadian kin_t.\"                                                              #> [21] \"One compartment indirect response model with inhibition of kin and circadian kin_t.\"                                                              #> [22] \"One compartment indirect response model with inhibition of kout and circadian kin_t.\"                                                             #> [23] \"One compartment indirect response model with inhibition of kout and circadian kin_t.\"                                                             #> [24] \"One compartment indirect response model with stimulation of kin and circadian kin_t.Parameterized using rate cosntants\"                           #> [25] \"One compartment indirect response model with stimulation of kin and circadian kout_t.Parameterized using rate constants\"                          #> [26] \"One compartment indirect response model with stimulation of kout and circadian kin_t.Parameterized using rate cosntants\"                          #> [27] \"One compartment indirect response model with stimulation of kout and circadian kout_t.Parameterized using rate cosntants\"                         #> [28] \"One compartment precursor-dependent indirect response model with inhibition of drug response. Parameterized with clearance and volume. (effect).\" #> [29] \"One compartment precursor-dependent indirect response model with inhibition of drug response (effect).\"                                           #> [30] \"One compartment precursor-dependent indirect response model with inhibition of drug response (effect). Parameterized with clearance and volume\"   #> [31] \"One compartment precursor-dependent indirect response model with inhibition of drug response (effect). Parameterized with clearance and volume\"   #> [32] \"PK double absorption model with simultaneous zero order and first order absorptions\"                                                              #> [33] \"PK double absorption model with simultaneous first order and zero order absorptions\"                                                              #> [34] \"PK double absorption model with simultaneous first order absorptions\"                                                                             #> [35] \"Exenatide immediate-release PK model (Cirincione 2017)\"                                                                                           #> [36] \"Dupilumab PK model (Kovalenko 2020)\"                                                                                                              #> [37] \"One compartment TGI model with with exponential tumor growth, without saturation.\"                                                                #> [38] \"One compartment TGI model with with exponential tumor growth, without saturation.\"                                                                #> [39] \"One compartment TGI model with with linear tumor growth, without saturation.\"                                                                     #> [40] \"One compartment TGI model with with exponential tumor growth, without saturation.\"                                                                #> [41] \"One compartment TGI model where tumor growth is limited by a loss term, with saturation.\"                                                         #> [42] \"One compartment TGI model where tumor growth is limited by a loss term, with saturation.\"                                                         #> [43] \"One compartment TGI model with with exponential tumor growth that decelerates linearly, with saturation.\"                                         #>  #> $MB$model_catalog$msgs #> NULL #>  #> $MB$model_catalog$hasmdl #> [1] TRUE #>  #> $MB$model_catalog$isgood #> [1] TRUE #>  #>  #> $MB$ts_details #> $MB$ts_details$months #> $MB$ts_details$months$verb #> [1] \"Months\" #>  #> $MB$ts_details$months$conv #> [1] 4.133598e-07 #>  #>  #> $MB$ts_details$weeks #> $MB$ts_details$weeks$verb #> [1] \"Weeks\" #>  #> $MB$ts_details$weeks$conv #> [1] 1.653439e-06 #>  #>  #> $MB$ts_details$days #> $MB$ts_details$days$verb #> [1] \"Days\" #>  #> $MB$ts_details$days$conv #> [1] 1.157407e-05 #>  #>  #> $MB$ts_details$hours #> $MB$ts_details$hours$verb #> [1] \"Hours\" #>  #> $MB$ts_details$hours$conv #> [1] 0.0002777778 #>  #>  #>  #> $MB$elements #> $MB$elements$element_1 #> $MB$elements$element_1$isgood #> [1] FALSE #>  #> $MB$elements$element_1$ui #> $MB$elements$element_1$ui$ui_mb_model #> [1] \"\" #>  #> $MB$elements$element_1$ui$time_scale #> [1] \"weeks\" #>  #> $MB$elements$element_1$ui$element_name #> [1] \"Model 1\" #>  #> $MB$elements$element_1$ui$catalog_selection #> [1] \"mod_1\" #>  #> $MB$elements$element_1$ui$base_from #> [1] \"catalog\" #>  #>  #> $MB$elements$element_1$id #> [1] \"element_1\" #>  #> $MB$elements$element_1$idx #> [1] 1 #>  #> $MB$elements$element_1$fcn_obj_name #> [1] \"MB_obj_1_fcn\" #>  #> $MB$elements$element_1$rx_obj_name #> [1] \"MB_obj_1_rx\" #>  #> $MB$elements$element_1$ts_obj_name #> [1] \"MB_obj_1_ts\" #>  #> $MB$elements$element_1$msgs #> NULL #>  #> $MB$elements$element_1$code_previous #> [1] \"\" #>  #> $MB$elements$element_1$update_model_code #> [1] FALSE #>  #> $MB$elements$element_1$components_table #> data frame with 0 columns and 0 rows #>  #> $MB$elements$element_1$selected_component_id #> NULL #>  #> $MB$elements$element_1$components_list #> list() #>  #> $MB$elements$element_1$checksum #> [1] \"92e90cf05659dcd6da7562086b9c2207\" #>  #> $MB$elements$element_1$base_model_name #> [1] \"\" #>  #> $MB$elements$element_1$base_model #> [1] \"\" #>  #>  #>  #> $MB$current_element #> [1] \"element_1\" #>  #> $MB$checksum #> [1] \"f7de2055542d3ff1b085fafc2d30a1f8\" #>  #>  #> $MOD_TYPE #> [1] \"MB\" #>  #> $id #> [1] \"MB\" #>  #> $FM_yaml_file #> [1] \"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/formods/templates/formods.yaml\" #>  #> $MOD_yaml_file #> [1] \"/private/var/folders/pq/7srbf_fx3rd3k706hgxkg61r0000gp/T/Rtmpt1Ik1b/temp_libpathd83d65dd96f7/ruminate/templates/MB.yaml\" #>  #> $shiny_token #> [1] \"non_shiny\" #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_mk_preload.html","id":null,"dir":"Reference","previous_headings":"","what":"Make List of Current MB State — MB_mk_preload","title":"Make List of Current MB State — MB_mk_preload","text":"Reads app state yaml files.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_mk_preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make List of Current MB State — MB_mk_preload","text":"","code":"MB_mk_preload(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_mk_preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make List of Current MB State — MB_mk_preload","text":"state MB state object","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_mk_preload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make List of Current MB State — MB_mk_preload","text":"list following elements isgood:       Boolean indicating exit status function. msgs:         Messages passed back user. yaml_list:    Lists preload components.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_mk_preload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make List of Current MB State — MB_mk_preload","text":"","code":"sess_res = MB_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE state = sess_res$state res = MB_mk_preload(state) #> → MB: saving element (1) One compartment model #> → MB: saving element (2) PK Biomarker #> → MB: mk_preload isgood: TRUE"},{"path":"https://ruminate.ubiquity.tools/reference/MB_mod_ok.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes Sure Suggests are Installed — MB_mod_ok","title":"Makes Sure Suggests are Installed — MB_mod_ok","text":"Simple check make sure suggested packages installed.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_mod_ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes Sure Suggests are Installed — MB_mod_ok","text":"","code":"MB_mod_ok(pkgs = c(\"rxode2\", \"nonmem2rx\", \"nlmixr2lib\"))"},{"path":"https://ruminate.ubiquity.tools/reference/MB_mod_ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes Sure Suggests are Installed — MB_mod_ok","text":"pkgs List suggested packages (default \"rxode2\", \"nonmem2rx\" \"nlmixr2lib\")","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_mod_ok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes Sure Suggests are Installed — MB_mod_ok","text":"Boolean value indicating module OK","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_mod_ok.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes Sure Suggests are Installed — MB_mod_ok","text":"","code":"MB_mod_ok() #> [1] FALSE"},{"path":"https://ruminate.ubiquity.tools/reference/MB_new_element.html","id":null,"dir":"Reference","previous_headings":"","what":"New Model Building Model — MB_new_element","title":"New Model Building Model — MB_new_element","text":"Appends new empty model MB state object makes new model active model.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_new_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Model Building Model — MB_new_element","text":"","code":"MB_new_element(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_new_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New Model Building Model — MB_new_element","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_new_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New Model Building Model — MB_new_element","text":"MB state object containing new model model set current active model. See help MB_fetch_state() model format.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_new_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New Model Building Model — MB_new_element","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_preload.html","id":null,"dir":"Reference","previous_headings":"","what":"Preload Data for MB Module — MB_preload","title":"Preload Data for MB Module — MB_preload","text":"Populates supplied session variable information list sources.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preload Data for MB Module — MB_preload","text":"","code":"MB_preload(   session,   src_list,   yaml_res,   mod_ID = NULL,   react_state = list(),   quickload = FALSE )"},{"path":"https://ruminate.ubiquity.tools/reference/MB_preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preload Data for MB Module — MB_preload","text":"session Shiny session variable (app) list (outside app) src_list List preload data (read together module IDs top level) yaml_res List data module yaml config mod_ID Module ID module loaded. react_state Reactive shiny object (app) list (outside app) used trigger reactions. quickload Logical TRUE load reduced analysis FALSE load full analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_preload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preload Data for MB Module — MB_preload","text":"list following elements isgood:      Boolean indicating exit status function. msgs:        Messages passed back user. session:     Session object input:       value shiny input end session initialization. state:       App state. react_state: react_state components.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_set_current_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the Value for the Current model — MB_set_current_element","title":"Sets the Value for the Current model — MB_set_current_element","text":"Takes MB state returns current active model","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_set_current_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the Value for the Current model — MB_set_current_element","text":"","code":"MB_set_current_element(state, element)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_set_current_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the Value for the Current model — MB_set_current_element","text":"state MB state MB_fetch_state() element Element list MB_fetch_current_element()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_set_current_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the Value for the Current model — MB_set_current_element","text":"MB state object current model set using supplied value.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_set_current_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the Value for the Current model — MB_set_current_element","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_catalog.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests the Model Catalog — MB_test_catalog","title":"Tests the Model Catalog — MB_test_catalog","text":"Reads models catalog attempts build .","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_catalog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests the Model Catalog — MB_test_catalog","text":"","code":"MB_test_catalog(state, as_cran = FALSE, verbose = TRUE)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_catalog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests the Model Catalog — MB_test_catalog","text":"state MB state MB_fetch_state() as_cran Boolean indicate running CRAN verbose Boolean indicate messages displayed.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_catalog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests the Model Catalog — MB_test_catalog","text":"List following attributes: isgood: Boolean varaible indicating models catalog passed test. msgs: Messages indicating test successful .","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_catalog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests the Model Catalog — MB_test_catalog","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_mksession.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate Session Data for Module Testing — MB_test_mksession","title":"Populate Session Data for Module Testing — MB_test_mksession","text":"Populates supplied session variable testing.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_mksession.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate Session Data for Module Testing — MB_test_mksession","text":"","code":"MB_test_mksession(session = list())"},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_mksession.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate Session Data for Module Testing — MB_test_mksession","text":"session Shiny session variable (app) list (outside app)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_mksession.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate Session Data for Module Testing — MB_test_mksession","text":"MB portion all_sess_res returned FM_app_preload","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_test_mksession.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate Session Data for Module Testing — MB_test_mksession","text":"","code":"session = shiny::MockShinySession$new() sess_res = MB_test_mksession(session=session) #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 7708c04fa4cfb1ebffd3f38dd644c954 #> → MB: module checksum updated:3a862a1c08eba8b17c70b27276e46b36 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 40677f60aeb06715b7cb563b93b44ea1 #> → MB: module checksum updated:92cf98c4c2ac00cf716033d7f392fd76 #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: b76f48caaa88372fe56a96e12a7f5a91 #> → MB: module checksum updated:ed4ee27d166e11a7ea755d03d43cbe70 #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: f1d37b3992181b354f6b571c10d2a3ad #> → MB: module checksum updated:9a9485c6501fcdd43e350c6e42f3b2b6 #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6ec1ea6d2da1d3cf7c7b5dd3b3054c85 #> → MB: module checksum updated:ade17e877354c2b87321a9e2846a39d5 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE"},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_checksum.html","id":null,"dir":"Reference","previous_headings":"","what":"Update MB Module Checksum — MB_update_checksum","title":"Update MB Module Checksum — MB_update_checksum","text":"Takes MB state updates checksum used trigger downstream updates","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_checksum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update MB Module Checksum — MB_update_checksum","text":"","code":"MB_update_checksum(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_checksum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update MB Module Checksum — MB_update_checksum","text":"state MB state MB_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_checksum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update MB Module Checksum — MB_update_checksum","text":"MB state object checksum updated","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_checksum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update MB Module Checksum — MB_update_checksum","text":"","code":"# Within shiny both session and input variables will exist, # this creates examples here for testing purposes: sess_res = MB_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE session = sess_res$session input   = sess_res$input  # We also need a state variable state = sess_res$state  state = MB_update_checksum(state)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates Current Element with rxode2 Model — MB_update_model","title":"Updates Current Element with rxode2 Model — MB_update_model","text":"Takes rxode2 object updates model components current element.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates Current Element with rxode2 Model — MB_update_model","text":"","code":"MB_update_model(state, session, current_ele, rx_obj, note, reset = FALSE)"},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates Current Element with rxode2 Model — MB_update_model","text":"state MB state MB_fetch_state() session Shiny session variable current_ele MB model element MB_fetch_current_element() rx_obj rxode2 model rxode2::rxode2() note text indicating update (e.g. \"added parameter\") reset boolean indicating element needs reset (.e. change base model) default: FALSE.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates Current Element with rxode2 Model — MB_update_model","text":"current_element model attached","code":""},{"path":"https://ruminate.ubiquity.tools/reference/MB_update_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates Current Element with rxode2 Model — MB_update_model","text":"","code":"#library(ruminate) # This will get the full session: library(formods) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){   sess_res = MB_test_mksession()   # This is just for CRAN   #sess_res = MB_test_mksession(session=list())   session = sess_res$session   input   = sess_res$input      # Configuration files   FM_yaml_file  = system.file(package = \"formods\", \"templates\", \"formods.yaml\")   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"MB.yaml\")      # Creating an empty state object   state = MB_fetch_state(id              = \"MB\",                          input           = input,                          session         = session,                          FM_yaml_file    = FM_yaml_file,                          MOD_yaml_file   = MOD_yaml_file,                          react_state     = NULL)      # This will provide a list of the available models   models = MB_fetch_catalog(state)   # This is a summary of the tables in the model:   models$summary      # This will test the models in the catalog, set as_cran   # to FALSE to test all the models.   mtres = MB_test_catalog(state, as_cran=TRUE)   mtres$isgood         # Creates a new empty element   state = MB_new_element(state)      # Delete the current element   state = MB_del_current_element(state)      # Fetch a list of the current element   element = MB_fetch_current_element(state)      # This will attach a model to it:   # Pulling the first model from the catalog   fcn_def  = models[[\"summary\"]][1, ][[\"Model\"]]   fcn_obj  = models[[\"summary\"]][1, ][[\"Object\"]]   mdl_type = models[[\"summary\"]][1, ][[\"Type\"]]   fcn_desc = models[[\"summary\"]][1, ][[\"Description\"]]      # This will build the rxode2 object from the model   mk_rx_res = mk_rx_obj(     type  = mdl_type,     model = list(fcn_def = fcn_def,                  fcn_obj = fcn_obj))      # This will attach the model to the current element   element = MB_update_model(     state       = state,     session     = session,     current_ele = element,     rx_obj      = mk_rx_res[[\"capture\"]][[\"rx_obj\"]],     note        = fcn_desc,     reset       = TRUE)      # You can now place element back in the state   state = MB_set_current_element(state, element)      # This will fetch the current component   component = MB_fetch_component(state, element)         fares = MB_fetch_appends(state, element)       # You can use the component to build the code to generate the model:   gen_code =     MB_build_code(state        = state, session = session,                 fcn_def        = component[[\"fcn_def\"]],                 time_scale     = element[[\"ui\"]][[\"time_scale\"]],                 fcn_obj_name   = \"my_fcn_obj\",                 rx_obj_name    = \"my_obj_name\",                 ts_obj_name    = \"my_ts_name\")      # Model code to be included in a larger script   message(paste0(gen_code$model_code, collapse=\"\\n\"))      # Stand-alone model code   message(paste0(gen_code$model_code_sa, collapse=\"\\n\"))      # This will fetch the code to regenerate all of the components of this module   message(MB_fetch_code(state)) } #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → MB:   dest:   file.path(\"config\",\"report.docx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → MB:   dest:   file.path(\"config\",\"report.pptx\") #> → MB: including file #> → MB:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → MB:   dest:   file.path(\"config\",\"report.yaml\") #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> → MB: module checksum updated:f7de2055542d3ff1b085fafc2d30a1f8 #> → MB: State initialized #> → MB: loading model idx: 1 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: e34210e0feb93986dd05235cfc567582 #> → MB: module checksum updated:35badbc9ebe40b2b8277f438f7c48abf #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 04ada0b6b354ee0bc8c97b94f88d1d7f #> → MB: module checksum updated:17261cb6db133d756165cf6ebd8b580c #> → MB:   -> setting name: One compartment model #> → MB:   -> setting time scale: hours #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 6434285b53cd5164b658ba2df7a2cfce #> → MB: module checksum updated:98a2c9b6de74787ace8ecf4193af921b #> → MB: added element idx: 1 #> → MB: loading model idx: 2 #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 2844ec86c5fdcd8a42fd35cfe4f4343b #> → MB: module checksum updated:801ac6768d733cc2675c884107459ada #> → MB:   -> setting name: PK Biomarker #> → MB:   -> setting time scale: days #> → MB:   -> setting base from: user #> → MB:   -> setting catalog selection:  #> → MB:   -> setting base model id: manual #> → MB:   -> setting base model name: manual #> → MB: model checksum updated: 62831b1d22f61ddff76a20c2da137973 #> → MB: module checksum updated:6bd5420f15261d205bbe37d6c9e1da30 #> → MB: added element idx: 2 #> → MB: module isgood: TRUE #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.R not found (skipping) #> ! MB: User-defined model: /Users/jmh/projects/ruminate/github/ruminate/docs/reference/user_model.ctl not found (skipping) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ✔ MB: PK_1cmt #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → MB: model checksum updated: 4aa14ea78346481c9c6ef2a278eda283 #> → MB: module checksum updated:60595b399847299d0778e0742f00da48 #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> library(\"nlmixr2lib\") #> library(\"nonmem2rx\") #> library(\"rxode2\") #>  #> my_fcn_obj = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> my_obj_name =  rxode2::rxode2(my_fcn_obj) #>  #> my_ts_name = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #> # Model Building ---- #> # Base model: manual==== #> MB_obj_1_fcn = function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #>  #> MB_obj_1_rx =  rxode2::rxode2(MB_obj_1_fcn) #>  #> MB_obj_1_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>  #>  #> # Base model: manual==== #> MB_obj_2_fcn = function ()  #> { #>     ini({ #>         TV_F1 <- fix(2.22044604925031e-16, 0.744, Inf) #>         TV_ka <- c(2.22044604925031e-16, 0.282, Inf) #>         TV_CL <- c(-36.0436533891172, -1.6094379124341, 709.782712893384) #>         TV_Vc <- c(-36.0436533891172, 1.28370777234479, 709.782712893384) #>         TV_Vp <- c(-36.0436533891172, 1.01160091167848, 709.782712893384) #>         TV_Q <- c(-36.0436533891172, -0.29169009384932, 709.782712893384) #>         TV_MW <- fix(2.22044604925031e-16, 140, Inf) #>         TV_BM_IC <- c(2.22044604925031e-16, 1000, Inf) #>         TV_kdeg_BM <- fix(2.22044604925031e-16, 0.1, Inf) #>         TV_Emax <- c(2.22044604925031e-16, 100, Inf) #>         TV_EC50 <- fix(2.22044604925031e-16, 300, Inf) #>         prop_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_PK <- c(2.22044604925031e-16, 0.1, Inf) #>         add_err_BM <- c(2.22044604925031e-16, 0.1, Inf) #>         ETAka ~ 0.416 #>         ETACL ~ 0.09875 #>         ETAVc ~ c(0.0786, 0.116) #>         ETAVp ~ c(0.0619, 0.0377, 0.0789) #>         ETAQ ~ 0.699 #>         ETABM_IC ~ 0.05 #>         ETAEmax ~ 0.1 #>     }) #>     model({ #>         F1 = TV_F1 #>         ka = TV_ka * exp(ETAka) #>         CL = exp(TV_CL) * exp(ETACL) #>         Vc = exp(TV_Vc) * exp(ETAVc) #>         Cc = Ac/(Vc) #>         Vp = exp(TV_Vp) * exp(ETAVp) #>         Q = exp(TV_Q) * exp(ETAQ) #>         MW = TV_MW #>         BM_IC = TV_BM_IC * exp(ETABM_IC) #>         kdeg_BM = TV_kdeg_BM #>         Emax = TV_Emax * exp(ETAEmax) #>         EC50 = TV_EC50 #>         Dinf = 0 #>         WTTV = 70 #>         CL_IND = CL * (1 + SEX_ID * 0.1) * (1 + SUBTYPE_ID *  #>             0.1) #>         kel = CL_IND/Vc * ((WT/WTTV))^(-0.35) #>         kcp = Q/Vc * ((WT/WTTV))^(-0.35) #>         kpc = Q/Vp * ((WT/WTTV))^(-0.35) #>         ksyn_BM = kdeg_BM * BM_IC #>         STIM = 1 + Emax * Cc/(EC50 + Cc) #>         BM(0) = BM_IC #>         d/dt(At) = (-ka * At) #>         d/dt(Ac) = ((ka * At * F1/Vc - kel * Cc - kcp * Cc +  #>             kpc * Cp * Vp/Vc + Dinf/Vc)) * Vc #>         d/dt(Cp) = (kcp * Cc * Vc/Vp - kpc * Cp) #>         d/dt(BM) = ksyn_BM * STIM - (kdeg_BM * BM) #>         C_ng_ml = Cc * MW #>         C_ng_ml ~ add(add_err_PK) + prop(prop_err_PK) #>         BM_obs = BM #>         BM_obs ~ add(add_err_BM) #>     }) #> } #>  #> MB_obj_2_rx =  rxode2::rxode2(MB_obj_2_fcn) #>  #> MB_obj_2_ts = list( #>   system  = \"weeks\", #>   details =  #>     list(months = list(verb = \"Months\", conv = 4.13359788359788e-07),  #>         weeks = list(verb = \"Weeks\", conv = 1.65343915343915e-06),  #>         days = list(verb = \"Days\", conv = 1.15740740740741e-05),  #>         hours = list(verb = \"Hours\", conv = 0.000277777777777778)) #> ) #>"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_Server.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Non-Compartmental Analysis State — NCA_Server","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"Merges default app options changes made UI","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_Server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"","code":"NCA_Server(   id,   FM_yaml_file = system.file(package = \"formods\", \"templates\", \"formods.yaml\"),   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\"),   id_ASM = \"ASM\",   id_UD = \"UD\",   id_DW = \"DW\",   deployed = FALSE,   react_state = NULL )"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_Server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"id ID string corresponds ID used call modules UI elements FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. id_ASM ID string app state management module used save load app states id_UD ID string upload data module used save load app states id_DW ID string data wrangling module used save load app states deployed Boolean variable indicating whether app deployed . react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_Server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"list containing current state app including default values yaml file well changes made user. list following structure: yaml: Full contents supplied yaml file. MC: Module components yaml file. NCA: isgood: Boolean object indicating file successfully loaded. checksum: MD5 sum contents element can used detect changes state. MOD_TYPE: Character data containing type module \"NCA\" id: Character data containing module id module session variable. FM_yaml_file: App configuration file FM main section. MOD_yaml_file:  Module configuration file MC main section.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_Server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"","code":"if(interactive()){ # original file: inst/templates/ruminate.R library(formods) library(ruminate)  # These are suggested packages library(shinydashboard) #library(ggpubr) #library(plotly) #library(shinybusy) library(prompter) #library(utils)  tags$style(\"@import url(https://use.fontawesome.com/releases/v6.4.0/css/all.css);\")  # You can copy these locally and customize them for your own needs. Simply # change the assignment to the local copy you've modified. formods.yaml  = system.file(package=\"formods\",  \"templates\",  \"formods.yaml\") ASM.yaml      = system.file(package=\"formods\",  \"templates\",  \"ASM.yaml\") UD.yaml       = system.file(package=\"formods\",  \"templates\",  \"UD.yaml\") DW.yaml       = system.file(package=\"formods\",  \"templates\",  \"DW.yaml\") FG.yaml       = system.file(package=\"formods\",  \"templates\",  \"FG.yaml\") NCA.yaml      = system.file(package=\"ruminate\", \"templates\",  \"NCA.yaml\")   # Name of  file to indicate we need to load testing data ftmptest = file.path(tempdir(), \"ruminate.test\")   # Making sure that the deployed object is created if(!exists(\"deployed\")){   deployed = FALSE }  # If the DEPLOYED file marker existrs we set deployed to TRUE if(file.exists(\"DEPLOYED\")){   deployed = TRUE }  # # Making sure that the run_dev object is created # if(file.exists(file.path(tempdir(), \"RUMINTE_DEVELOPMENT\"))){ #   run_dev  = TRUE # }else{ #   run_dev  = FALSE # }  # If the SETUP.R file exists we source it if(file.exists(\"SETUP.R\")){   source(\"SETUP.R\") }    CSS <- \" .wrapfig {   float: right;   shape-margin: 20px;   margin-right: 20px;   margin-bottom: 20px; } \"  #https://fontawesome.com/icons?from=io logo_url =   \"https://raw.githubusercontent.com/john-harrold/ruminate/main/man/figures/logo.png\" data_url =   \"https://github.com/john-harrold/formods/raw/master/inst/test_data/TEST_DATA.xlsx\" run_url  =   \"https://runruminate.ubiquity.tools/\" use_url  =   \"https://useruminate.ubiquity.tools/\" main_url =   \"https://ruminate.ubiquity.tools/\" issue_url =   \"https://github.com/john-harrold/ruminate/issues\"  intro_text = tags$p( \"Ruminate is a shiny module for pharmacometric data processing, visualization, and analysis. It consists of separate shiny modules that provide interfaces into common R packages and provides the underlying code. This is done to facilitate usage of those packages and to provide reproducible analyses.\" , tags$li( \"To find out more visit  \",         tags$a(\"ruminate.ubiquity.tools\", href=main_url),\"\"), tags$li( \"To give it a try you can download a test dataset \",         tags$a(\"here\", href=data_url),\"\"), tags$li( \"Go to  \",         tags$a(\"useruminate.ubiquity.tools\", href=use_url),\" for a video         demonstrating how to use ruminate\"), tags$li( \"If you run into any problems, have questions, or want a feature please         visit the \",         tags$a(\"issues\", href=issue_url),\" page\") )   ui <- shinydashboard::dashboardPage(   skin=\"black\",   shinydashboard::dashboardHeader(title=\"ruminate\"),   shinydashboard::dashboardSidebar(      shinydashboard::sidebarMenu(        shinydashboard::menuItem(\"Load/Save\",                                 tabName=\"loadsave\",                                 icon=icon(\"arrow-down-up-across-line\")) ,        shinydashboard::menuItem(\"Transform Data\", tabName=\"wrangle\", icon=icon(\"shuffle\")),        shinydashboard::menuItem(\"Visualize\",      tabName=\"plot\",    icon=icon(\"chart-line\")),        shinydashboard::menuItem(\"NCA\",            tabName=\"nca\",     icon=icon(\"chart-area\")),        shinydashboard::menuItem(\"App Info\",       tabName=\"sysinfo\", icon=icon(\"book-medical\"))      )   ),   shinydashboard::dashboardBody(   tags$head(     tags$style(HTML(CSS))   ),     shinydashboard::tabItems(        shinydashboard::tabItem(tabName=\"nca\",                shinydashboard::box(title=\"Non-Compartmental Analysis\", width=12,                fluidRow( prompter::use_prompt(),                column(width=12,                htmlOutput(NS(\"NCA\",  \"NCA_ui_compact\")))))                ),        shinydashboard::tabItem(tabName=\"loadsave\",          #     shinydashboard::box(title=NULL, width=12,                shinydashboard::tabBox(                  width = 12,                  title = NULL,                  shiny::tabPanel(id=\"load_data\",                           title=tagList(shiny::icon(\"file-arrow-up\"),                                         \"Load Data\"),                    fluidRow(                      column(width=6,                        div(style=\"display:inline-block;width:100%\",                        htmlOutput(NS(\"UD\", \"ui_ud_load_data\"))),                        htmlOutput(NS(\"UD\", \"ui_ud_clean\")),                        htmlOutput(NS(\"UD\", \"ui_ud_select_sheets\")),                        htmlOutput(NS(\"UD\", \"ui_ud_workflows\")),                        htmlOutput(NS(\"UD\", \"ui_ud_text_load_result\"))),                      column(width=6,                          tags$p(                              tags$img(                              class = \"wrapfig\",                              src   = logo_url,                              width = 150,                              alt = \"formods logo\" ),                          intro_text                          ))                    ),                  fluidRow(                    column(width=12,                           div(style=\"display:inline-block;vertical-align:top\",                                     htmlOutput(NS(\"UD\", \"ui_ud_data_preview\")))                           ))                  ),                  shiny::tabPanel(id=\"save_state\",                           title=tagList(shiny::icon(\"arrow-down-up-across-line\"),                                         \"Save or Load Analysis\"),                  fluidRow(                    column(width=5,                           div(style=\"display:inline-block;vertical-align:top\",                    htmlOutput(NS(\"ASM\", \"ui_asm_compact\"))                    ))                    )                  )                )          #     ),                ),        shinydashboard::tabItem(tabName=\"wrangle\",                shinydashboard::box(title=\"Transform and Create Views of Your Data\", width=12,                fluidRow(                column(width=12,                htmlOutput(NS(\"DW\",  \"DW_ui_compact\")))))                ),        shinydashboard::tabItem(tabName=\"plot\",                shinydashboard::box(title=\"Visualize Data\", width=12,                htmlOutput(NS(\"FG\",  \"FG_ui_compact\")))),        shinydashboard::tabItem(tabName=\"sysinfo\",          #     box(title=\"System Details\", width=12,                shinydashboard::tabBox(                  width = 12,                  title = NULL,                  shiny::tabPanel(id=\"sys_packages\",                           title=tagList(shiny::icon(\"box-open\"),                                         \"Installed Packages\"),                  htmlOutput(NS(\"ASM\", \"ui_asm_sys_packages\"))                  ),                  shiny::tabPanel(id=\"sys_modules\",                           title=tagList(shiny::icon(\"cubes\"),                                         \"Loaded Modules\"),                  htmlOutput(NS(\"ASM\", \"ui_asm_sys_modules\"))                  ),                  shiny::tabPanel(id=\"sys_log\",                           title=tagList(shiny::icon(\"clipboard-list\"),                                         \"Log\"),                  verbatimTextOutput(NS(\"ASM\", \"ui_asm_sys_log\"))                  ),                  shiny::tabPanel(id=\"sys_options\",                           title=tagList(shiny::icon(\"sliders\"),                                         \"R Options\"),                  htmlOutput(NS(\"ASM\", \"ui_asm_sys_options\"))                  )          #       )                ))       )     )   )  # Main app server server <- function(input, output, session) {    # Empty reactive object to track and react to   # changes in the module state outside of the module   react_FM = reactiveValues()    # Module IDs and the order they are needed for code generation   mod_ids = c(\"UD\", \"DW\", \"FG\", \"NCA\", \"MB\")    # If the ftmptest file is present we load test data   if(file.exists(ftmptest)){     sources = c(system.file(package=\"formods\",  \"preload\", \"ASM_preload.yaml\"),                 system.file(package=\"formods\",  \"preload\", \"UD_preload.yaml\"),                 system.file(package=\"formods\",  \"preload\", \"FG_preload.yaml\"),                 system.file(package=\"formods\",  \"preload\", \"DW_preload.yaml\"),                 system.file(package=\"ruminate\", \"preload\", \"NCA_preload.yaml\"))      res = FM_app_preload(session=session, sources=sources)   # Otherwise we look for a preload file and load that if it exists   } else if(file.exists(\"preload.yaml\")){     shinybusy::show_modal_spinner(text=\"Preloading analysis, be patient\", session=session)     res = FM_app_preload(session=session, sources=\"preload.yaml\")     shinybusy::remove_modal_spinner(session = session)   }    # Module servers   formods::ASM_Server( id=\"ASM\",                        deployed      = deployed,                        react_state   = react_FM,                        FM_yaml_file  = formods.yaml,                        MOD_yaml_file = ASM.yaml,                        mod_ids       = mod_ids)   formods::UD_Server(  id =\"UD\", id_ASM = \"ASM\",                        deployed         = deployed,                        react_state      = react_FM,                        MOD_yaml_file    = UD.yaml,                        FM_yaml_file     = formods.yaml)   formods::DW_Server(  id=\"DW\",       id_ASM = \"ASM\",                        id_UD = \"UD\",                        deployed         = deployed,                        react_state      = react_FM,                        MOD_yaml_file    = DW.yaml,                        FM_yaml_file     = formods.yaml)   formods::FG_Server(  id=\"FG\",     id_ASM = \"ASM\",                        id_UD = \"UD\", id_DW = \"DW\",                        deployed         = deployed,                        react_state      = react_FM,                        MOD_yaml_file    = FG.yaml,                        FM_yaml_file     = formods.yaml)   ruminate::NCA_Server(id    =\"NCA\", id_ASM = \"ASM\",                        id_UD = \"UD\", id_DW  = \"DW\",                        deployed         = deployed,                        react_state      = react_FM,                        MOD_yaml_file    = NCA.yaml,                        FM_yaml_file     = formods.yaml)  }  shinyApp(ui, server) }"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_add_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds Analysis Interval to Current Analysis — NCA_add_int","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"Takes start time, stop time, NCA parameters adds intervals table current analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_add_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"","code":"NCA_add_int(state, interval_start, interval_stop, nca_parameters)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_add_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"state NCA state NCA_fetch_state() interval_start Interval start time (numeric). interval_stop Interval stop time (numeric). nca_parameters list NCA parameters interval","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_add_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"State interval added current analysis.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_append_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Report Elements — NCA_append_report","title":"Append Report Elements — NCA_append_report","text":"Takes NCA state object appends reportable elements specified report type. NCA analyses \"good\" state reported. good state ignored.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_append_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Report Elements — NCA_append_report","text":"","code":"NCA_append_report(state, rpt, rpttype, gen_code_only = FALSE)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_append_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Report Elements — NCA_append_report","text":"state NCA state NCA_fetch_state() rpt Report current content report appended function. details structure see documentation formods::FM_generate_report() rpttype Type report generate (supported \"xlsx\", \"pptx\", \"docx\"). gen_code_only Boolean value indicating code generated (FALSE).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_append_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Report Elements — NCA_append_report","text":"list containing following elements isgood:    Return status function. hasrptele: Boolean indicator module reportable elements. code:      Code create report elements. msgs:      Messages passed back user. rpt:       Report additions passed back user.","code":""},{"path":[]},{"path":"https://ruminate.ubiquity.tools/reference/NCA_append_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append Report Elements — NCA_append_report","text":"","code":"# We need a state object to use below sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE state = sess_res$state  # here we need an empty report object for tabular data rpt = list(summary = list(), sheets=list())  # Now we append the report indicating we want # Excel output: rpt_res = NCA_append_report(state,   rpt           = rpt,   rpttype       = \"xlsx\",   gen_code_only = TRUE)  # Shows if report elements are present rpt_res$hasrptele #> [1] TRUE  # Code chunk to generate report element cat(paste(rpt_res$code, collapse=\"\\n\")) #> rpt[[\"sheets\"]][[\"NCA_1_RES\"]]=NCA_1_table_ind_params[[\"one_table\"]] #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_1_RES\", #>     Description=\"PK Example (indiviudal results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_1_RAW\"]]=as.data.frame(NCA_1_res) #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_1_RAW\", #>     Description=\"PK Example (raw NCA results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_2_RES\"]]=NCA_2_table_ind_params[[\"one_table\"]] #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_2_RES\", #>     Description=\"PK/PD Example (indiviudal results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_2_RAW\"]]=as.data.frame(NCA_2_res) #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_2_RAW\", #>     Description=\"PK/PD Example (raw NCA results)\" #>   ) #> )"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_PKNCA_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","title":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","text":"Compiles Metadata PKNCA","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_PKNCA_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","text":"","code":"NCA_fetch_PKNCA_meta()"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_PKNCA_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","text":"Dataframe containing PKCNA metadata NCA parameters.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_PKNCA_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","text":"","code":"PKNCA_meta = NCA_fetch_PKNCA_meta() utils::head(PKNCA_meta) #> $parameters #>                parameter       unit_type #> 1                  start            time #> 2                    end            time #> 3                auclast             auc #> 4                 aucall             auc #> 5               aumclast            aumc #> 6                aumcall            aumc #> 7            aucint.last             auc #> 8       aucint.last.dose             auc #> 9             aucint.all             auc #> 10       aucint.all.dose             auc #> 11                    c0            conc #> 12                  cmax            conc #> 13                  cmin            conc #> 14                  tmax            time #> 15                 tlast            time #> 16                tfirst            time #> 17             clast.obs            conc #> 18               cl.last       clearance #> 19                cl.all       clearance #> 20                     f        fraction #> 21              mrt.last            time #> 22           mrt.iv.last            time #> 23              vss.last          volume #> 24           vss.iv.last          volume #> 25                   cav            conc #> 26          cav.int.last            conc #> 27           cav.int.all            conc #> 28               ctrough            conc #> 29                cstart            conc #> 30                   ptr        fraction #> 31                  tlag            time #> 32              deg.fluc               % #> 33                 swing               % #> 34                  ceoi            conc #> 35  aucabove.predose.all             auc #> 36   aucabove.trough.all             auc #> 37            count_conc           count #> 38               totdose            dose #> 39                    ae          amount #> 40              clr.last renal_clearance #> 41               clr.obs renal_clearance #> 42              clr.pred renal_clearance #> 43                    fe        fraction #> 44        sparse_auclast             auc #> 45         sparse_auc_se             auc #> 46         sparse_auc_df           count #> 47            time_above            time #> 48             aucivlast             auc #> 49              aucivall             auc #> 50         aucivint.last             auc #> 51          aucivint.all             auc #> 52        aucivpbextlast               % #> 53         aucivpbextall               % #> 54    aucivpbextint.last               % #> 55     aucivpbextint.all               % #> 56             half.life            time #> 57             r.squared        unitless #> 58         adj.r.squared        unitless #> 59              lambda.z    inverse_time #> 60   lambda.z.time.first            time #> 61     lambda.z.n.points           count #> 62            clast.pred            conc #> 63            span.ratio        fraction #> 64        thalf.eff.last            time #> 65     thalf.eff.iv.last            time #> 66              kel.last    inverse_time #> 67           kel.iv.last    inverse_time #> 68            aucinf.obs             auc #> 69           aucinf.pred             auc #> 70           aumcinf.obs            aumc #> 71          aumcinf.pred            aumc #> 72        aucint.inf.obs             auc #> 73   aucint.inf.obs.dose             auc #> 74       aucint.inf.pred             auc #> 75  aucint.inf.pred.dose             auc #> 76          aucivinf.obs             auc #> 77         aucivinf.pred             auc #> 78     aucivpbextinf.obs               % #> 79    aucivpbextinf.pred               % #> 80           aucpext.obs               % #> 81          aucpext.pred               % #> 82                cl.obs       clearance #> 83               cl.pred       clearance #> 84               mrt.obs            time #> 85              mrt.pred            time #> 86            mrt.iv.obs            time #> 87           mrt.iv.pred            time #> 88            mrt.md.obs            time #> 89           mrt.md.pred            time #> 90                vz.obs          volume #> 91               vz.pred          volume #> 92               vss.obs          volume #> 93              vss.pred          volume #> 94            vss.iv.obs          volume #> 95           vss.iv.pred          volume #> 96            vss.md.obs          volume #> 97           vss.md.pred          volume #> 98       cav.int.inf.obs            conc #> 99      cav.int.inf.pred            conc #> 100        thalf.eff.obs            time #> 101       thalf.eff.pred            time #> 102     thalf.eff.iv.obs            time #> 103    thalf.eff.iv.pred            time #> 104              kel.obs    inverse_time #> 105             kel.pred    inverse_time #> 106           kel.iv.obs    inverse_time #> 107          kel.iv.pred    inverse_time #> 108           auclast.dn    auc_dosenorm #> 109            aucall.dn    auc_dosenorm #> 110        aucinf.obs.dn    auc_dosenorm #> 111       aucinf.pred.dn    auc_dosenorm #> 112          aumclast.dn   aumc_dosenorm #> 113           aumcall.dn   aumc_dosenorm #> 114       aumcinf.obs.dn   aumc_dosenorm #> 115      aumcinf.pred.dn   aumc_dosenorm #> 116              cmax.dn   conc_dosenorm #> 117              cmin.dn   conc_dosenorm #> 118         clast.obs.dn   conc_dosenorm #> 119        clast.pred.dn   conc_dosenorm #> 120               cav.dn   conc_dosenorm #> 121           ctrough.dn   conc_dosenorm #>                                                 pretty_name data_type #> 1                                            Interval Start  interval #> 2                                              Interval End  interval #> 3                                                   AUClast  interval #> 4                                                    AUCall  interval #> 5                                                 AUMC,last  interval #> 6                                                  AUMC,all  interval #> 7                   AUCint (based on AUClast extrapolation)  interval #> 8       AUCint (based on AUClast extrapolation, dose-aware)  interval #> 9                    AUCint (based on AUCall extrapolation)  interval #> 10       AUCint (based on AUCall extrapolation, dose-aware)  interval #> 11                                                       C0  interval #> 12                                                     Cmax  interval #> 13                                                     Cmin  interval #> 14                                                     Tmax  interval #> 15                                                    Tlast  interval #> 16                                                   Tfirst  interval #> 17                                                    Clast  interval #> 18                                    CL (based on AUClast)  interval #> 19                                     CL (based on AUCall)  interval #> 20                                          Bioavailability  interval #> 21                                   MRT (based on AUClast)  interval #> 22                    MRT (for IV dosing, based on AUClast)  interval #> 23                                   Vss (based on AUClast)  interval #> 24                    Vss (for IV dosing, based on AUClast)  interval #> 25                                                      Cav  interval #> 26                                                      Cav  interval #> 27                                                      Cav  interval #> 28                                                  Ctrough  interval #> 29                                                   Cstart  interval #> 30                                     Peak-to-trough ratio  interval #> 31                                                     Tlag  interval #> 32                                    Degree of fluctuation  interval #> 33                                                    Swing  interval #> 34                                                     Ceoi  interval #> 35                                                AUC,above  interval #> 36                                                AUC,above  interval #> 37                                      Concentration count  interval #> 38                                               Total dose  interval #> 39                                          Amount excreted  interval #> 40                           Renal clearance (from AUClast)  interval #> 41                        Renal clearance (from AUCinf,obs)  interval #> 42                       Renal clearance (from AUCinf,pred)  interval #> 43                                        Fraction excreted  interval #> 44                                           Sparse AUClast  interval #> 45                            Sparse AUClast standard error  interval #> 46                        Sparse AUClast degrees of freedom  interval #> 47                                 Time above Concentration  interval #> 48                                      AUClast (IV dosing)  interval #> 49                                       AUCall (IV dosing)  interval #> 50                                  AUCint,last (IV dosing)  interval #> 51                                   AUCint,all (IV dosing)  interval #> 52                               AUCbext (based on AUClast)  interval #> 53                                AUCbext (based on AUCall)  interval #> 54                           AUCbext (based on AUCint,last)  interval #> 55                            AUCbext (based on AUCint,all)  interval #> 56                                                Half-life  interval #> 57                                                    $r^2$  interval #> 58                                              $r^2_{adj}$  interval #> 59                                             $\\\\lambda_z$  interval #> 60                              First time for $\\\\lambda_z$  interval #> 61                       Number of points used for lambda_z  interval #> 62                                               Clast,pred  interval #> 63                                               Span ratio  interval #> 64                  Effective half-life (based on MRT,last)  interval #> 65    Effective half-life (for IV dosing, based on MRTlast)  interval #> 66                                   Kel (based on AUClast)  interval #> 67                    Kel (for IV dosing, based on AUClast)  interval #> 68                                               AUCinf,obs  interval #> 69                                              AUCinf,pred  interval #> 70                                             AUMC,inf,obs  interval #> 71                                            AUMC,inf,pred  interval #> 72               AUCint (based on AUCinf,obs extrapolation)  interval #> 73   AUCint (based on AUCinf,obs extrapolation, dose-aware)  interval #> 74              AUCint (based on AUCinf,pred extrapolation)  interval #> 75  AUCint (based on AUCinf,pred extrapolation, dose-aware)  interval #> 76                                   AUCinf,obs (IV dosing)  interval #> 77                                  AUCinf,pred (IV dosing)  interval #> 78                            AUCbext (based on AUCinf,obs)  interval #> 79                           AUCbext (based on AUCinf,pred)  interval #> 80                            AUCpext (based on AUCinf,obs)  interval #> 81                           AUCpext (based on AUCinf,pred)  interval #> 82                                 CL (based on AUCinf,obs)  interval #> 83                                CL (based on AUCinf,pred)  interval #> 84                                MRT (based on AUCinf,obs)  interval #> 85                               MRT (based on AUCinf,pred)  interval #> 86                 MRT (for IV dosing, based on AUCinf,obs)  interval #> 87                MRT (for IV dosing, based on AUCinf,pred)  interval #> 88           MRT (for multiple dosing, based on AUCinf,obs)  interval #> 89          MRT (for multiple dosing, based on AUCinf,pred)  interval #> 90                                 Vz (based on AUCinf,obs)  interval #> 91                                Vz (based on AUCinf,pred)  interval #> 92                                Vss (based on AUCinf,obs)  interval #> 93                               Vss (based on AUCinf,pred)  interval #> 94                 Vss (for IV dosing, based on AUCinf,obs)  interval #> 95                Vss (for IV dosing, based on AUCinf,pred)  interval #> 96              Vss (for multiple-dose, based on Clast,obs)  interval #> 97             Vss (for multiple-dose, based on Clast,pred)  interval #> 98                                                      Cav  interval #> 99                                                      Cav  interval #> 100                  Effective half-life (based on MRT,obs)  interval #> 101                 Effective half-life (based on MRT,pred)  interval #> 102   Effective half-life (for IV dosing, based on MRT,obs)  interval #> 103  Effective half-life (for IV dosing, based on MRT,pred)  interval #> 104                               Kel (based on AUCinf,obs)  interval #> 105                              Kel (based on AUCinf,pred)  interval #> 106                Kel (for IV dosing, based on AUCinf,obs)  interval #> 107               Kel (for IV dosing, based on AUCinf,pred)  interval #> 108                               AUClast (dose-normalized)  interval #> 109                                AUCall (dose-normalized)  interval #> 110                            AUCinf,obs (dose-normalized)  interval #> 111                           AUCinf,pred (dose-normalized)  interval #> 112                             AUMC,last (dose-normalized)  interval #> 113                              AUMC,all (dose-normalized)  interval #> 114                          AUMC,inf,obs (dose-normalized)  interval #> 115                         AUMC,inf,pred (dose-normalized)  interval #> 116                                  Cmax (dose-normalized)  interval #> 117                                  Cmin (dose-normalized)  interval #> 118                                 Clast (dose-normalized)  interval #> 119                            Clast,pred (dose-normalized)  interval #> 120                                   Cav (dose-normalized)  interval #> 121                               Ctrough (dose-normalized)  interval #>                                                                                                                                                                                                                                                                                                                                                              desc #> 1                                                                                                                                                                                                                                                                                                                                   Starting time of the interval #> 2                                                                                                                                                                                                                                                                                                              Ending time of the interval (potentially infinity) #> 3                                                                                                                                                                                                                      The area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification #> 4                                                                                                     The area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification plus the triangle from that last concentration to 0 at the first concentration below the limit of quantification #> 5                                                                                                                                                                                                               The area under the concentration time moment curve from the beginning of the interval to the last concentration above the limit of quantification #> 6                                                                                The area under the concentration time moment curve from the beginning of the interval to the last concentration above the limit of quantification plus the moment of the triangle from that last concentration to 0 at the first concentration below the limit of quantification #> 7                                                                                                                                                                                                                                  The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) #> 8                                                                                                                                                                    The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) with dose-aware interpolation/extrapolation of concentrations #> 9                                                                                                                                                                           The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) #> 10                                                                                                            The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) with dose-aware interpolation/extrapolation of concentrations #> 11                                                                                                                                                                                                                                                                                                                        Initial concentration after an IV bolus #> 12                                                                                                                                                                                                                                                                                                                                 Maximum observed concentration #> 13                                                                                                                                                                                                                                                                                                                                 Minimum observed concentration #> 14                                                                                                                                                                                                                                                                                                                     Time of the maximum observed concentration #> 15                                                                                                                                                                                                                                                                                      Time of the last concentration observed above the limit of quantification #> 16                                                                                                                                                                                                                                                                                              Time of the first concentration above the limit of quantification #> 17                                                                                                                                                                                                                                                                                              The last concentration observed above the limit of quantification #> 18                                                                                                                                                                                                                                                                                                       Clearance or observed oral clearance calculated to Clast #> 19                                                                                                                                                                                                                                                                                                    Clearance or observed oral clearance calculated with AUCall #> 20                                                                                                                                                                                                                                                                                                                    Bioavailability or relative bioavailability #> 21                                                                                                                                                                                                                                                                                       The mean residence time to the last observed concentration above the LOQ #> 22                                                                                                                                                                                                                                                        The mean residence time to the last observed concentration above the LOQ correcting for dosing duration #> 23                                                                                                                                                                                                                                                                                              The steady-state volume of distribution calculating through Tlast #> 24                                                                                                                                                                                                                                                                    The steady-state volume of distribution with intravenous infusion calculating through Tlast #> 25                                                                                                                                                                                                                                                                                         The average concentration during an interval (calculated with AUClast) #> 26                                                                                                                                                                                                                                                                                     The average concentration during an interval (calculated with AUCint.last) #> 27                                                                                                                                                                                                                                                                                      The average concentration during an interval (calculated with AUCint.all) #> 28                                                                                                                                                                                                                                                                                                                     The trough (end of interval) concentration #> 29                                                                                                                                                                                                                                                                                                                                      The predose concentration #> 30                                                                                                                                                                                                                                                                                                                                Peak-to-Trough ratio (fraction) #> 31                                                                                                                                                                                                                                                                                                                                                       Lag time #> 32                                                                                                                                                                                                                                                                                                                                          Degree of fluctuation #> 33                                                                                                                                                                                                                                                                                                                                         Swing relative to Cmin #> 34                                                                                                                                                                                                                                                                                                                           Concentration at the end of infusion #> 35  The area under the concentration time the beginning of the interval to the last concentration above the limit of quantification plus the triangle from that last concentration to 0 at the first concentration below the limit of quantification, with a concentration subtracted from all concentrations and values below zero after subtraction set to zero #> 36  The area under the concentration time the beginning of the interval to the last concentration above the limit of quantification plus the triangle from that last concentration to 0 at the first concentration below the limit of quantification, with a concentration subtracted from all concentrations and values below zero after subtraction set to zero #> 37                                                                                                                                                                                                                                                                                                             Number of non-missing concentrations for a subject #> 38                                                                                                                                                                                                                                                                                                                     Total dose administered during an interval #> 39                                                                                                                                                                                                                                                                                                            The amount excreted (typically into urine or feces) #> 40                                                                                                                                                                                                                                                                                                                   The renal clearance calculated using AUClast #> 41                                                                                                                                                                                                                                                                                                                The renal clearance calculated using AUCinf,obs #> 42                                                                                                                                                                                                                                                                                                               The renal clearance calculated using AUCinf,pred #> 43                                                                                                                                                                                                                                                                                                                              The fraction of the dose excreted #> 44                                                                                                                                                                                             For sparse PK sampling, the area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification #> 45                                                                                                                                                                       For sparse PK sampling, the standard error of the area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification #> 46                                                                                                                                                    For sparse PK sampling, the standard error degrees of freedom of the area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification #> 47                                                                                                                                                                                                                                                                                                                               Time above a given concentration #> 48                                                                                                                                                                                                                                                                    The AUClast calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 49                                                                                                                                                                                                                                                                     The AUCall calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 50                                                                                                                                                                                                                                                                The AUCint,last calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 51                                                                                                                                                                                                                                                                 The AUCint,all calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 52                                                                                                                                                                                                                                                                                         The back-extrapolation percent for intravenous dosing based on AUClast #> 53                                                                                                                                                                                                                                                                                          The back-extrapolation percent for intravenous dosing based on AUCall #> 54                                                                                                                                                                                                                                                                                     The back-extrapolation percent for intravenous dosing based on AUCint,last #> 55                                                                                                                                                                                                                                                                                      The back-extrapolation percent for intravenous dosing based on AUCint,all #> 56                                                                                                                                                                                                                                                                                                                                       The (terminal) half-life #> 57                                                                                                                                                                                                                                                                                                                     The r^2 value of the half-life calculation #> 58                                                                                                                                                                                                                                                                                                            The adjusted r^2 value of the half-life calculation #> 59                                                                                                                                                                                                                                                                                                                 The elimination rate of the terminal half-life #> 60                                                                                                                                                                                                                                                                                                     The first time point used for the calculation of half-life #> 61                                                                                                                                                                                                                                                                                                     The number of points used for the calculation of half-life #> 62                                                                                                                                                                                                                                                                                                       The concentration at Tlast as predicted by the half-life #> 63                                                                                                                                                                                                                                                                                      The ratio of the half-life to the duration used for half-life calculation #> 64                                                                                                                                                                                                                                                                                                       The effective half-life (as determined from the MRTlast) #> 65                                                                                                                                                                                                                                                                                           The effective half-life (as determined from the intravenous MRTlast) #> 66                                                                                                                                                                                                                                                                                                    Elimination rate (as calculated from the MRT using AUClast) #> 67                                                                                                                                                                                                                                                                                                  Elimination rate (as calculated from the intravenous MRTlast) #> 68                                                                                                                                                                                                              The area under the concentration time curve from the beginning of the interval to infinity with extrapolation to infinity from the observed Clast #> 69                                                                                                                                                                                                             The area under the concentration time curve from the beginning of the interval to infinity with extrapolation to infinity from the predicted Clast #> 70                                                                                                                                                                                                       The area under the concentration time moment curve from the beginning of the interval to infinity with extrapolation to infinity from the observed Clast #> 71                                                                                                                                                                                                      The area under the concentration time moment curve from the beginning of the interval to infinity with extrapolation to infinity from the predicted Clast #> 72                                                                                                                                                                                                                                 The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) #> 73                                                                                                                                                                   The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) with dose-aware interpolation/extrapolation of concentrations #> 74                                                                                                                                                                          The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) #> 75                                                                                                            The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) with dose-aware interpolation/extrapolation of concentrations #> 76                                                                                                                                                                                                                                                                 The AUCinf,obs calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 77                                                                                                                                                                                                                                                                           The  calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 78                                                                                                                                                                                                                                                                                      The back-extrapolation percent for intravenous dosing based on AUCinf,obs #> 79                                                                                                                                                                                                                                                                                     The back-extrapolation percent for intravenous dosing based on AUCinf,pred #> 80                                                                                                                                                                                                                                                                      Percent of the AUCinf that is extrapolated after Tlast calculated from the observed Clast #> 81                                                                                                                                                                                                                                                                     Percent of the AUCinf that is extrapolated after Tlast calculated from the predicted Clast #> 82                                                                                                                                                                                                                                                                                            Clearance or observed oral clearance calculated with observed Clast #> 83                                                                                                                                                                                                                                                                                           Clearance or observed oral clearance calculated with predicted Clast #> 84                                                                                                                                                                                                                                                                                                       The mean residence time to infinity using observed Clast #> 85                                                                                                                                                                                                                                                                                                      The mean residence time to infinity using predicted Clast #> 86                                                                                                                                                                                                                                                                        The mean residence time to infinity using observed Clast correcting for dosing duration #> 87                                                                                                                                                                                                                                                                       The mean residence time to infinity using predicted Clast correcting for dosing duration #> 88                                                                                                                                                                                                                                                                       The mean residence time with multiple dosing and nonlinear kinetics using observed Clast #> 89                                                                                                                                                                                                                                                                      The mean residence time with multiple dosing and nonlinear kinetics using predicted Clast #> 90                                                                                                                                                                                                                                                                                                       The terminal volume of distribution using observed Clast #> 91                                                                                                                                                                                                                                                                                                      The terminal volume of distribution using predicted Clast #> 92                                                                                                                                                                                                                                                                                                   The steady-state volume of distribution using observed Clast #> 93                                                                                                                                                                                                                                                                                                  The steady-state volume of distribution using predicted Clast #> 94                                                                                                                                                                                                                                                                         The steady-state volume of distribution with intravenous infusion using observed Clast #> 95                                                                                                                                                                                                                                                                        The steady-state volume of distribution with intravenous infusion using predicted Clast #> 96                                                                                                                                                                                                                                                                  The steady-state volume of distribution for nonlinear multiple-dose data using observed Clast #> 97                                                                                                                                                                                                                                                                 The steady-state volume of distribution for nonlinear multiple-dose data using predicted Clast #> 98                                                                                                                                                                                                                                                                                  The average concentration during an interval (calculated with AUCint.inf.obs) #> 99                                                                                                                                                                                                                                                                                 The average concentration during an interval (calculated with AUCint.inf.pred) #> 100                                                                                                                                                                                                                                                                                                       The effective half-life (as determined from the MRTobs) #> 101                                                                                                                                                                                                                                                                                                      The effective half-life (as determined from the MRTpred) #> 102                                                                                                                                                                                                                                                                                           The effective half-life (as determined from the intravenous MRTobs) #> 103                                                                                                                                                                                                                                                                                          The effective half-life (as determined from the intravenous MRTpred) #> 104                                                                                                                                                                                                                                                                                             Elimination rate (as calculated from the MRT with observed Clast) #> 105                                                                                                                                                                                                                                                                                            Elimination rate (as calculated from the MRT with predicted Clast) #> 106                                                                                                                                                                                                                                                                                                  Elimination rate (as calculated from the intravenous MRTobs) #> 107                                                                                                                                                                                                                                                                                                 Elimination rate (as calculated from the intravenous MRTpred) #> 108                                                                                                                                                                                                                                                                                                                                       Dose normalized auclast #> 109                                                                                                                                                                                                                                                                                                                                        Dose normalized aucall #> 110                                                                                                                                                                                                                                                                                                                                    Dose normalized aucinf.obs #> 111                                                                                                                                                                                                                                                                                                                                   Dose normalized aucinf.pred #> 112                                                                                                                                                                                                                                                                                                                                      Dose normalized aumclast #> 113                                                                                                                                                                                                                                                                                                                                       Dose normalized aumcall #> 114                                                                                                                                                                                                                                                                                                                                   Dose normalized aumcinf.obs #> 115                                                                                                                                                                                                                                                                                                                                  Dose normalized aumcinf.pred #> 116                                                                                                                                                                                                                                                                                                                                          Dose normalized cmax #> 117                                                                                                                                                                                                                                                                                                                                          Dose normalized cmin #> 118                                                                                                                                                                                                                                                                                                                                     Dose normalized clast.obs #> 119                                                                                                                                                                                                                                                                                                                                    Dose normalized clast.pred #> 120                                                                                                                                                                                                                                                                                                                                           Dose normalized cav #> 121                                                                                                                                                                                                                                                                                                                                       Dose normalized ctrough #>"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Analysis Dataset — NCA_fetch_ana_ds","title":"Fetch Analysis Dataset — NCA_fetch_ana_ds","text":"Fetches dataset used specified analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Analysis Dataset — NCA_fetch_ana_ds","text":"","code":"NCA_fetch_ana_ds(state, current_ana)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Analysis Dataset — NCA_fetch_ana_ds","text":"state NCA state NCA_fetch_state() current_ana Current value analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Analysis Dataset — NCA_fetch_ana_ds","text":"Dataset ds field FM_fetch_ds()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Analysis Dataset — NCA_fetch_ana_ds","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_pknca.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch PKNCA Results Object — NCA_fetch_ana_pknca","title":"Fetch PKNCA Results Object — NCA_fetch_ana_pknca","text":"Fetches PKNCA output specified analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_pknca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch PKNCA Results Object — NCA_fetch_ana_pknca","text":"","code":"NCA_fetch_ana_pknca(state, current_ana)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_pknca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch PKNCA Results Object — NCA_fetch_ana_pknca","text":"state NCA state NCA_fetch_state() current_ana Current value analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_pknca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch PKNCA Results Object — NCA_fetch_ana_pknca","text":"Dataset ds field FM_fetch_ds()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ana_pknca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch PKNCA Results Object — NCA_fetch_ana_pknca","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Module Code — NCA_fetch_code","title":"Fetch Module Code — NCA_fetch_code","text":"Fetches code generate results seen app","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Module Code — NCA_fetch_code","text":"","code":"NCA_fetch_code(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Module Code — NCA_fetch_code","text":"state NCA state NCA_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Module Code — NCA_fetch_code","text":"Character object vector lines code","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Module Code — NCA_fetch_code","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Current Analysis — NCA_fetch_current_ana","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"Takes NCA state returns current active analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"","code":"NCA_fetch_current_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"state NCA state NCA_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"List containing details current analysis. structure list structure state$NCA$anas output NCA_fetch_state().","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_ana.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches the Current Analysis Object — NCA_fetch_current_obj","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"Takes current state object type returns currently selected object. example specified figure, look output figure selected figure number figure return ggplot object . subject id highlighting certain NCA aspects (e.g. points used half-life)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"","code":"NCA_fetch_current_obj(state, obj_type)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"state NCA state NCA_fetch_state() obj_type Type object return (either \"table\" \"figure\").","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"List format depends obj_type. figures: ggplot:   ggplot object figure. isgood:   Return status function. msgs:     Messages passed back user. tables: df:       Dataframe current table. ft:       Flextable object current table. notes:    table notes included. isgood:   Return status function. msgs:     Messages passed back user.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_current_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"Time Analyte Concentration (ng/mL) ID (day)  1 2 3 4 5 6 0 BM_ng_ml 1250 1030 831 1170 1140 868 1 BM_ng_ml 1650 1160 932 1340 1500 988 2 BM_ng_ml 1950 1240 1010 1450 1740 1080 21 BM_ng_ml 2280 1500 1130 1690 2190 1310 28 BM_ng_ml 2070 1440 1070 1610 2060 1250 3 BM_ng_ml 2170 1300 1070 1530 1900 1140 35 BM_ng_ml 1890 1380 1010 1530 1930 1190 4 BM_ng_ml 2330 1340 1110 1590 2020 1200 42 BM_ng_ml 1760 1320 972 1460 1810 1130 7 BM_ng_ml 2580 1430 1180 1690 2200 1290 0 C_ng_ml BLQ BLQ BLQ BLQ BLQ BLQ 1 C_ng_ml 690 750 670 638 855 611 2 C_ng_ml 588 577 576 517 668 521 21 C_ng_ml 123 274 139 173 228 194 28 C_ng_ml 95.5 220 104 135 188 155 3 C_ng_ml 506 508 501 438 549 456 35 C_ng_ml 75.8 177 77.8 105 156 125 4 C_ng_ml 438 476 441 384 472 409 42 C_ng_ml 60.6 142 58.6 82.2 128 100 7 C_ng_ml 303 425 320 300 360 325","code":"# We need a state object to use below sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE state = sess_res$state  # Current active table: res = NCA_fetch_current_obj(state, \"table\") res$ft .cl-78981b92{}.cl-789434d2{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7895b6a4{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7895c6f8{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c6f9{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c702{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c703{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c70c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c70d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c70e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c716{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c717{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c720{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c721{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7895c72a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}TimeAnalyteConcentration (ng/mL) by ID(day) 1234560BM_ng_ml12501030831117011408681BM_ng_ml16501160932134015009882BM_ng_ml19501240101014501740108021BM_ng_ml22801500113016902190131028BM_ng_ml2070144010701610206012503BM_ng_ml21701300107015301900114035BM_ng_ml1890138010101530193011904BM_ng_ml23301340111015902020120042BM_ng_ml176013209721460181011307BM_ng_ml2580143011801690220012900C_ng_mlBLQBLQBLQBLQBLQBLQ1C_ng_ml6907506706388556112C_ng_ml58857757651766852121C_ng_ml12327413917322819428C_ng_ml95.52201041351881553C_ng_ml50650850143854945635C_ng_ml75.817777.81051561254C_ng_ml43847644138447240942C_ng_ml60.614258.682.21281007C_ng_ml303425320300360325 # Current active figure: res = NCA_fetch_current_obj(state, \"figure\") res$ggplot"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_data_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Details About Data Requirements — NCA_fetch_data_format","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"Use get information data formats.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_data_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"","code":"NCA_fetch_data_format(   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\") )"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_data_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"MOD_yaml_file Module configuration file MC main section.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_data_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"List details data formats","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_data_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"","code":"NCA_fetch_data_format() #>   sname              Column Required #> 1    id          Subject ID      yes #> 2  time                Time      yes #> 3 ntime        Nominal Time      yes #> 4  conc       Concentration      yes #> 5  dose                Dose      yes #> 6 route               Route      yes #> 7   dur Duration (optional)       no #> 8 cycle          Dose cycle      yes #>                                                                                                                          Description #> 1                                                                                                         Unique subject identifier. #> 2                                                                                        Time since the first dose. Must be numeric. #> 3                                                       Time since the last dose in the cycle (same units as Time). Must be numeric. #> 4                                          Observed concentration. Must be numeric, no NA values. Missing values should be set to 0. #> 5                                                                                             Value of dose given (must be numeric). #> 6 Doseing route. It should be either 'extravascular' or 'intravascular' but ruminate will make an effort to figure out other values. #> 7                                                 Doseing duration (same units as Time). If set to N/A a value of 0 will be assumed. #> 8                                                                                                                 Current dose cycle"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Module Datasets — NCA_fetch_ds","title":"Fetch Module Datasets — NCA_fetch_ds","text":"Fetches datasets contained module","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Module Datasets — NCA_fetch_ds","text":"","code":"NCA_fetch_ds(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Module Datasets — NCA_fetch_ds","text":"state NCA state NCA_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Module Datasets — NCA_fetch_ds","text":"list containing following elements isgood:    Return status function. hasds:     Boolean indicator module datasets msgs:      Messages passed back user. ds:        List datasets. list element name R-object dataset. element following structure: label: Text label dataset MOD_TYPE: Short name type module. id: module ID DS: Dataframe containing actual dataset. DSMETA: Metadata describing DS code: Complete code build dataset. checksum: Module checksum. DSchecksum: Dataset checksum.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Module Datasets — NCA_fetch_ds","text":"","code":"# We need a state object to use below sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE state = sess_res$state  myDs = NCA_fetch_ds(state) #> → NCA: No metadata for PKNCA_raw: CMT"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_np_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches NCA Parameter Meta Information — NCA_fetch_np_meta","title":"Fetches NCA Parameter Meta Information — NCA_fetch_np_meta","text":"provides meta information NCA parameters. includes parameter names, text descriptions, formatting (md LaTeX).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_np_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches NCA Parameter Meta Information — NCA_fetch_np_meta","text":"","code":"NCA_fetch_np_meta(   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\") )"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_np_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches NCA Parameter Meta Information — NCA_fetch_np_meta","text":"MOD_yaml_file Module configuration file MC main section.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_np_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches NCA Parameter Meta Information — NCA_fetch_np_meta","text":"List following elements: choices: List parameter choices grouped values specified module configuration file. summary: Data frame meta data NCA parameters following columns: parameter:   Name parameter PKNCA. text:        Name parameter plain text. md:          Parameter name formatted Markdown. latex:       Parameter name formatted using LaTeX. description: Verbose description plain text parameter.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_np_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches NCA Parameter Meta Information — NCA_fetch_np_meta","text":"","code":"NCA_fetch_np_meta() #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> $choices #> $choices$`Common Parameters` #> $choices$`Common Parameters`$AUCall #> [1] \"aucall\" #>  #> $choices$`Common Parameters`$C0 #> [1] \"c0\" #>  #> $choices$`Common Parameters`$`CL (based on AUCall)` #> [1] \"cl.all\" #>  #> $choices$`Common Parameters`$`CL (based on AUClast)` #> [1] \"cl.last\" #>  #> $choices$`Common Parameters`$Cmax #> [1] \"cmax\" #>  #> $choices$`Common Parameters`$`Half-life` #> [1] \"half.life\" #>  #> $choices$`Common Parameters`$`r²` #> [1] \"r.squared\" #>  #>  #> $choices$Other #> $choices$Other$`r² (Adj)` #> [1] \"adj.r.squared\" #>  #> $choices$Other$`Amount excreted` #> [1] \"ae\" #>  #> $choices$Other$`AUCall (dose-normalized)` #> [1] \"aucall.dn\" #>  #> $choices$Other$`AUCinf,obs` #> [1] \"aucinf.obs\" #>  #> $choices$Other$`AUCinf,obs (dose-normalized)` #> [1] \"aucinf.obs.dn\" #>  #> $choices$Other$`AUCinf,pred (dose-normalized)` #> [1] \"aucinf.pred.dn\" #>  #> $choices$Other$`AUCint (based on AUCall extrapolation)` #> [1] \"aucint.all\" #>  #> $choices$Other$`AUCint (based on AUCall extrapolation, dose-aware)` #> [1] \"aucint.all.dose\" #>  #> $choices$Other$`AUCint (based on AUCinf,obs extrapolation)` #> [1] \"aucint.inf.obs\" #>  #> $choices$Other$`AUCint (based on AUCinf,obs extrapolation, dose-aware)` #> [1] \"aucint.inf.obs.dose\" #>  #> $choices$Other$`AUCint (based on AUCinf,pred extrapolation)` #> [1] \"aucint.inf.pred\" #>  #> $choices$Other$`AUCint (based on AUCinf,pred extrapolation, dose-aware)` #> [1] \"aucint.inf.pred.dose\" #>  #> $choices$Other$`AUCint (based on AUClast extrapolation)` #> [1] \"aucint.last\" #>  #> $choices$Other$`AUCint (based on AUClast extrapolation, dose-aware)` #> [1] \"aucint.last.dose\" #>  #> $choices$Other$`AUCall (IV dosing)` #> [1] \"aucivall\" #>  #> $choices$Other$`AUCinf,obs (IV dosing)` #> [1] \"aucivinf.obs\" #>  #> $choices$Other$`AUCinf,pred (IV dosing)` #> [1] \"aucivinf.pred\" #>  #> $choices$Other$`AUCint,all (IV dosing)` #> [1] \"aucivint.all\" #>  #> $choices$Other$`AUCint,last (IV dosing)` #> [1] \"aucivint.last\" #>  #> $choices$Other$`AUClast (IV dosing)` #> [1] \"aucivlast\" #>  #> $choices$Other$`AUCbext (based on AUCall)` #> [1] \"aucivpbextall\" #>  #> $choices$Other$`AUCbext (based on AUCinf,obs)` #> [1] \"aucivpbextinf.obs\" #>  #> $choices$Other$`AUCbext (based on AUCinf,pred)` #> [1] \"aucivpbextinf.pred\" #>  #> $choices$Other$`AUCbext (based on AUCint,all)` #> [1] \"aucivpbextint.all\" #>  #> $choices$Other$`AUCbext (based on AUCint,last)` #> [1] \"aucivpbextint.last\" #>  #> $choices$Other$`AUCbext (based on AUClast)` #> [1] \"aucivpbextlast\" #>  #> $choices$Other$AUClast #> [1] \"auclast\" #>  #> $choices$Other$`AUClast (dose-normalized)` #> [1] \"auclast.dn\" #>  #> $choices$Other$`AUCpext (based on AUCinf,obs)` #> [1] \"aucpext.obs\" #>  #> $choices$Other$`AUCpext (based on AUCinf,pred)` #> [1] \"aucpext.pred\" #>  #> $choices$Other$`AUMC,all` #> [1] \"aumcall\" #>  #> $choices$Other$`AUMC,all (dose-normalized)` #> [1] \"aumcall.dn\" #>  #> $choices$Other$`AUMC,inf,obs` #> [1] \"aumcinf.obs\" #>  #> $choices$Other$`AUMC,inf,obs (dose-normalized)` #> [1] \"aumcinf.obs.dn\" #>  #> $choices$Other$`AUMC,inf,pred (dose-normalized)` #> [1] \"aumcinf.pred.dn\" #>  #> $choices$Other$`AUMC,last` #> [1] \"aumclast\" #>  #> $choices$Other$`AUMC,last (dose-normalized)` #> [1] \"aumclast.dn\" #>  #> $choices$Other$Cav #> [1] \"cav.int.last\" #>  #> $choices$Other$`Cav (dose-normalized)` #> [1] \"cav.dn\" #>  #> $choices$Other$Ceoi #> [1] \"ceoi\" #>  #> $choices$Other$`CL (based on AUCinf,obs)` #> [1] \"cl.obs\" #>  #> $choices$Other$`CL (based on AUCinf,pred)` #> [1] \"cl.pred\" #>  #> $choices$Other$Clast #> [1] \"clast.obs\" #>  #> $choices$Other$`Clast,pred` #> [1] \"clast.pred\" #>  #> $choices$Other$`Clast,pred (dose-normalized)` #> [1] \"clast.pred.dn\" #>  #> $choices$Other$`Renal clearance (from AUClast)` #> [1] \"clr.last\" #>  #> $choices$Other$`Renal clearance (from AUCinf,obs)` #> [1] \"clr.obs\" #>  #> $choices$Other$`Renal clearance (from AUCinf,pred)` #> [1] \"clr.pred\" #>  #> $choices$Other$`Cmax (dose-normalized)` #> [1] \"cmax.dn\" #>  #> $choices$Other$Cmin #> [1] \"cmin\" #>  #> $choices$Other$`Cmin (dose-normalized)` #> [1] \"cmin.dn\" #>  #> $choices$Other$`Concentration count` #> [1] \"count_conc\" #>  #> $choices$Other$Ctrough #> [1] \"ctrough\" #>  #> $choices$Other$`Ctrough (dose-normalized)` #> [1] \"ctrough.dn\" #>  #> $choices$Other$`Degree of fluctuation` #> [1] \"deg.fluc\" #>  #> $choices$Other$`Interval End` #> [1] \"end\" #>  #> $choices$Other$Bioavailability #> [1] \"f\" #>  #> $choices$Other$`Fraction excreted` #> [1] \"fe\" #>  #> $choices$Other$`Kel (for IV dosing, based on AUClast)` #> [1] \"kel.iv.last\" #>  #> $choices$Other$`Kel (for IV dosing, based on AUCinf,obs)` #> [1] \"kel.iv.obs\" #>  #> $choices$Other$`Kel (for IV dosing, based on AUCinf,pred)` #> [1] \"kel.iv.pred\" #>  #> $choices$Other$`Kel (based on AUClast)` #> [1] \"kel.last\" #>  #> $choices$Other$`Kel (based on AUCinf,obs)` #> [1] \"kel.obs\" #>  #> $choices$Other$`Kel (based on AUCinf,pred)` #> [1] \"kel.pred\" #>  #> $choices$Other$λz #> [1] \"lambda.z\" #>  #> $choices$Other$`λz,n` #> [1] \"lambda.z.n.points\" #>  #> $choices$Other$`λz (t 1ˢᵗ)` #> [1] \"lambda.z.time.first\" #>  #> $choices$Other$`MRT (for IV dosing, based on AUClast)` #> [1] \"mrt.iv.last\" #>  #> $choices$Other$`MRT (for IV dosing, based on AUCinf,obs)` #> [1] \"mrt.iv.obs\" #>  #> $choices$Other$`MRT (for IV dosing, based on AUCinf,pred)` #> [1] \"mrt.iv.pred\" #>  #> $choices$Other$`MRT (based on AUClast)` #> [1] \"mrt.last\" #>  #> $choices$Other$`MRT (for multiple dosing, based on AUCinf,obs)` #> [1] \"mrt.md.obs\" #>  #> $choices$Other$`MRT (for multiple dosing, based on AUCinf,pred)` #> [1] \"mrt.md.pred\" #>  #> $choices$Other$`MRT (based on AUCinf,obs)` #> [1] \"mrt.obs\" #>  #> $choices$Other$`MRT (based on AUCinf,pred)` #> [1] \"mrt.pred\" #>  #> $choices$Other$`Peak-to-trough ratio` #> [1] \"ptr\" #>  #> $choices$Other$`Span ratio` #> [1] \"span.ratio\" #>  #> $choices$Other$`Interval Start` #> [1] \"start\" #>  #> $choices$Other$Swing #> [1] \"swing\" #>  #> $choices$Other$`t 1ˢᵗ` #> [1] \"tfirst\" #>  #> $choices$Other$`Effective half-life (for IV dosing, based on MRTlast)` #> [1] \"thalf.eff.iv.last\" #>  #> $choices$Other$`Effective half-life (for IV dosing, based on MRT,obs)` #> [1] \"thalf.eff.iv.obs\" #>  #> $choices$Other$`Effective half-life (for IV dosing, based on MRT,pred)` #> [1] \"thalf.eff.iv.pred\" #>  #> $choices$Other$`Effective half-life (based on MRT,last)` #> [1] \"thalf.eff.last\" #>  #> $choices$Other$`Effective half-life (based on MRT,obs)` #> [1] \"thalf.eff.obs\" #>  #> $choices$Other$`Effective half-life (based on MRT,pred)` #> [1] \"thalf.eff.pred\" #>  #> $choices$Other$`Time above Concentration` #> [1] \"time_above\" #>  #> $choices$Other$Tlag #> [1] \"tlag\" #>  #> $choices$Other$Tlast #> [1] \"tlast\" #>  #> $choices$Other$`Total dose` #> [1] \"totdose\" #>  #> $choices$Other$`Vss (for IV dosing, based on AUClast)` #> [1] \"vss.iv.last\" #>  #> $choices$Other$`Vss (for IV dosing, based on AUCinf,obs)` #> [1] \"vss.iv.obs\" #>  #> $choices$Other$`Vss (for IV dosing, based on AUCinf,pred)` #> [1] \"vss.iv.pred\" #>  #> $choices$Other$`Vss (based on AUClast)` #> [1] \"vss.last\" #>  #> $choices$Other$`Vss (for multiple-dose, based on Clast,obs)` #> [1] \"vss.md.obs\" #>  #> $choices$Other$`Vss (for multiple-dose, based on Clast,pred)` #> [1] \"vss.md.pred\" #>  #> $choices$Other$`Vss (based on AUCinf,obs)` #> [1] \"vss.obs\" #>  #> $choices$Other$`Vss (based on AUCinf,pred)` #> [1] \"vss.pred\" #>  #> $choices$Other$`Vz (based on AUCinf,obs)` #> [1] \"vz.obs\" #>  #> $choices$Other$`Vz (based on AUCinf,pred)` #> [1] \"vz.pred\" #>  #>  #> $choices$`Sparse Analysis` #> $choices$`Sparse Analysis`$`Sparse AUClast` #> [1] \"sparse_auclast\" #>  #>  #>  #> $summary #>                parameter #> 1                 aucall #> 2          adj.r.squared #> 3                     ae #> 4              aucall.dn #> 5             aucinf.obs #> 6          aucinf.obs.dn #> 7         aucinf.pred.dn #> 8             aucint.all #> 9        aucint.all.dose #> 10        aucint.inf.obs #> 11   aucint.inf.obs.dose #> 12       aucint.inf.pred #> 13  aucint.inf.pred.dose #> 14           aucint.last #> 15      aucint.last.dose #> 16              aucivall #> 17          aucivinf.obs #> 18         aucivinf.pred #> 19          aucivint.all #> 20         aucivint.last #> 21             aucivlast #> 22         aucivpbextall #> 23     aucivpbextinf.obs #> 24    aucivpbextinf.pred #> 25     aucivpbextint.all #> 26    aucivpbextint.last #> 27        aucivpbextlast #> 28               auclast #> 29            auclast.dn #> 30           aucpext.obs #> 31          aucpext.pred #> 32               aumcall #> 33            aumcall.dn #> 34           aumcinf.obs #> 35        aumcinf.obs.dn #> 36       aumcinf.pred.dn #> 37              aumclast #> 38           aumclast.dn #> 39                    c0 #> 40                   cav #> 41           cav.int.all #> 42       cav.int.inf.obs #> 43      cav.int.inf.pred #> 44          cav.int.last #> 45                cav.dn #> 46                  ceoi #> 47                cl.all #> 48               cl.last #> 49                cl.obs #> 50               cl.pred #> 51             clast.obs #> 52            clast.pred #> 53         clast.pred.dn #> 54              clr.last #> 55               clr.obs #> 56              clr.pred #> 57                  cmax #> 58               cmax.dn #> 59                  cmin #> 60               cmin.dn #> 61            count_conc #> 62               ctrough #> 63            ctrough.dn #> 64              deg.fluc #> 65                   end #> 66                     f #> 67                    fe #> 68             half.life #> 69           kel.iv.last #> 70            kel.iv.obs #> 71           kel.iv.pred #> 72              kel.last #> 73               kel.obs #> 74              kel.pred #> 75              lambda.z #> 76     lambda.z.n.points #> 77   lambda.z.time.first #> 78           mrt.iv.last #> 79            mrt.iv.obs #> 80           mrt.iv.pred #> 81              mrt.last #> 82            mrt.md.obs #> 83           mrt.md.pred #> 84               mrt.obs #> 85              mrt.pred #> 86                   ptr #> 87             r.squared #> 88            span.ratio #> 89        sparse_auclast #> 90                 start #> 91                 swing #> 92                tfirst #> 93     thalf.eff.iv.last #> 94      thalf.eff.iv.obs #> 95     thalf.eff.iv.pred #> 96        thalf.eff.last #> 97         thalf.eff.obs #> 98        thalf.eff.pred #> 99            time_above #> 100                 tlag #> 101                tlast #> 102              totdose #> 103          vss.iv.last #> 104           vss.iv.obs #> 105          vss.iv.pred #> 106             vss.last #> 107           vss.md.obs #> 108          vss.md.pred #> 109              vss.obs #> 110             vss.pred #> 111               vz.obs #> 112              vz.pred #>                                                        text #> 1                                                    AUCall #> 2                                                  r² (Adj) #> 3                                           Amount excreted #> 4                                  AUCall (dose-normalized) #> 5                                                AUCinf,obs #> 6                              AUCinf,obs (dose-normalized) #> 7                             AUCinf,pred (dose-normalized) #> 8                    AUCint (based on AUCall extrapolation) #> 9        AUCint (based on AUCall extrapolation, dose-aware) #> 10               AUCint (based on AUCinf,obs extrapolation) #> 11   AUCint (based on AUCinf,obs extrapolation, dose-aware) #> 12              AUCint (based on AUCinf,pred extrapolation) #> 13  AUCint (based on AUCinf,pred extrapolation, dose-aware) #> 14                  AUCint (based on AUClast extrapolation) #> 15      AUCint (based on AUClast extrapolation, dose-aware) #> 16                                       AUCall (IV dosing) #> 17                                   AUCinf,obs (IV dosing) #> 18                                  AUCinf,pred (IV dosing) #> 19                                   AUCint,all (IV dosing) #> 20                                  AUCint,last (IV dosing) #> 21                                      AUClast (IV dosing) #> 22                                AUCbext (based on AUCall) #> 23                            AUCbext (based on AUCinf,obs) #> 24                           AUCbext (based on AUCinf,pred) #> 25                            AUCbext (based on AUCint,all) #> 26                           AUCbext (based on AUCint,last) #> 27                               AUCbext (based on AUClast) #> 28                                                  AUClast #> 29                                AUClast (dose-normalized) #> 30                            AUCpext (based on AUCinf,obs) #> 31                           AUCpext (based on AUCinf,pred) #> 32                                                 AUMC,all #> 33                               AUMC,all (dose-normalized) #> 34                                             AUMC,inf,obs #> 35                           AUMC,inf,obs (dose-normalized) #> 36                          AUMC,inf,pred (dose-normalized) #> 37                                                AUMC,last #> 38                              AUMC,last (dose-normalized) #> 39                                                       C0 #> 40                                                      Cav #> 41                                                      Cav #> 42                                                      Cav #> 43                                                      Cav #> 44                                                      Cav #> 45                                    Cav (dose-normalized) #> 46                                                     Ceoi #> 47                                     CL (based on AUCall) #> 48                                    CL (based on AUClast) #> 49                                 CL (based on AUCinf,obs) #> 50                                CL (based on AUCinf,pred) #> 51                                                    Clast #> 52                                               Clast,pred #> 53                             Clast,pred (dose-normalized) #> 54                           Renal clearance (from AUClast) #> 55                        Renal clearance (from AUCinf,obs) #> 56                       Renal clearance (from AUCinf,pred) #> 57                                                     Cmax #> 58                                   Cmax (dose-normalized) #> 59                                                     Cmin #> 60                                   Cmin (dose-normalized) #> 61                                      Concentration count #> 62                                                  Ctrough #> 63                                Ctrough (dose-normalized) #> 64                                    Degree of fluctuation #> 65                                             Interval End #> 66                                          Bioavailability #> 67                                        Fraction excreted #> 68                                                Half-life #> 69                    Kel (for IV dosing, based on AUClast) #> 70                 Kel (for IV dosing, based on AUCinf,obs) #> 71                Kel (for IV dosing, based on AUCinf,pred) #> 72                                   Kel (based on AUClast) #> 73                                Kel (based on AUCinf,obs) #> 74                               Kel (based on AUCinf,pred) #> 75                                                       λz #> 76                                                     λz,n #> 77                                               λz (t 1ˢᵗ) #> 78                    MRT (for IV dosing, based on AUClast) #> 79                 MRT (for IV dosing, based on AUCinf,obs) #> 80                MRT (for IV dosing, based on AUCinf,pred) #> 81                                   MRT (based on AUClast) #> 82           MRT (for multiple dosing, based on AUCinf,obs) #> 83          MRT (for multiple dosing, based on AUCinf,pred) #> 84                                MRT (based on AUCinf,obs) #> 85                               MRT (based on AUCinf,pred) #> 86                                     Peak-to-trough ratio #> 87                                                       r² #> 88                                               Span ratio #> 89                                           Sparse AUClast #> 90                                           Interval Start #> 91                                                    Swing #> 92                                                    t 1ˢᵗ #> 93    Effective half-life (for IV dosing, based on MRTlast) #> 94    Effective half-life (for IV dosing, based on MRT,obs) #> 95   Effective half-life (for IV dosing, based on MRT,pred) #> 96                  Effective half-life (based on MRT,last) #> 97                   Effective half-life (based on MRT,obs) #> 98                  Effective half-life (based on MRT,pred) #> 99                                 Time above Concentration #> 100                                                    Tlag #> 101                                                   Tlast #> 102                                              Total dose #> 103                   Vss (for IV dosing, based on AUClast) #> 104                Vss (for IV dosing, based on AUCinf,obs) #> 105               Vss (for IV dosing, based on AUCinf,pred) #> 106                                  Vss (based on AUClast) #> 107             Vss (for multiple-dose, based on Clast,obs) #> 108            Vss (for multiple-dose, based on Clast,pred) #> 109                               Vss (based on AUCinf,obs) #> 110                              Vss (based on AUCinf,pred) #> 111                                Vz (based on AUCinf,obs) #> 112                               Vz (based on AUCinf,pred) #>                                 md #> 1                         AUC~all~ #> 2                        Adj. R^2^ #> 3                               AE #> 4                      AUC~all,dn~ #> 5                     AUC~inf,obs~ #> 6                  AUC~inf,obs,dn~ #> 7                 AUC~inf,pred,dn~ #> 8                     AUC~int,all~ #> 9                AUC~int,all,dose~ #> 10                AUC~int,inf,obs~ #> 11           AUC~int,inf,obs,dose~ #> 12               AUC~int,inf,pred~ #> 13          AUC~int,inf,pred,dose~ #> 14                   AUC~int,last~ #> 15              AUC~int,last,dose~ #> 16                     AUC~iv,all~ #> 17                 AUC~iv,inf,obs~ #> 18                AUC~iv,inf,pred~ #> 19                 AUC~iv,int,all~ #> 20                AUC~iv,int,last~ #> 21                    AUC~iv,last~ #> 22                 AUC~iv,pbe,all~ #> 23             AUC~iv,pbe,inf,obs~ #> 24            AUC~iv,pbe,inf,pred~ #> 25             AUC~iv,pbe,inf,all~ #> 26            AUC~iv,pbe,inf,last~ #> 27                AUC~iv,pbe,last~ #> 28                       AUC~last~ #> 29                    AUC~last,dn~ #> 30                   AUC~pext,obs~ #> 31                  AUC~pext,pred~ #> 32                       AUMC~all~ #> 33                    AUMC~all,dn~ #> 34                   AUMC~inf,obs~ #> 35                AUMC~inf,obs,dn~ #> 36               AUMC~inf,pred,dn~ #> 37                      AUMC~last~ #> 38                   AUMC~last,dn~ #> 39                            C~0~ #> 40                          C~ave~ #> 41                  C~ave,int,all~ #> 42              C~ave,int,int,obs~ #> 43             C~ave,int,int,pred~ #> 44                 C~ave,int,last~ #> 45                       C~ave,dn~ #> 46                          C~EOI~ #> 47                              CL #> 48                        CL~last~ #> 49                         CL~obs~ #> 50                        CL~pred~ #> 51                    CL~last,obs~ #> 52                   CL~last,pred~ #> 53                CL~last,pred,dn~ #> 54                      CL~R,last~ #> 55                       CL~R,obs~ #> 56                      CL~R,pred~ #> 57                          C~max~ #> 58                       C~max,dn~ #> 59                          C~min~ #> 60                       C~min,dn~ #> 61                          N~obs~ #> 62                           C~tr~ #> 63                        C~tr,dn~ #> 64                             dgf #> 65                          t~end~ #> 66                            f~b~ #> 67                            f~e~ #> 68                         t~half~ #> 69                   k~el,iv,last~ #> 70                    k~el,iv,obs~ #> 71                   k~el,iv,pred~ #> 72                      k~el,last~ #> 73                       k~el,obs~ #> 74                      k~el,pred~ #> 75            <ff:symbol>l<\/ff>~z~ #> 76          <ff:symbol>l<\/ff>~z,n~ #> 77  <ff:symbol>l<\/ff>~z~ (t 1^st^) #> 78                    MRT~iv,last~ #> 79                     MRT~iv,obs~ #> 80                    MRT~iv,pred~ #> 81                       MRT~last~ #> 82                     MRT~md,obs~ #> 83                    MRT~md,pred~ #> 84                        MRT~obs~ #> 85                       MRT~pred~ #> 86                             PTR #> 87                            R^2^ #> 88                              SR #> 89                    AUC~last,sp~ #> 90                        t~start~ #> 91                           SWING #> 92                        t~first~ #> 93             t~half,eff,iv,last~ #> 94              t~half,eff,iv,obs~ #> 95             t~half,eff,iv,pred~ #> 96                t~half,eff,last~ #> 97                 t~half,eff,obs~ #> 98                t~half,eff,pred~ #> 99                           t~ab~ #> 100                         t~lag~ #> 101                        t~last~ #> 102                      Dose~tot~ #> 103                  V~ss,iv,last~ #> 104                   V~ss,iv,obs~ #> 105                  V~ss,iv,pred~ #> 106                  V~ss,iv,last~ #> 107                   V~ss,md,obs~ #> 108                  V~ss,md,pred~ #> 109                      V~ss,obs~ #> 110                     V~ss,pred~ #> 111                       V~z,obs~ #> 112                      V~z,pred~ #>                                                       latex #> 1                                                    AUCall #> 2                                               $r^2_{adj}$ #> 3                                           Amount excreted #> 4                                  AUCall (dose-normalized) #> 5                                                AUCinf,obs #> 6                              AUCinf,obs (dose-normalized) #> 7                             AUCinf,pred (dose-normalized) #> 8                    AUCint (based on AUCall extrapolation) #> 9        AUCint (based on AUCall extrapolation, dose-aware) #> 10               AUCint (based on AUCinf,obs extrapolation) #> 11   AUCint (based on AUCinf,obs extrapolation, dose-aware) #> 12              AUCint (based on AUCinf,pred extrapolation) #> 13  AUCint (based on AUCinf,pred extrapolation, dose-aware) #> 14                  AUCint (based on AUClast extrapolation) #> 15      AUCint (based on AUClast extrapolation, dose-aware) #> 16                                       AUCall (IV dosing) #> 17                                   AUCinf,obs (IV dosing) #> 18                                  AUCinf,pred (IV dosing) #> 19                                   AUCint,all (IV dosing) #> 20                                  AUCint,last (IV dosing) #> 21                                      AUClast (IV dosing) #> 22                                AUCbext (based on AUCall) #> 23                            AUCbext (based on AUCinf,obs) #> 24                           AUCbext (based on AUCinf,pred) #> 25                            AUCbext (based on AUCint,all) #> 26                           AUCbext (based on AUCint,last) #> 27                               AUCbext (based on AUClast) #> 28                                                  AUClast #> 29                                AUClast (dose-normalized) #> 30                            AUCpext (based on AUCinf,obs) #> 31                           AUCpext (based on AUCinf,pred) #> 32                                                 AUMC,all #> 33                               AUMC,all (dose-normalized) #> 34                                             AUMC,inf,obs #> 35                           AUMC,inf,obs (dose-normalized) #> 36                          AUMC,inf,pred (dose-normalized) #> 37                                                AUMC,last #> 38                              AUMC,last (dose-normalized) #> 39                                                       C0 #> 40                                                      Cav #> 41                                                      Cav #> 42                                                      Cav #> 43                                                      Cav #> 44                                                      Cav #> 45                                    Cav (dose-normalized) #> 46                                                     Ceoi #> 47                                     CL (based on AUCall) #> 48                                    CL (based on AUClast) #> 49                                 CL (based on AUCinf,obs) #> 50                                CL (based on AUCinf,pred) #> 51                                                    Clast #> 52                                               Clast,pred #> 53                             Clast,pred (dose-normalized) #> 54                           Renal clearance (from AUClast) #> 55                        Renal clearance (from AUCinf,obs) #> 56                       Renal clearance (from AUCinf,pred) #> 57                                                     Cmax #> 58                                   Cmax (dose-normalized) #> 59                                                     Cmin #> 60                                   Cmin (dose-normalized) #> 61                                      Concentration count #> 62                                                  Ctrough #> 63                                Ctrough (dose-normalized) #> 64                                    Degree of fluctuation #> 65                                             Interval End #> 66                                          Bioavailability #> 67                                        Fraction excreted #> 68                                                Half-life #> 69                    Kel (for IV dosing, based on AUClast) #> 70                 Kel (for IV dosing, based on AUCinf,obs) #> 71                Kel (for IV dosing, based on AUCinf,pred) #> 72                                   Kel (based on AUClast) #> 73                                Kel (based on AUCinf,obs) #> 74                               Kel (based on AUCinf,pred) #> 75                                             $\\\\lambda_z$ #> 76                       Number of points used for lambda_z #> 77                              First time for $\\\\lambda_z$ #> 78                    MRT (for IV dosing, based on AUClast) #> 79                 MRT (for IV dosing, based on AUCinf,obs) #> 80                MRT (for IV dosing, based on AUCinf,pred) #> 81                                   MRT (based on AUClast) #> 82           MRT (for multiple dosing, based on AUCinf,obs) #> 83          MRT (for multiple dosing, based on AUCinf,pred) #> 84                                MRT (based on AUCinf,obs) #> 85                               MRT (based on AUCinf,pred) #> 86                                     Peak-to-trough ratio #> 87                                                    $r^2$ #> 88                                               Span ratio #> 89                                           Sparse AUClast #> 90                                           Interval Start #> 91                                                    Swing #> 92                                                   Tfirst #> 93    Effective half-life (for IV dosing, based on MRTlast) #> 94    Effective half-life (for IV dosing, based on MRT,obs) #> 95   Effective half-life (for IV dosing, based on MRT,pred) #> 96                  Effective half-life (based on MRT,last) #> 97                   Effective half-life (based on MRT,obs) #> 98                  Effective half-life (based on MRT,pred) #> 99                                 Time above Concentration #> 100                                                    Tlag #> 101                                                   Tlast #> 102                                              Total dose #> 103                   Vss (for IV dosing, based on AUClast) #> 104                Vss (for IV dosing, based on AUCinf,obs) #> 105               Vss (for IV dosing, based on AUCinf,pred) #> 106                                  Vss (based on AUClast) #> 107             Vss (for multiple-dose, based on Clast,obs) #> 108            Vss (for multiple-dose, based on Clast,pred) #> 109                               Vss (based on AUCinf,obs) #> 110                              Vss (based on AUCinf,pred) #> 111                                Vz (based on AUCinf,obs) #> 112                               Vz (based on AUCinf,pred) #>                                                                                                                                                                                                                                                                          description #> 1                        The area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification plus the triangle from that last concentration to 0 at the first concentration below the limit of quantification #> 2                                                                                                                                                                                                                                The adjusted r^2 value of the half-life calculation #> 3                                                                                                                                                                                                                                The amount excreted (typically into urine or feces) #> 4                                                                                                                                                                                                                                                             Dose normalized aucall #> 5                                                                                                                                  The area under the concentration time curve from the beginning of the interval to infinity with extrapolation to infinity from the observed Clast #> 6                                                                                                                                                                                                                                                         Dose normalized aucinf.obs #> 7                                                                                                                                                                                                                                                        Dose normalized aucinf.pred #> 8                                                                                              The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) #> 9                                The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) with dose-aware interpolation/extrapolation of concentrations #> 10                                                                                                                                                    The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) #> 11                                                                                      The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) with dose-aware interpolation/extrapolation of concentrations #> 12                                                                                             The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) #> 13                               The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) with dose-aware interpolation/extrapolation of concentrations #> 14                                                                                                                                                    The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) #> 15                                                                                      The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) with dose-aware interpolation/extrapolation of concentrations #> 16                                                                                                                                                                                        The AUCall calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 17                                                                                                                                                                                    The AUCinf,obs calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 18                                                                                                                                                                                              The  calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 19                                                                                                                                                                                    The AUCint,all calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 20                                                                                                                                                                                   The AUCint,last calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 21                                                                                                                                                                                       The AUClast calculated with back-extrapolation for intravenous dosing using extrapolated C0 #> 22                                                                                                                                                                                                             The back-extrapolation percent for intravenous dosing based on AUCall #> 23                                                                                                                                                                                                         The back-extrapolation percent for intravenous dosing based on AUCinf,obs #> 24                                                                                                                                                                                                        The back-extrapolation percent for intravenous dosing based on AUCinf,pred #> 25                                                                                                                                                                                                         The back-extrapolation percent for intravenous dosing based on AUCint,all #> 26                                                                                                                                                                                                        The back-extrapolation percent for intravenous dosing based on AUCint,last #> 27                                                                                                                                                                                                            The back-extrapolation percent for intravenous dosing based on AUClast #> 28                                                                                                                                        The area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification #> 29                                                                                                                                                                                                                                                           Dose normalized auclast #> 30                                                                                                                                                                                         Percent of the AUCinf that is extrapolated after Tlast calculated from the observed Clast #> 31                                                                                                                                                                                        Percent of the AUCinf that is extrapolated after Tlast calculated from the predicted Clast #> 32  The area under the concentration time moment curve from the beginning of the interval to the last concentration above the limit of quantification plus the moment of the triangle from that last concentration to 0 at the first concentration below the limit of quantification #> 33                                                                                                                                                                                                                                                           Dose normalized aumcall #> 34                                                                                                                          The area under the concentration time moment curve from the beginning of the interval to infinity with extrapolation to infinity from the observed Clast #> 35                                                                                                                                                                                                                                                       Dose normalized aumcinf.obs #> 36                                                                                                                                                                                                                                                      Dose normalized aumcinf.pred #> 37                                                                                                                                 The area under the concentration time moment curve from the beginning of the interval to the last concentration above the limit of quantification #> 38                                                                                                                                                                                                                                                          Dose normalized aumclast #> 39                                                                                                                                                                                                                                           Initial concentration after an IV bolus #> 40                                                                                                                                                                                                            The average concentration during an interval (calculated with AUClast) #> 41                                                                                                                                                                                                         The average concentration during an interval (calculated with AUCint.all) #> 42                                                                                                                                                                                                     The average concentration during an interval (calculated with AUCint.inf.obs) #> 43                                                                                                                                                                                                    The average concentration during an interval (calculated with AUCint.inf.pred) #> 44                                                                                                                                                                                                        The average concentration during an interval (calculated with AUCint.last) #> 45                                                                                                                                                                                                                                                               Dose normalized cav #> 46                                                                                                                                                                                                                                              Concentration at the end of infusion #> 47                                                                                                                                                                                                                       Clearance or observed oral clearance calculated with AUCall #> 48                                                                                                                                                                                                                          Clearance or observed oral clearance calculated to Clast #> 49                                                                                                                                                                                                               Clearance or observed oral clearance calculated with observed Clast #> 50                                                                                                                                                                                                              Clearance or observed oral clearance calculated with predicted Clast #> 51                                                                                                                                                                                                                 The last concentration observed above the limit of quantification #> 52                                                                                                                                                                                                                          The concentration at Tlast as predicted by the half-life #> 53                                                                                                                                                                                                                                                        Dose normalized clast.pred #> 54                                                                                                                                                                                                                                      The renal clearance calculated using AUClast #> 55                                                                                                                                                                                                                                   The renal clearance calculated using AUCinf,obs #> 56                                                                                                                                                                                                                                  The renal clearance calculated using AUCinf,pred #> 57                                                                                                                                                                                                                                                    Maximum observed concentration #> 58                                                                                                                                                                                                                                                              Dose normalized cmax #> 59                                                                                                                                                                                                                                                    Minimum observed concentration #> 60                                                                                                                                                                                                                                                              Dose normalized cmin #> 61                                                                                                                                                                                                                                Number of non-missing concentrations for a subject #> 62                                                                                                                                                                                                                                        The trough (end of interval) concentration #> 63                                                                                                                                                                                                                                                           Dose normalized ctrough #> 64                                                                                                                                                                                                                                                             Degree of fluctuation #> 65                                                                                                                                                                                                                                Ending time of the interval (potentially infinity) #> 66                                                                                                                                                                                                                                       Bioavailability or relative bioavailability #> 67                                                                                                                                                                                                                                                 The fraction of the dose excreted #> 68                                                                                                                                                                                                                                                          The (terminal) half-life #> 69                                                                                                                                                                                                                     Elimination rate (as calculated from the intravenous MRTlast) #> 70                                                                                                                                                                                                                      Elimination rate (as calculated from the intravenous MRTobs) #> 71                                                                                                                                                                                                                     Elimination rate (as calculated from the intravenous MRTpred) #> 72                                                                                                                                                                                                                       Elimination rate (as calculated from the MRT using AUClast) #> 73                                                                                                                                                                                                                 Elimination rate (as calculated from the MRT with observed Clast) #> 74                                                                                                                                                                                                                Elimination rate (as calculated from the MRT with predicted Clast) #> 75                                                                                                                                                                                                                                    The elimination rate of the terminal half-life #> 76                                                                                                                                                                                                                        The number of points used for the calculation of half-life #> 77                                                                                                                                                                                                                        The first time point used for the calculation of half-life #> 78                                                                                                                                                                           The mean residence time to the last observed concentration above the LOQ correcting for dosing duration #> 79                                                                                                                                                                                           The mean residence time to infinity using observed Clast correcting for dosing duration #> 80                                                                                                                                                                                          The mean residence time to infinity using predicted Clast correcting for dosing duration #> 81                                                                                                                                                                                                          The mean residence time to the last observed concentration above the LOQ #> 82                                                                                                                                                                                          The mean residence time with multiple dosing and nonlinear kinetics using observed Clast #> 83                                                                                                                                                                                         The mean residence time with multiple dosing and nonlinear kinetics using predicted Clast #> 84                                                                                                                                                                                                                          The mean residence time to infinity using observed Clast #> 85                                                                                                                                                                                                                         The mean residence time to infinity using predicted Clast #> 86                                                                                                                                                                                                                                                   Peak-to-Trough ratio (fraction) #> 87                                                                                                                                                                                                                                        The r^2 value of the half-life calculation #> 88                                                                                                                                                                                                         The ratio of the half-life to the duration used for half-life calculation #> 89                                                                                                                For sparse PK sampling, the area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification #> 90                                                                                                                                                                                                                                                     Starting time of the interval #> 91                                                                                                                                                                                                                                                            Swing relative to Cmin #> 92                                                                                                                                                                                                                 Time of the first concentration above the limit of quantification #> 93                                                                                                                                                                                                              The effective half-life (as determined from the intravenous MRTlast) #> 94                                                                                                                                                                                                               The effective half-life (as determined from the intravenous MRTobs) #> 95                                                                                                                                                                                                              The effective half-life (as determined from the intravenous MRTpred) #> 96                                                                                                                                                                                                                          The effective half-life (as determined from the MRTlast) #> 97                                                                                                                                                                                                                           The effective half-life (as determined from the MRTobs) #> 98                                                                                                                                                                                                                          The effective half-life (as determined from the MRTpred) #> 99                                                                                                                                                                                                                                                  Time above a given concentration #> 100                                                                                                                                                                                                                                                                         Lag time #> 101                                                                                                                                                                                                        Time of the last concentration observed above the limit of quantification #> 102                                                                                                                                                                                                                                       Total dose administered during an interval #> 103                                                                                                                                                                                      The steady-state volume of distribution with intravenous infusion calculating through Tlast #> 104                                                                                                                                                                                           The steady-state volume of distribution with intravenous infusion using observed Clast #> 105                                                                                                                                                                                          The steady-state volume of distribution with intravenous infusion using predicted Clast #> 106                                                                                                                                                                                                                The steady-state volume of distribution calculating through Tlast #> 107                                                                                                                                                                                    The steady-state volume of distribution for nonlinear multiple-dose data using observed Clast #> 108                                                                                                                                                                                   The steady-state volume of distribution for nonlinear multiple-dose data using predicted Clast #> 109                                                                                                                                                                                                                     The steady-state volume of distribution using observed Clast #> 110                                                                                                                                                                                                                    The steady-state volume of distribution using predicted Clast #> 111                                                                                                                                                                                                                         The terminal volume of distribution using observed Clast #> 112                                                                                                                                                                                                                        The terminal volume of distribution using predicted Clast #>"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch ruminate State — NCA_fetch_state","title":"Fetch ruminate State — NCA_fetch_state","text":"Merges default app options changes made UI","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch ruminate State — NCA_fetch_state","text":"","code":"NCA_fetch_state(   id,   input,   session,   FM_yaml_file,   MOD_yaml_file,   id_ASM,   id_UD,   id_DW,   react_state )"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch ruminate State — NCA_fetch_state","text":"id Shiny module ID input Shiny input variable session Shiny session variable FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. id_ASM ID string app state management module used save load app states id_UD ID string upload data module used save load app states id_DW ID string data wrangling module used save load app states react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch ruminate State — NCA_fetch_state","text":"list containing current state app including default values yaml file well changes made user. list following structure: yaml: Full contents supplied yaml file. MC: Module components yaml file. NCA: ana_cntr:       Analysis counter. anas:                    List analyses: analysis following  structure: ana_dsview:       Dataset view/ID (name DSV) selected data source analysis. ana_scenario:     Analysis scenario selected UI checksum:         checksum analysis (used detect changes analysis). code:             Code generate analysis start finish error messages code generation/analysis failed. code_components:  List containing different components code col_conc:         Column ana_dsview containing concentration data. col_dose:         Column ana_dsview containing dose amount. col_dur:          Column ana_dsview containing infusion duration N/unused. col_group:        Columns ana_dsview containing grouping variables. col_id:           Column ana_dsview containing subject IDs. col_ntime:        Column ana_dsview containing nominal time values col_route:        Column ana_dsview containing dosing route. col_time:         Column ana_dsview containing time values. id:               Character id (ana_idx). idx:              Numeric id (1). include_units:    Boolean variable indicating units included analysis. interval_range:   Vector first element representing beginning interval second element containing end interval. intervals:        List intervals include. isgood:           Current status analysis. key:              Analysis key acts title/caption (user editable) msgs:             Messages generated checking configuration analysis options. nca_config:       List NCA configuration options analysis. nca_object_name:  Prefix NCA objects associated analyis. nca_parameters:   NCA parameters selected calculation UI. notes:            Analysis notes  (user editable) objs:             List names values objects created generated code. sampling:         Sampling method either \"sparse\" \"serial\" units_amt:        Amount units. units_conc:       Concentration units. units_dose:       Dosing units. units_time:       Time units. current_ana:           Currently selected analysis (list name element anas). DSV:                   Available data source views (see FM_fetch_ds) checksum:              MD5 sum module (checksum analysis checksums). nca_config:            List PKNCA configuration options analysis. nca_parameters:        List two elements choices:          List consisting \"Common Parameters\" \"\" (used grouping UI). list text parameter names value PKNCA parameter name. summary:          Summary table following columns: parameter:      PKNCA Paramter name. text:           Name used text output. md:             Name used markdown output. latex:          Name used latex output. description:    Verbose textual description parameter. ui:                    Current value form elements UI. ui_ana_map:            Map UI element names analysis object get NCA_fetch_current_ana ui_ids:                Vector UI elements module. ui_hold:               List hold elements disable updates full ui referesh complete. MOD_TYPE: Character data containing type module \"NCA\" id: Character data containing module id module session variable. FM_yaml_file: App configuration file FM main section. MOD_yaml_file:  Module configuration file MC main section.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_fetch_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch ruminate State — NCA_fetch_state","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_find_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines Default Column Name — NCA_find_col","title":"Determines Default Column Name — NCA_find_col","text":"Based current analysis, value UI, optional list patterns search, column names dataset function tries find default value column analysis (e.g. subject id, dose, concentration, etc). Generally following done: curr_ui non-NULL, non-\"\" value compared dscols. found value returned. patterns considered. patterns YAML file NULL compared sequentially columns names. first match found returned. nothing found first value dscols returned.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_find_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines Default Column Name — NCA_find_col","text":"","code":"NCA_find_col(   curr_ana = NULL,   curr_ui = NULL,   patterns = NULL,   dscols,   null_ok = FALSE )"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_find_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines Default Column Name — NCA_find_col","text":"curr_ana Current value analysis curr_ui Current value UI patterns List regular expression patterns consider. dscols Columns dataset. null_ok Logical value indicating null result (nothing found) OK (default: FALSE)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_find_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines Default Column Name — NCA_find_col","text":"Name column found based rules .","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_find_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines Default Column Name — NCA_find_col","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_init_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize NCA Module State — NCA_init_state","title":"Initialize NCA Module State — NCA_init_state","text":"Creates list initialized module state","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_init_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize NCA Module State — NCA_init_state","text":"","code":"NCA_init_state(FM_yaml_file, MOD_yaml_file, id, id_UD, id_DW, session)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_init_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize NCA Module State — NCA_init_state","text":"FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. id ID string module. id_UD ID string upload data module used handle uploads name list element react_state data set stored. id_DW ID string data wrangling module process uploaded data session Shiny session variable (app) list (outside app)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_init_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize NCA Module State — NCA_init_state","text":"list containing empty NCA state","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_load_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads Pre-Defined Scenario — NCA_load_scenario","title":"Loads Pre-Defined Scenario — NCA_load_scenario","text":"Loads pre-defined analysis scneario NCA YAML config file.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_load_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads Pre-Defined Scenario — NCA_load_scenario","text":"","code":"NCA_load_scenario(state, ana_scenario)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_load_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads Pre-Defined Scenario — NCA_load_scenario","text":"state NCA state NCA_fetch_state() ana_scenario Short name analysis scenario load config file.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_load_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads Pre-Defined Scenario — NCA_load_scenario","text":"NCA state object scenario loaded relevant notifications set.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mk_preload.html","id":null,"dir":"Reference","previous_headings":"","what":"Make List of Current NCA State — NCA_mk_preload","title":"Make List of Current NCA State — NCA_mk_preload","text":"Reads app state yaml files.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mk_preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make List of Current NCA State — NCA_mk_preload","text":"","code":"NCA_mk_preload(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mk_preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make List of Current NCA State — NCA_mk_preload","text":"state NCA state object","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mk_preload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make List of Current NCA State — NCA_mk_preload","text":"list following elements isgood:       Boolean indicating exit status function. msgs:         Messages passed back user. yaml_list:    Lists preload components.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mk_preload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make List of Current NCA State — NCA_mk_preload","text":"","code":"sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE state = sess_res$state res = NCA_mk_preload(state) #> → NCA: saving element (1) PK Example #> → NCA:   -> interval: [0,Inf]  AUCinf,obs #> → NCA:   -> interval: [0,21]  AUClast, Cmax #> → NCA: saving element (2) PK/PD Example #> → NCA:   -> interval: [0,Inf]  AUCinf,obs #> → NCA:   -> interval: [0,21]  AUClast, Cmax #> → NCA: mk_preload isgood: TRUE"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mkactive_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch PKNCA Results Object — NCA_mkactive_ana","title":"Fetch PKNCA Results Object — NCA_mkactive_ana","text":"Fetches PKNCA output specified analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mkactive_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch PKNCA Results Object — NCA_mkactive_ana","text":"","code":"NCA_mkactive_ana(state, ana_id)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mkactive_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch PKNCA Results Object — NCA_mkactive_ana","text":"state NCA state NCA_fetch_state() ana_id Analysis ID make active.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mkactive_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch PKNCA Results Object — NCA_mkactive_ana","text":"State analysis ID made active. JMH add example script ","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_mkactive_ana.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch PKNCA Results Object — NCA_mkactive_ana","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_new_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize New Analysis — NCA_new_ana","title":"Initialize New Analysis — NCA_new_ana","text":"Creates new NCA analysis NCA module","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_new_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize New Analysis — NCA_new_ana","text":"","code":"NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_new_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize New Analysis — NCA_new_ana","text":"state NCA state NCA_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_new_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize New Analysis — NCA_new_ana","text":"NCA state object containing new empty analysis analysis set current active analyisis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_new_ana.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize New Analysis — NCA_new_ana","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_preload.html","id":null,"dir":"Reference","previous_headings":"","what":"Preload Data for NCA Module — NCA_preload","title":"Preload Data for NCA Module — NCA_preload","text":"Populates supplied session variable information list sources.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preload Data for NCA Module — NCA_preload","text":"","code":"NCA_preload(   session,   src_list,   yaml_res,   mod_ID = NULL,   react_state = list(),   quickload = FALSE )"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preload Data for NCA Module — NCA_preload","text":"session Shiny session variable (app) list (outside app) src_list List preload data (read together module IDs top level) yaml_res List data module yaml config mod_ID Module ID module loaded. react_state Reactive shiny object (app) list (outside app) used trigger reactions. quickload Logical TRUE load reduced analysis FALSE load full analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_preload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preload Data for NCA Module — NCA_preload","text":"list following elements isgood:      Boolean indicating exit status function. msgs:        Messages passed back user. session:     Session object input:       value shiny input end session initialization. state:       App state. react_state: react_state components.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_process_current_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Processes Current Analysis to be Run — NCA_process_current_ana","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"Takes current analysis checks different aspects issues make sure good go.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_process_current_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"","code":"NCA_process_current_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_process_current_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"state NCA state NCA_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_process_current_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"Current analysis list isgood msgs set","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_process_current_ana.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_set_current_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets Current Analysis — NCA_set_current_ana","title":"Sets Current Analysis — NCA_set_current_ana","text":"Takes NCA state analysis list sets figure list value active figure","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_set_current_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets Current Analysis — NCA_set_current_ana","text":"","code":"NCA_set_current_ana(state, ana)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_set_current_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets Current Analysis — NCA_set_current_ana","text":"state NCA state NCA_fetch_state() ana Analysis list NCA_fetch_current_ana","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_set_current_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets Current Analysis — NCA_set_current_ana","text":"State current analysis updated","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_set_current_ana.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets Current Analysis — NCA_set_current_ana","text":"","code":"library(ruminate) # Module IDs                                                                    id     = \"NCA\"                                                                  id_UD  = \"UD\"                                                                   id_DW  = \"DW\"                                                                   id_ASM = \"ASM\"   # We need session and input variables to be define                               sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE                                                                                 # Extracting the session and input variables                                    session      = sess_res$session                                                 input        = sess_res$input                                                   react_state  = list()                                                                                                                                           # We also need configuration files                                              FM_yaml_file  = system.file(package = \"formods\",  \"templates\", \"formods.yaml\")  MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\")                                                                                      # Getting the current module state                                              state = NCA_fetch_state(id             = id,                                                           input           = input,                                                        session         = session,                                                      FM_yaml_file    = FM_yaml_file,                                                 MOD_yaml_file   = MOD_yaml_file,                                                id_ASM          = id_ASM,                                                       id_UD           = id_UD,                                                        id_DW           = id_DW,                                                        react_state     = react_state)                                                                                                           # Pulls out the active analysis                                                 current_ana = NCA_fetch_current_ana(state)  # This will get the dataset associated with this analysis ds = NCA_fetch_ana_ds(state, current_ana)  # After making changes you can update those in the state state = NCA_set_current_ana(state, current_ana)  # You can use this to check the current analysis current_ana = NCA_process_current_ana(state)  # This will pull out the code for the module fc_res = NCA_fetch_code(state)  # This will use patterns defined for the site to detect # columns. In this example we are detecting the id column: id_col = NCA_find_col(   patterns = state[[\"MC\"]][[\"detect_col\"]][[\"id\"]],   dscols   = names(ds$DS)) #> Warning: Unknown or uninitialised column: `DS`.  # This creates a new analysis state = NCA_new_ana(state)"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_test_mksession.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate Session Data for Module Testing — NCA_test_mksession","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"Populates supplied session variable testing.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_test_mksession.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"","code":"NCA_test_mksession(session = list())"},{"path":"https://ruminate.ubiquity.tools/reference/NCA_test_mksession.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"session Shiny session variable (app) list (outside app)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_test_mksession.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"NCA portion all_sess_res returned FM_app_preload","code":""},{"path":"https://ruminate.ubiquity.tools/reference/NCA_test_mksession.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"","code":"session = shiny::MockShinySession$new() sess_res = NCA_test_mksession(session=session) #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE"},{"path":"https://ruminate.ubiquity.tools/reference/apply_route_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies Route Mapping to Dataset — apply_route_map","title":"Applies Route Mapping to Dataset — apply_route_map","text":"Used convert nonstandard dose route values (.e. \"IV\") standard values (\"intravascular\").","code":""},{"path":"https://ruminate.ubiquity.tools/reference/apply_route_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies Route Mapping to Dataset — apply_route_map","text":"","code":"apply_route_map(route_map = list(), route_col = NULL, DS = NULL)"},{"path":"https://ruminate.ubiquity.tools/reference/apply_route_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies Route Mapping to Dataset — apply_route_map","text":"route_map List names corresponding route replacement vector regular expressions match. route_col Column name route data. DS Dataframe containing dataset.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/apply_route_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies Route Mapping to Dataset — apply_route_map","text":"Dataset route mapping applied.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/apply_route_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies Route Mapping to Dataset — apply_route_map","text":"","code":"if(system.file(package=\"readxl\") !=\"\"){ library(readxl) #loading a dataset data_file =  system.file(package=\"formods\",\"test_data\",\"TEST_DATA.xlsx\") myDS = readxl::read_excel(path=data_file, sheet=\"DATA\")   route_map = list(    intravascular = c(\"^(?i)iv$\"),    extravascular = c(\"^(?i)sc$\", \"^(?i)oral\")  )  utils::head(myDS[[\"ROUTE\"]])  myDS = apply_route_map(route_map = route_map,                        route_col = \"ROUTE\",                        DS        = myDS)  utils::head(myDS[[\"ROUTE\"]]) } #> [1] \"intravascular\" \"intravascular\" \"intravascular\" \"intravascular\" #> [5] \"intravascular\" \"intravascular\""},{"path":"https://ruminate.ubiquity.tools/reference/build_span.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Table Span From Components — build_span","title":"Construct Table Span From Components — build_span","text":"Takes large table, common rows, header information constructs table subset components using supplied ranges rows columns.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/build_span.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Table Span From Components — build_span","text":"","code":"build_span(   table_body = NULL,   row_common = NULL,   table_body_head = NULL,   row_common_head = NULL,   header_format = \"text\",   obnd = NULL,   row_sel = NULL,   col_sel = NULL,   table_alignment = \"center\",   inner_border = officer::fp_border(color = \"black\", width = 0.3),   outer_border = officer::fp_border(color = \"black\", width = 2),   set_header_inner_border_v = TRUE,   set_header_inner_border_h = TRUE,   set_header_outer_border = TRUE,   set_body_inner_border_v = TRUE,   set_body_inner_border_h = FALSE,   set_body_outer_border = TRUE,   notes_detect = NULL )"},{"path":"https://ruminate.ubiquity.tools/reference/build_span.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Table Span From Components — build_span","text":"table_body Data frame body large table. row_common Data frame common rows. table_body_head Data frame matrix headers table body. row_common_head Data frame matrix headers common rows. header_format Format header either \"text\" (default) \"md\" markdown. obnd Optional onbrand object used format markdown. default NULL value use default formatting. row_sel Indices rows build table . col_sel Indices columns build table . table_alignment Character string specifying alignment #'table (body headers). Can \"center\" (default), \"left\", \"right\", \"justify\" inner_border Border object inner border lines defined using officer::fp_border() outer_border Border object outer border lines defined using officer::fp_border() set_header_inner_border_v Boolean value enable disable inner vertical borders headers set_header_inner_border_h Boolean value enable disable inner horizontal borders headers set_header_outer_border Boolean value enable disable outer border headers set_body_inner_border_v Boolean value enable disable inner vertical borders body set_body_inner_border_h Boolean value enable disable inner horizontal borders body set_body_outer_border Boolean value enable disable outer border borders body notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/build_span.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Table Span From Components — build_span","text":"list following elements df:     Data frame built table. ft:     data frame flextable object. notes:  Note placeholders found table.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/build_span.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Table Span From Components — build_span","text":"way data frames relate mapped . dimensions different data frames identified (nrow x ncol)","code":"#                            col_sel #                      |<--------------->| # #|--------------------------------------------| --- #|                 |   .                 .    |  ^ #|                 |   .                 .    |  | #| row_common_head |   . table_body_head .    |  | m #|      m x n      |   .      m x c      .    |  | #|                 |   .                 .    |  v #|--------------------------------------------| --- #|                 |   .                 .    |  ^ #|                 |   .                 .    |  | #|    row_common   |   .   table_body    .    |  | #|      r x n      |   .     r x c       .    |  | #|                 |   .                 .    |  | #|.................|..........................|  |     - #|                 |   ./  /  /  /  /  / .    |  |     ^ #|                 |   .  /  /  /  /  /  .    |  | r   | #|                 |   . /  /  /  /  /  /.    |  |     | row_sel #|                 |   ./  /  /  /  /  / .    |  |     | #|                 |   .  /  /  /  /  /  .    |  |     v #|.................|...../../../../../../.... |  |     - #|                 |   .                 .    |  | #|                 |   .                 .    |  v #|--------------------------------------------| --- # #|<--------------->|<------------------------>| #        n                    c"},{"path":"https://ruminate.ubiquity.tools/reference/build_span.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Table Span From Components — build_span","text":"","code":"library(formods) library(readxl) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr)  # First we need to create some data.  # This will read in a test dataset: DS = readxl::read_excel(  path  = system.file(package=\"formods\",                       \"test_data\",                       \"TEST_DATA.xlsx\"),  sheet = \"DATA\")  # This will filter the dataset down and modify the formatting DS = dplyr::filter(DS, EVID == 0)                          |>   dplyr::filter(ID <= 30)                                  |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT  = ifelse(.data[[\"CMT\"]] == \"C_ng_ml\",                               \"Test Article\",                               .data[[\"CMT\"]]))              |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT = ifelse(.data[[\"CMT\"]] == \"BM_ng_ml\",                              \"Biomarker\",                              .data[[\"CMT\"]]))               |>   dplyr::rename(Analyte = \"CMT\")                           |>   dplyr::mutate(DV = ifelse(.data[[\"DV\"]] == 0, \"BQL\", .data[[\"DV\"]]))  # This represents the large table we want to split up into smaller tables  wide_df = tidyr::pivot_wider(DS,   values_from = \"DV\",   names_from  = \"ID\")               |>   dplyr::arrange(Analyte, TIME)     |>   dplyr::mutate(TIME = as.character(.data[[\"TIME\"]]))      # The first two columns represent the rows # that are common across the tables: row_common = wide_df[,1:2]  # The remaining columns represent the body of the table: table_body = wide_df[,3:ncol(wide_df)]  # Next we create matrices that contain the header  # information for each component above: row_common_head = matrix(   data  = c(\"Time\", \"Analyte\",             \"(hr)\", \"(ng/ml)\"),   ncol  = 2,   byrow = TRUE)  table_body_head = matrix(   data  = c(rep(\"Subject ID\", times=ncol(table_body)),              names(table_body)),   ncol  = ncol(table_body),   byrow = TRUE)   # This builds all of the tables: span_res = span_table(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       notes_detect    = c(\"BQL\"))  # This will show you the first one: span_res$tables[[\"Table 1\"]]$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`  #> header has 2 row(s)  #> body has 20 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4  # This will build a single table with the rows and  # column ranges specified bs_res =   build_span(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       col_sel         = c(1:10),                       row_sel         = c(1:10),                       notes_detect    = c(\"BQL\"))  # This will show you the result: bs_res$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`  #> header has 2 row(s)  #> body has 10 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6   7    8    9    10 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 643 1050 1130   744 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 644 1051 1134 745.9 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 645 1052 1138 747.8 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 647 1055 1146 751.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4 651 1059 1162 759.2"},{"path":"https://ruminate.ubiquity.tools/reference/dose_records_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds Dose Records Dataframe — dose_records_builder","title":"Builds Dose Records Dataframe — dose_records_builder","text":"Takes information columns dataset constructs dosing records.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/dose_records_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds Dose Records Dataframe — dose_records_builder","text":"","code":"dose_records_builder(   NCA_DS = NULL,   dose_from = NULL,   col_id = NULL,   col_time = NULL,   col_ntime = NULL,   col_route = NULL,   col_dose = NULL,   col_cycle = NULL,   col_dur = NULL,   col_evid = NULL,   col_analyte = NULL,   col_group = NULL )"},{"path":"https://ruminate.ubiquity.tools/reference/dose_records_builder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds Dose Records Dataframe — dose_records_builder","text":"NCA_DS Dataset containing dosing records. dose_from Method dose extraction either \"cols\" \"rows\". col_id Name column subject ID. col_time Name column time since first dose. col_ntime Name column time since last dose (required dose_from=\"cols\"). col_route Name column route information. col_dose Name column last dose given. col_cycle Name column dose cycle (required dose_from=\"cols\"). col_dur Name column dose duration. col_evid Name column event ID (required dose_from=\"rows\"). col_analyte Name column analyte (optional). col_group Names columns grouping information (optionl).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/dose_records_builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds Dose Records Dataframe — dose_records_builder","text":"list containing following elements isgood:           Return status function. msgs:             Messages passed back user. dose_rec:","code":""},{"path":"https://ruminate.ubiquity.tools/reference/dose_records_builder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds Dose Records Dataframe — dose_records_builder","text":"","code":"if(system.file(package=\"readxl\") !=\"\"){ library(dplyr) library(readxl) library(stringr)  # Example data file: data_file =  system.file(package=\"formods\",\"test_data\",\"TEST_DATA.xlsx\")  # Dataset formatted to extract dosing from columns DS_cols = readxl::read_excel(path=data_file, sheet=\"DATA\")        |>  dplyr::filter(EVID == 0)                                |>  dplyr::filter(DOSE %in% c(3))                           |>  dplyr::filter(str_detect(string=Cohort, \"^MD\"))         |>  dplyr::filter(CMT == \"C_ng_ml\")  drb_res = dose_records_builder(  NCA_DS     = DS_cols,  dose_from  = \"cols\",  col_id     = \"ID\",  col_time   = \"TIME_DY\",  col_ntime  = \"NTIME_DY\",  col_route  = \"ROUTE\",  col_cycle  = \"DOSE_NUM\",  col_dose   = \"DOSE\",  col_group  = \"Cohort\")  utils::head(drb_res$dose_rec)  # Dataset formatted to extract dosing from rows (records) DS_rows = readxl::read_excel(path=data_file, sheet=\"DATA\")        |>  dplyr::filter(DOSE %in% c(3))                                   |>  dplyr::filter(str_detect(string=Cohort, \"^MD\"))                 |>  dplyr::filter(CMT %in% c(\"Ac\", \"C_ng_ml\"))  drb_res = dose_records_builder(  NCA_DS     = DS_rows,  dose_from  = \"rows\",  col_id     = \"ID\",  col_time   = \"TIME_DY\",  col_ntime  = \"NTIME_DY\",  col_route  = \"ROUTE\",  col_dose   = \"AMT\",  col_evid   = \"EVID\",  col_group  = \"Cohort\")  utils::head(drb_res$dose_rec) } #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> # A tibble: 0 × 5 #> # ℹ 5 variables: ID <dbl>, TIME_DY <dbl>, AMT <dbl>, ROUTE <chr>, Cohort <chr>"},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Information from an rxode2 Object — fetch_rxinfo","title":"Fetches Information from an rxode2 Object — fetch_rxinfo","text":"provide information like parameter names, covriates, etc rxode2 object.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Information from an rxode2 Object — fetch_rxinfo","text":"","code":"fetch_rxinfo(object)"},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Information from an rxode2 Object — fetch_rxinfo","text":"object rxode2 model object  ID string corresponds ID used call modules UI elements","code":""},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Information from an rxode2 Object — fetch_rxinfo","text":"List following elements. isgood: Boolean variable indicating model good. msgs: messages parsing model. elements: List names simulation elements: covariates: Names covariates system. parameters: Names parameters (subject level) system. iiv: Names iiv parameters system. states: Names states/compartments system. txt_info: Summary information text format. list_info: Summary information list format used onbrand reporting. ht_info: Summary information HTML formot.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxinfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Information from an rxode2 Object — fetch_rxinfo","text":"","code":"library(formods) library(ggplot2)  # For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: if(is_installed(\"rxode2\")){ library(rxode2) set.seed(8675309) rxSetSeed(8675309)  my_model = function ()  {     description <- \"One compartment PK model with linear clearance using differential equations\"     ini({         lka <- 0.45         label(\"Absorption rate (Ka)\")         lcl <- 1         label(\"Clearance (CL)\")         lvc <- 3.45         label(\"Central volume of distribution (V)\")         propSd <- c(0, 0.5)         label(\"Proportional residual error (fraction)\")         etalcl ~ 0.1     })     model({         ka <- exp(lka)         cl <- exp(lcl + etalcl)         vc <- exp(lvc)         kel <- cl/vc         d/dt(depot) <- -ka * depot         d/dt(central) <- ka * depot - kel * central         Cc <- central/vc         Cc ~ prop(propSd)     }) }  # This creates an rxode2 object object  = rxode(my_model)  # If you want details about the parameters, states, etc # in the model you can use this: rxdetails = fetch_rxinfo(object)  rxdetails$elements  # Next we will create subjects. To do that we need to  # specify information about covariates: nsub = 2 covs = list(   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )  subs = mk_subjects(object = object,                    nsub   = nsub,                    covs   = covs)  head(subs$subjects)  rules = list(   dose = list(     condition = \"TRUE\",     action    = list(       type  = \"dose\",       state     = \"central\",        values    = \"c(1)\",       times     = \"c(0)\",       durations = \"c(0)\")     ) )  # We evaulate the rules for dosing at time 0 eval_times =  0  # Stop 2 months after the last dose output_times = seq(0, 56, 1)  # This runs the rule-based simulations simres =    simulate_rules(     object        = object,     subjects      = subs[[\"subjects\"]],     eval_times    = eval_times,     output_times  = output_times,      rules         = rules)  # First subject data: sub_1 = simres$simall[simres$simall$id == 1, ]  # First subjects events evall = as.data.frame(simres$evall) ev_sub_1 = evall[evall$id ==1, ]  # All of the simulation data simall = simres$simall simall$id = as.factor(simall$id)  # Timecourse psim =    plot_sr_tc(     sro    = simres,     dvcols = \"Cc\") psim$fig  # Events pev =    plot_sr_ev(     sro    = simres,     ylog   = FALSE) pev$fig  } #> rxode2 3.0.3 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` #> ======================================== #> rxode2 has not detected OpenMP support and will run in single-threaded mode #> This is a Mac. Please read https://mac.r-project.org/openmp/ #> ======================================== #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> using C compiler: ‘Apple clang version 16.0.0 (clang-1600.0.26.6)’ #> using SDK: ‘’ #>   #>   #> Warning: multi-subject simulation without without 'omega' #>   #>   #> Warning: multi-subject simulation without without 'omega' #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?"},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts Timecourse and Merges Covariates — fetch_rxtc","title":"Extracts Timecourse and Merges Covariates — fetch_rxtc","text":"Takes output rxSolve() merges missing covariates present params sim","code":""},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts Timecourse and Merges Covariates — fetch_rxtc","text":"","code":"fetch_rxtc(rx_details, sim)"},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts Timecourse and Merges Covariates — fetch_rxtc","text":"rx_details Output fetch_rxinfo() sim output rxSolve()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/fetch_rxtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts Timecourse and Merges Covariates — fetch_rxtc","text":"Dataframe simulated time course.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ft_apply_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Markdown in flextable Object — ft_apply_md","title":"Render Markdown in flextable Object — ft_apply_md","text":"Takes flextable object renders markdown specified part.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ft_apply_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Markdown in flextable Object — ft_apply_md","text":"","code":"ft_apply_md(ft, obnd = NULL, part = \"body\")"},{"path":"https://ruminate.ubiquity.tools/reference/ft_apply_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Markdown in flextable Object — ft_apply_md","text":"ft Flextable object. obnd Optional onbrand object used format markdown. default NULL value use default formatting. part Part table can one \"\", \"body\" (default), \"header\", \"footer\"","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ft_apply_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Markdown in flextable Object — ft_apply_md","text":"flextable markdown applied","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_figure_ind_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"Takes output PKNCA creates ggplot figures faceted subject id highlighting certain NCA aspects (e.g. points used half-life)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_figure_ind_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"","code":"mk_figure_ind_obs(   nca_res,   OBS_LAB = \"Concentration ===CONCUNITS===\",   TIME_LAB = \"Time ===TIMEUNITS===\",   OBS_STRING = \"Observation\",   BLQ_STRING = \"BLQ\",   NA_STRING = \"Missing\",   log_scale = TRUE,   scales = \"fixed\",   nfrows = 4,   nfcols = 3 )"},{"path":"https://ruminate.ubiquity.tools/reference/mk_figure_ind_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"nca_res Output PKNCA. OBS_LAB Label observation axis optional ===CONCUNITS=== placeholder units. TIME_LAB Label time axis optional ===TIMEUNITS=== placeholder units. OBS_STRING Label observation data. BLQ_STRING Label BLQ data. NA_STRING Label missing data. log_scale Boolean variable control y-scale (TRUE: Log 10, FALSE: linear). scales String determine scales used faceting. Can either \"fixed\", \"free\", \"free_x\", \"free_y\". nfrows Number facet rows per page. nfcols Number facet cols per page.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_figure_ind_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"List containing element figures list figure pages (\"Figure 1\", \"Figure 2\", etc.). also list containing two elements: gg:    ggplot object page. notes: Placeholder future notes, NULL now.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_figure_ind_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"","code":"# We need a state variable to be define sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE  state = sess_res$state  # Pulls out the active analysis current_ana = NCA_fetch_current_ana(state)  # This is the raw PKNCA output pknca_res = NCA_fetch_ana_pknca(state, current_ana)  # Building the figure mk_res = mk_figure_ind_obs(nca_res = pknca_res) mk_res$figures$Figure_1$gg"},{"path":"https://ruminate.ubiquity.tools/reference/mk_rx_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes an rxode2 Object — mk_rx_obj","title":"Makes an rxode2 Object — mk_rx_obj","text":"Creates rxode2 object model (either rxode2 function NONMEM file)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_rx_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes an rxode2 Object — mk_rx_obj","text":"","code":"mk_rx_obj(type, model)"},{"path":"https://ruminate.ubiquity.tools/reference/mk_rx_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes an rxode2 Object — mk_rx_obj","text":"type Type supplied model can \"rxode2\", \"NONMEM\" model List containing relevant information model. depend model types. rxode2: supplied model rxode2 format. fcn_def: Character string containing function definition. fcn_obj: Name funciton object created fcn_def. NONMEM: supplied model NONMEM format (either control model_file: Character string containing NONMEM model file.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_rx_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes an rxode2 Object — mk_rx_obj","text":"Results FM_tc() running model. include field isgood boolean variable indicating success failure. See documentation FM_tc() format returned evaluation results failure address . successful capture field contain following: fcn_obj: function name. rx_obj: built rxode2 object.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_rx_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes an rxode2 Object — mk_rx_obj","text":"","code":"fcn_def = ' my_func = function ()    {        description <- \"One compartment PK model with linear clearance\"        ini({            lka <- 0.45            label(\"Absorption rate (Ka)\")            lcl <- 1            label(\"Clearance (CL)\")            lvc <- 3.45            label(\"Central volume of distribution (V)\")            propSd <- c(0, 0.5)            label(\"Proportional residual error (fraction)\")        })        model({            ka <- exp(lka)            cl <- exp(lcl)            vc <- exp(lvc)            cp <- linCmt()            cp ~ prop(propSd)        })     }' fcn_obj = \"my_func\" model = list(fcn_def = fcn_def,              fcn_obj = fcn_obj)   rx_res = mk_rx_obj(\"rxode2\", model) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments  # function object rx_res[[\"capture\"]][[\"fcn_obj\"]] #> function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         cp <- linCmt() #>         cp ~ prop(propSd) #>     }) #> } #> <environment: 0x13d1243c8>  # rxode2 object rx_res[[\"capture\"]][[\"rx_obj\"]] #>  ── rxode2-based solved PK 1-compartment model with first-order absorption ──────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lcl    lvc propSd  #>   0.45   1.00   3.45   0.50  #>  ── Model (Normalized Syntax): ──  #> function() { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         cp <- linCmt() #>         cp ~ prop(propSd) #>     }) #> }"},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Information from an rxode2 Object — mk_subjects","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"provide information like parameter names, covriates, etc rxode2 object.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"","code":"mk_subjects(object, nsub = 10, covs = NULL)"},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"object rxode2 model object  ID string corresponds ID used call modules UI elements. nsub Number subjects generate. set 1 return typical values (IIV set zero). covs List describing covariates generated.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"List following elements. isgood:     Return status function. msgs:       Error warning messages issues encountered. subjects:   Data frame parameters covariates subjects generated. iCov:       Data frame covariates. params:     Data frame parameters.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"See . underlying simulations run using rxode2, need rxode2 system object. can either simulate subjects load file. Next need define set rules. set conditions actions. evaluation time point conditions evaluated. condition met actions associated condition executed. example, visit (evaluation time point) trough PK certain level (condition) may want increase dosing regimen next dosing cycle (action).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"creating-subjects","dir":"Reference","previous_headings":"","what":"Creating subjects","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"Subjects expected data frame following column headers: id Individual subject id Names parameters iiv specified ini section rxode2 function specification Names covariates used model. mk_subjects() — Creates subjects simulation sampling based -subject variability generating covariate information based user specifications.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"covariates","dir":"Reference","previous_headings":"","what":"Covariates","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"covs input list following structure: type: Can either “fixed”, “discrete”, “continuous”. sampling: field needed “continuous” covariate ’ type can either “random”, “normal” “log-normal”. values: field depends type optional sampling . fixed: single value. discrete: vector possible discrete elements. continuous, random: Two values first lower bound second upper bound. continuous, normal: Two values first mean second variance. continuous, log-normal: Two values first mean second variance. examples shows SEX_ID randomly sampled values specified, SUBTYPE_ID fixed value, WT sampled log-normal distribution.","code":"covs = list(   SEX_ID     = list(type     = \"discrete\",                     values   = c(0,1)),   SUBTYPE_ID = list(type     = \"fixed\",                     values   = c(0)),   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )"},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"rule-based-simulations","dir":"Reference","previous_headings":"","what":"Rule-based simulations","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"simulate_rules() — run simulations based rule definitions .","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"rules","dir":"Reference","previous_headings":"","what":"Rules","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"Rules named list list name can short descriptive label used remember rule . names returned columns simulated data frame. condition: Character string evaluates either TRUE FALSE. true action portion triggered. list objects available see Rule-evaluation environment . fail_flag: Flag set rule_id column condition met (set \"false\" specified). true_flag: Flag set rule_id column condition met (set \"true\" specified). action: rule trigger can following: type: defines action type can either \"dose\", \"set state\", \"manual\". Based type action field expect different elements. Dosing: action type: \"dose\" values: Character string evaluates numeric vector dosing amounts (e.g. \"c(3,  3,  3,  3)\") times: Character string evaluates numeric vector times (e.g. \"c(0, 14, 28, 42)\") durations: Character string evaluates numeric vector durations (e.g. \"c(0, 0, 0, 0)\", zero bolus dosing) Changing state value: action type: \"set state\" state: Character string name state set (\"Ac\") value: Character string evaluates numeric value state (e.g. \"Ac/2\" set state half value Ac evaluation point) Manual modification simulation: action type: \"manual\" code: Character string code evaluate.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"rule-evaluation-environment","dir":"Reference","previous_headings":"","what":"Rule-evaluation environment","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"Beyond simple simulations necessary execute actions based current previous state system. reason, condition elements action (e.g., values, times durations dose action type) evaluated, following objects available evaluation point: outputs: value model output. states: value named state compartment. covariates: value named covariate. subject-level parameters: value named parameter. rule value: last value rule evaluated . id: Current subject id. time: Current evaluation time. SI_SUB_HISTORY: data frame simulation history current subject current evaluation point. SI_subjects: subjects data frame. SI_eval_times: Vector evaluation times. SI_interval_ev: events table ’s current state given simulation interval. SI_ev_history: history event table containing events leading current interval. SI_ud_history: free form object user can define alter within “manual”action type (ud-user defined, history).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"the-following-functions-will-be-available-","dir":"Reference","previous_headings":"","what":"The following functions will be available:","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"SI_fpd: function fetch previous dose (fpd) given id state. example current id state Ac following:","code":"SI_fpd(id=id, state=\"Ac\")"},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"time-scales","dir":"Reference","previous_headings":"","what":"Time scales","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"can include columns output different time scales wish. need create list format . One element system short name system time scale. next details list containing short names time scale want include. list verbose name time scale (verb) numerical conversion indicating time scale relates others. define weeks days basis seconds.","code":"time_scales = list(system=\"days\",                 details= list(                   weeks = list(verb=\"Weeks\",    conv=1/(60*60*24*7)),                   days  = list(verb=\"Days\",     conv=1/(60*60*24))))"},{"path":[]},{"path":"https://ruminate.ubiquity.tools/reference/mk_subjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Information from an rxode2 Object — mk_subjects","text":"","code":"library(formods) library(ggplot2)  # For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: if(is_installed(\"rxode2\")){ library(rxode2) set.seed(8675309) rxSetSeed(8675309)  my_model = function ()  {     description <- \"One compartment PK model with linear clearance using differential equations\"     ini({         lka <- 0.45         label(\"Absorption rate (Ka)\")         lcl <- 1         label(\"Clearance (CL)\")         lvc <- 3.45         label(\"Central volume of distribution (V)\")         propSd <- c(0, 0.5)         label(\"Proportional residual error (fraction)\")         etalcl ~ 0.1     })     model({         ka <- exp(lka)         cl <- exp(lcl + etalcl)         vc <- exp(lvc)         kel <- cl/vc         d/dt(depot) <- -ka * depot         d/dt(central) <- ka * depot - kel * central         Cc <- central/vc         Cc ~ prop(propSd)     }) }  # This creates an rxode2 object object  = rxode(my_model)  # If you want details about the parameters, states, etc # in the model you can use this: rxdetails = fetch_rxinfo(object)  rxdetails$elements  # Next we will create subjects. To do that we need to  # specify information about covariates: nsub = 2 covs = list(   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )  subs = mk_subjects(object = object,                    nsub   = nsub,                    covs   = covs)  head(subs$subjects)  rules = list(   dose = list(     condition = \"TRUE\",     action    = list(       type  = \"dose\",       state     = \"central\",        values    = \"c(1)\",       times     = \"c(0)\",       durations = \"c(0)\")     ) )  # We evaulate the rules for dosing at time 0 eval_times =  0  # Stop 2 months after the last dose output_times = seq(0, 56, 1)  # This runs the rule-based simulations simres =    simulate_rules(     object        = object,     subjects      = subs[[\"subjects\"]],     eval_times    = eval_times,     output_times  = output_times,      rules         = rules)  # First subject data: sub_1 = simres$simall[simres$simall$id == 1, ]  # First subjects events evall = as.data.frame(simres$evall) ev_sub_1 = evall[evall$id ==1, ]  # All of the simulation data simall = simres$simall simall$id = as.factor(simall$id)  # Timecourse psim =    plot_sr_tc(     sro    = simres,     dvcols = \"Cc\") psim$fig  # Events pev =    plot_sr_ev(     sro    = simres,     ylog   = FALSE) pev$fig  } #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #>   #>   #> Warning: multi-subject simulation without without 'omega' #>   #>   #> Warning: multi-subject simulation without without 'omega' #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?"},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_ind_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"Takes output PKNCA creates tabular view individual observation data. can spread several tables (pages) necessary.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_ind_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"","code":"mk_table_ind_obs(   nca_res,   obnd = NULL,   not_sampled = \"NS\",   blq = \"BLQ\",   digits = 3,   text_format = \"text\",   max_height = 7,   max_width = 6.5,   max_row = NULL,   max_col = 9,   notes_detect = NULL,   rows_by = \"time\" )"},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_ind_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"nca_res Output PKNCA. obnd onbrand reporting object. not_sampled Character string use missing data pivoting. blq Character string use indicate data level quantification (value 0 dataset). digits Number significant figures report (set NULL disable rounding) text_format Either \"md\" markdown \"text\" (default) plain text. max_height Maximum height final table inches (value NULL use 100 inches). max_width Maximum width final table inches (value NULL use 100 inches). max_row Maximum number rows page. Spillover hang side page.. max_col Maximum number columns page. Spillover wrapped multiple pages. notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")). rows_by Can either \"time\" \"id\". \"time\", column time separate column subject ID. rows_by set \"id\" column ID column individual time.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_ind_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"List containing following elements isgood:      Boolean indicating exit status function. one_table:   Dataframe entire table first lines containing header. one_body:    Dataframe entire table (data ). one_header:  Dataframe entire header (row body, data). tables:      Named list tables. list element output msgs:        Vector text messages describing errors found. format build_span.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_ind_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"Time Analyte Concentration (ng/mL) ID (day)  1 2 3 4 5 6 0 BM_ng_ml 1250 1030 831 1170 1140 868 1 BM_ng_ml 1650 1160 932 1340 1500 988 2 BM_ng_ml 1950 1240 1010 1450 1740 1080 21 BM_ng_ml 2280 1500 1130 1690 2190 1310 28 BM_ng_ml 2070 1440 1070 1610 2060 1250 3 BM_ng_ml 2170 1300 1070 1530 1900 1140 35 BM_ng_ml 1890 1380 1010 1530 1930 1190 4 BM_ng_ml 2330 1340 1110 1590 2020 1200 42 BM_ng_ml 1760 1320 972 1460 1810 1130 7 BM_ng_ml 2580 1430 1180 1690 2200 1290 0 C_ng_ml BLQ BLQ BLQ BLQ BLQ BLQ 1 C_ng_ml 690 750 670 638 855 611 2 C_ng_ml 588 577 576 517 668 521 21 C_ng_ml 123 274 139 173 228 194 28 C_ng_ml 95.5 220 104 135 188 155 3 C_ng_ml 506 508 501 438 549 456 35 C_ng_ml 75.8 177 77.8 105 156 125 4 C_ng_ml 438 476 441 384 472 409 42 C_ng_ml 60.6 142 58.6 82.2 128 100 7 C_ng_ml 303 425 320 300 360 325","code":"# We need a state variable to be define sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE  state = sess_res$state  # Pulls out the active analysis current_ana = NCA_fetch_current_ana(state)  # This is the raw PKNCA output pknca_res = NCA_fetch_ana_pknca(state, current_ana)  # Building the figure mk_res = mk_table_ind_obs(nca_res = pknca_res) mk_res$tables[[\"Table 1\"]]$ft .cl-8f7a3c28{}.cl-8f769e60{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-8f77df28{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-8f77ecde{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ecdf{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ece8{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ece9{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ecea{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ecf2{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ecf3{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ecfc{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ecfd{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ecfe{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ed06{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8f77ed10{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}TimeAnalyteConcentration (ng/mL) by ID(day) 1234560BM_ng_ml12501030831117011408681BM_ng_ml16501160932134015009882BM_ng_ml19501240101014501740108021BM_ng_ml22801500113016902190131028BM_ng_ml2070144010701610206012503BM_ng_ml21701300107015301900114035BM_ng_ml1890138010101530193011904BM_ng_ml23301340111015902020120042BM_ng_ml176013209721460181011307BM_ng_ml2580143011801690220012900C_ng_mlBLQBLQBLQBLQBLQBLQ1C_ng_ml6907506706388556112C_ng_ml58857757651766852121C_ng_ml12327413917322819428C_ng_ml95.52201041351881553C_ng_ml50650850143854945635C_ng_ml75.817777.81051561254C_ng_ml43847644138447240942C_ng_ml60.614258.682.21281007C_ng_ml303425320300360325"},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_nca_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Tabular Output from PKNCA Results — mk_table_nca_params","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"Create paginated tables PKNCA use reports Shiny apps.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_nca_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"","code":"mk_table_nca_params(   nca_res,   type = \"individual\",   grouping = \"interval\",   not_calc = \"NC\",   obnd = NULL,   nps = NULL,   mult_str = \"*\",   infinity = \"inf\",   digits = NULL,   text_format = \"text\",   notes_detect = NULL,   max_height = 7,   max_width = 6.5,   max_row = NULL,   max_col = NULL )"},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_nca_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"nca_res Output PKNCA. type Type table generate. Can either \"individual\" \"summary\"]. grouping group columns tables. Can either \"interval\" \"parameter\"]. not_calc Text string replace NA values indicated values calculated. obnd onbrand reporting object. nps NCA parameter summary table following columns. parameter:      PKNCA Paramter name. text:           Name used text output. md:             Name used markdown output. latex:          Name used latex output. description:    Verbose textual description parameter. mult_str Text string replace * values units. infinity Text string replace infinity time intervals column headers. digits Number significant figures report (set NULL disable rounding) text_format Either \"md\" markdown \"text\" (default) plain text. notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")). max_height Maximum height final table inches (value NULL use 100 inches). max_width Maximum width final table inches (value NULL use 100 inches). max_row Maximum number rows page. Spillover hang side page.. max_col Maximum number columns page. Spillover wrapped multiple pages.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_nca_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"list containing following elements raw_nca:     Raw PKNCA output. isgood:      Boolean indicating exit status function. one_table:   Dataframe entire table first lines containing header. one_body:    Dataframe entire table (data ). one_header:  Dataframe entire header (row body, data). tables:      Named list tables. list element output msgs:        Vector text messages describing errors found. format build_span.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/mk_table_nca_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"ID CMT AUClast Cmax AUCinf,obs  day*ng/mL ng/mL day*ng/mL [0,21] [0,inf] 1 BM_ng_ml 48,900 2,580 244,000 1 C_ng_ml 5,900 690 9,590 2 BM_ng_ml 29,500 1,500 271,000 2 C_ng_ml 8,240 750 17,000 3 BM_ng_ml 23,600 1,180 192,000 3 C_ng_ml 6,140 670 9,520 4 BM_ng_ml 34,300 1,690 282,000 4 C_ng_ml 6,030 638 10,900 5 BM_ng_ml 43,700 2,200 277,000 5 C_ng_ml 7,590 855 15,900 6 BM_ng_ml 26,100 1,310 215,000 6 C_ng_ml 6,440 611 12,600 7 BM_ng_ml 19,400 993 159,000 7 C_ng_ml 6,460 554 13,200 8 BM_ng_ml 29,900 1,550 325,000 8 C_ng_ml 6,730 501 16,300 9 BM_ng_ml 40,400 2,060 250,000 9 C_ng_ml 8,810 1,100 16,300 10 BM_ng_ml 26,700 1,350 159,000 10 C_ng_ml 8,760 828 16,000 11 BM_ng_ml 35,100 1,740 530,000 11 C_ng_ml 6,520 553 14,400 12 BM_ng_ml 34,000 1,720 278,000 12 C_ng_ml 5,160 580 8,700 13 BM_ng_ml 28,200 1,490 158,000","code":"# We need a state variable to be define sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE  state = sess_res$state  # Pulls out the active analysis current_ana = NCA_fetch_current_ana(state)  # This is the raw PKNCA output pknca_res = NCA_fetch_ana_pknca(state, current_ana)  # Parameter reporting details from the ruminate configuration nps  = state[[\"NCA\"]][[\"nca_parameters\"]][[\"summary\"]]  # Building the figure mk_res = mk_table_nca_params(nca_res = pknca_res, nps=nps, digits=3) mk_res$tables[[\"Table 1\"]]$ft .cl-914f53b2{}.cl-914b2bd4{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-914c6440{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-914c7142{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c7143{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c714c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c7156{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c7157{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c7158{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c7160{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0.3pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c7161{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0.3pt solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c716a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c716b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c716c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c7174{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 2pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c717e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 0.3pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-914c717f{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0.3pt solid rgba(0, 0, 0, 1.00);border-right: 2pt solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}IDCMTAUClastCmaxAUCinf,obsday*ng/mLng/mLday*ng/mL[0,21][0,inf]1BM_ng_ml48,9002,580244,0001C_ng_ml5,9006909,5902BM_ng_ml29,5001,500271,0002C_ng_ml8,24075017,0003BM_ng_ml23,6001,180192,0003C_ng_ml6,1406709,5204BM_ng_ml34,3001,690282,0004C_ng_ml6,03063810,9005BM_ng_ml43,7002,200277,0005C_ng_ml7,59085515,9006BM_ng_ml26,1001,310215,0006C_ng_ml6,44061112,6007BM_ng_ml19,400993159,0007C_ng_ml6,46055413,2008BM_ng_ml29,9001,550325,0008C_ng_ml6,73050116,3009BM_ng_ml40,4002,060250,0009C_ng_ml8,8101,10016,30010BM_ng_ml26,7001,350159,00010C_ng_ml8,76082816,00011BM_ng_ml35,1001,740530,00011C_ng_ml6,52055314,40012BM_ng_ml34,0001,720278,00012C_ng_ml5,1605808,70013BM_ng_ml28,2001,490158,000"},{"path":"https://ruminate.ubiquity.tools/reference/nca_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds NCA Code from ui Elements — nca_builder","title":"Builds NCA Code from ui Elements — nca_builder","text":"Takes current analysis state object creates code run analysis","code":""},{"path":"https://ruminate.ubiquity.tools/reference/nca_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds NCA Code from ui Elements — nca_builder","text":"","code":"nca_builder(state)"},{"path":"https://ruminate.ubiquity.tools/reference/nca_builder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds NCA Code from ui Elements — nca_builder","text":"state NCA state NCA_fetch_state()","code":""},{"path":"https://ruminate.ubiquity.tools/reference/nca_builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds NCA Code from ui Elements — nca_builder","text":"NCA state NCA current analysis built.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/nca_builder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds NCA Code from ui Elements — nca_builder","text":"","code":"# We need a module variables to be defined sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE  state = sess_res$state  state = nca_builder(state)"},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_ev.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots Timecourse of Rules Simulations — plot_sr_ev","title":"Plots Timecourse of Rules Simulations — plot_sr_ev","text":"","code":"Plots the timecourse of `simulate_rules()` output."},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_ev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots Timecourse of Rules Simulations — plot_sr_ev","text":"","code":"plot_sr_ev(   sro = NULL,   fpage = 1,   fcol = \"id\",   xcol = \"time\",   error_msgs = NULL,   ylog = TRUE,   ylab_str = \"Amount\",   xlab_str = \"Time\",   post_proc = \"fig  = fig + ggplot2::theme_light()\",   evplot = c(1, 4),   fncol = 4,   fnrow = 2 )"},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_ev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots Timecourse of Rules Simulations — plot_sr_ev","text":"sro Output 'simulate_rules()'. fpage facets selected multiple pages generated indcates       page return. fcol Name column facet NULL disable faceting (\"id\"). xcol Name column take x-data (\"time\"). error_msgs Named list error messages overwrite (NULL ylog Boolean enable log10 scaling y-axis (TRUE ylab_str Label y-axis (\"Output\" xlab_str Label x-axis (\"Output\" post_proc Character object post processing post-processing code figure object named fig internall  (\"fig = fig + theme_light()\") evplot Evids plot can 1 4 fncol Number columns faceted output. fnrow Number rows faceted output.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_ev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots Timecourse of Rules Simulations — plot_sr_ev","text":"List followin1g elements: isgood:       Return status function. msgs:         Error warning messages issues encountered. npages:       Total number pages using current configuration. error_msgs:   List error messages used. dsp:          Intermediate dataset generated sro plot ggplot. fig:          Figure generated.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_ev.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots Timecourse of Rules Simulations — plot_sr_ev","text":"detailed examples see vignette(\"clinical_trial_simulation\", package = \"ruminate\").","code":""},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_ev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots Timecourse of Rules Simulations — plot_sr_ev","text":"","code":"library(formods) library(ggplot2)  # For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: if(is_installed(\"rxode2\")){ library(rxode2) set.seed(8675309) rxSetSeed(8675309)  my_model = function ()  {     description <- \"One compartment PK model with linear clearance using differential equations\"     ini({         lka <- 0.45         label(\"Absorption rate (Ka)\")         lcl <- 1         label(\"Clearance (CL)\")         lvc <- 3.45         label(\"Central volume of distribution (V)\")         propSd <- c(0, 0.5)         label(\"Proportional residual error (fraction)\")         etalcl ~ 0.1     })     model({         ka <- exp(lka)         cl <- exp(lcl + etalcl)         vc <- exp(lvc)         kel <- cl/vc         d/dt(depot) <- -ka * depot         d/dt(central) <- ka * depot - kel * central         Cc <- central/vc         Cc ~ prop(propSd)     }) }  # This creates an rxode2 object object  = rxode(my_model)  # If you want details about the parameters, states, etc # in the model you can use this: rxdetails = fetch_rxinfo(object)  rxdetails$elements  # Next we will create subjects. To do that we need to  # specify information about covariates: nsub = 2 covs = list(   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )  subs = mk_subjects(object = object,                    nsub   = nsub,                    covs   = covs)  head(subs$subjects)  rules = list(   dose = list(     condition = \"TRUE\",     action    = list(       type  = \"dose\",       state     = \"central\",        values    = \"c(1)\",       times     = \"c(0)\",       durations = \"c(0)\")     ) )  # We evaulate the rules for dosing at time 0 eval_times =  0  # Stop 2 months after the last dose output_times = seq(0, 56, 1)  # This runs the rule-based simulations simres =    simulate_rules(     object        = object,     subjects      = subs[[\"subjects\"]],     eval_times    = eval_times,     output_times  = output_times,      rules         = rules)  # First subject data: sub_1 = simres$simall[simres$simall$id == 1, ]  # First subjects events evall = as.data.frame(simres$evall) ev_sub_1 = evall[evall$id ==1, ]  # All of the simulation data simall = simres$simall simall$id = as.factor(simall$id)  # Timecourse psim =    plot_sr_tc(     sro    = simres,     dvcols = \"Cc\") psim$fig  # Events pev =    plot_sr_ev(     sro    = simres,     ylog   = FALSE) pev$fig  } #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #>   #>   #> Warning: multi-subject simulation without without 'omega' #>   #>   #> Warning: multi-subject simulation without without 'omega' #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?"},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_tc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots Timecourse of Rules Simulations — plot_sr_tc","title":"Plots Timecourse of Rules Simulations — plot_sr_tc","text":"","code":"Plots the timecourse of `simulate_rules()` output."},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_tc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots Timecourse of Rules Simulations — plot_sr_tc","text":"","code":"plot_sr_tc(   sro = NULL,   dvcols = NULL,   fpage = 1,   fcol = \"id\",   xcol = \"time\",   error_msgs = NULL,   ylog = TRUE,   ylab_str = \"Output\",   xlab_str = \"Time\",   post_proc = \"fig  = fig + ggplot2::theme_light()\",   fncol = 4,   fnrow = 2 )"},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_tc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots Timecourse of Rules Simulations — plot_sr_tc","text":"sro Output 'simulate_rules()'. dvcols Character vector dependent variables. fpage facets selected multiple pages generated indcates       page return. fcol Name column facet NULL disable faceting (\"id\"). xcol Name column take x-data (\"time\"). error_msgs Named list error messages overwrite (NULL ylog Boolean enable log10 scaling y-axis (TRUE ylab_str Label y-axis (\"Output\" xlab_str Label x-axis (\"Output\" post_proc Character object post processing post-processing code figure object named fig internall  (\"fig = fig + theme_light()\") fncol Number columns faceted output. fnrow Number rows faceted output.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_tc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots Timecourse of Rules Simulations — plot_sr_tc","text":"List followin1g elements: isgood:       Return status function. msgs:         Error warning messages issues encountered. npages:       Total number pages using current configuration. error_msgs:   List error messages used. dsp:          Intermediate dataset generated sro plot ggplot. fig:          Figure generated.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_tc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots Timecourse of Rules Simulations — plot_sr_tc","text":"detailed examples see vignette(\"clinical_trial_simulation\", package = \"ruminate\").","code":""},{"path":"https://ruminate.ubiquity.tools/reference/plot_sr_tc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots Timecourse of Rules Simulations — plot_sr_tc","text":"","code":"library(formods) library(ggplot2)  # For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: if(is_installed(\"rxode2\")){ library(rxode2) set.seed(8675309) rxSetSeed(8675309)  my_model = function ()  {     description <- \"One compartment PK model with linear clearance using differential equations\"     ini({         lka <- 0.45         label(\"Absorption rate (Ka)\")         lcl <- 1         label(\"Clearance (CL)\")         lvc <- 3.45         label(\"Central volume of distribution (V)\")         propSd <- c(0, 0.5)         label(\"Proportional residual error (fraction)\")         etalcl ~ 0.1     })     model({         ka <- exp(lka)         cl <- exp(lcl + etalcl)         vc <- exp(lvc)         kel <- cl/vc         d/dt(depot) <- -ka * depot         d/dt(central) <- ka * depot - kel * central         Cc <- central/vc         Cc ~ prop(propSd)     }) }  # This creates an rxode2 object object  = rxode(my_model)  # If you want details about the parameters, states, etc # in the model you can use this: rxdetails = fetch_rxinfo(object)  rxdetails$elements  # Next we will create subjects. To do that we need to  # specify information about covariates: nsub = 2 covs = list(   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )  subs = mk_subjects(object = object,                    nsub   = nsub,                    covs   = covs)  head(subs$subjects)  rules = list(   dose = list(     condition = \"TRUE\",     action    = list(       type  = \"dose\",       state     = \"central\",        values    = \"c(1)\",       times     = \"c(0)\",       durations = \"c(0)\")     ) )  # We evaulate the rules for dosing at time 0 eval_times =  0  # Stop 2 months after the last dose output_times = seq(0, 56, 1)  # This runs the rule-based simulations simres =    simulate_rules(     object        = object,     subjects      = subs[[\"subjects\"]],     eval_times    = eval_times,     output_times  = output_times,      rules         = rules)  # First subject data: sub_1 = simres$simall[simres$simall$id == 1, ]  # First subjects events evall = as.data.frame(simres$evall) ev_sub_1 = evall[evall$id ==1, ]  # All of the simulation data simall = simres$simall simall$id = as.factor(simall$id)  # Timecourse psim =    plot_sr_tc(     sro    = simres,     dvcols = \"Cc\") psim$fig  # Events pev =    plot_sr_ev(     sro    = simres,     ylog   = FALSE) pev$fig  } #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #>   #>   #> Warning: multi-subject simulation without without 'omega' #>   #>   #> Warning: multi-subject simulation without without 'omega' #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?"},{"path":"https://ruminate.ubiquity.tools/reference/ruminate.html","id":null,"dir":"Reference","previous_headings":"","what":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"done creating Shiny interface different tools data transformation (dplyr tidyr), plotting (ggplot2), noncompartmental analysis (PKNCA). results can reported Excel, Word PowerPoint. state app can saved loaded later date. saved, script generated reproduce different actions Shiny interface. Runs pharmacometrics ruminate app.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ruminate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"","code":"ruminate(   host = \"127.0.0.1\",   port = 3838,   server_opts = list(shiny.maxRequestSize = 30 * 1024^2),   devmode = FALSE,   mksession = FALSE )"},{"path":"https://ruminate.ubiquity.tools/reference/ruminate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"host Hostname server (\"127.0.0.1\") port Port number app (3838) server_opts List options (names) vlues (value) e.g. list(shiny.maxRequestSize = 30 * 1024^2). devmode Boolean value, TRUE run ruminate development modules. mksession Boolean value, TRUE load test session data app testing.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ruminate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"Nothing returned, function just runs built-ruminate app.","code":""},{"path":[]},{"path":"https://ruminate.ubiquity.tools/reference/ruminate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"Maintainer: John Harrold john.m.harrold@gmail.com (ORCID)","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ruminate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"","code":"if (interactive()) { ruminate() }"},{"path":"https://ruminate.ubiquity.tools/reference/ruminate_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks ruminate Dependencies — ruminate_check","title":"Checks ruminate Dependencies — ruminate_check","text":"Looks suggested dependencies checks make sure installed.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ruminate_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks ruminate Dependencies — ruminate_check","text":"","code":"ruminate_check(verbose = TRUE)"},{"path":"https://ruminate.ubiquity.tools/reference/ruminate_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks ruminate Dependencies — ruminate_check","text":"verbose Logical indicating messages displayed","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ruminate_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks ruminate Dependencies — ruminate_check","text":"List following elements: all_found:    Boolean indicating packages found found_pkgs:   Character vector found packages missing_pkgs: Character vector missing packages","code":""},{"path":"https://ruminate.ubiquity.tools/reference/ruminate_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks ruminate Dependencies — ruminate_check","text":"","code":"fcres =ruminate_check() #>  #> ── Checking ruminate for suggested packages ──────────────────────────────────── #> ✔ found clipr #> ✔ found gridExtra #> ✔ found knitr #> ✔ found nlmixr2lib #> ✔ found nonmem2rx #> ✔ found prompter #> ✔ found rmarkdown #> ✔ found readxl #> ✔ found rxode2 #> ✔ found shinydashboard #> ✔ found testthat #> ✔ found ubiquity"},{"path":"https://ruminate.ubiquity.tools/reference/run_nca_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs NCA for the Current Analysis — run_nca_components","title":"Runs NCA for the Current Analysis — run_nca_components","text":"Takes current state runs current analysis state.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/run_nca_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs NCA for the Current Analysis — run_nca_components","text":"","code":"run_nca_components(   state,   components = c(\"nca\", \"fg_ind_obs\", \"tb_ind_obs\", \"tb_ind_params\"),   verbose = TRUE )"},{"path":"https://ruminate.ubiquity.tools/reference/run_nca_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs NCA for the Current Analysis — run_nca_components","text":"state NCA state NCA_fetch_state() components List components run. default run following. just need regenerate figure based current nca results can just specify component. valid verbose Logical enable disable messaging components: nca:               Run NCA analysis fg_ind_obs:        Build figure(s) indiviudal observations. tb_ind_obs:        Build table(s) indiviudal observations. tb_ind_params:     Build table(s) indiviudal parameters.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/run_nca_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs NCA for the Current Analysis — run_nca_components","text":"List following components: isgood:    Return status function. msgs:      Error messages issues encountered. nca_res:   PKNCA results run successful.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/run_nca_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs NCA for the Current Analysis — run_nca_components","text":"","code":"# We need a state object to use below sess_res = NCA_test_mksession() #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → ASM:   dest:   file.path(\"config\",\"report.docx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → ASM:   dest:   file.path(\"config\",\"report.pptx\") #> → ASM: including file #> → ASM:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → ASM:   dest:   file.path(\"config\",\"report.yaml\") #> → ASM: State initialized #> → ASM: setting word placeholders:  #> → ASM:   -> setting docx ph: HEADERLEFT = left header #> → ASM:   -> setting docx ph: HEADERRIGHT = right header #> → ASM:   -> setting docx ph: FOOTERLEFT = left footer #> → ASM: module isgood: TRUE #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → UD:   dest:   file.path(\"config\",\"report.docx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → UD:   dest:   file.path(\"config\",\"report.pptx\") #> → UD: including file #> → UD:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → UD:   dest:   file.path(\"config\",\"report.yaml\") #> → UD: State initialized #> → UD: module checksum updated:897d952fecbc804999396a96f9df4b20 #> → UD: module isgood: TRUE #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → DW:   dest:   file.path(\"config\",\"report.docx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → DW:   dest:   file.path(\"config\",\"report.pptx\") #> → DW: including file #> → DW:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → DW:   dest:   file.path(\"config\",\"report.yaml\") #> → DW: State initialized #> → DW: module checksum updated:5b0f0b05ee3ac7336a74c564bb6efdad #> → DW: loading data view idx: 1 #> → DW: setting name: Observations #> → DW: module checksum updated:1ac3e0afcc601f848943f92b854b3830 #> → DW:   -> filter #> → DW: module checksum updated:67aff6e926eba73b3ecb361d26624844 #> → DW:   -> filter #> → DW: module checksum updated:0234f6d458ef7487a3b2e991b2d0957b #> → DW:   -> mutate #> → DW: module checksum updated:37d0958f042076b974fdd3f894157822 #> → DW: loading data view idx: 2 #> → DW: setting name: PK 3mg SD IV #> → DW: module checksum updated:4e7ca05728d66df3adfcf87387f9543a #> → DW:   -> filter #> → DW: module checksum updated:2d95bc56262f46b7f135dd33fc4722b3 #> → DW:   -> filter #> → DW: module checksum updated:b8a30837145926d2d9cc6f788c10b7ed #> → DW:   -> filter #> → DW: module checksum updated:24b554ee8736ebc84979c896ac2e93c3 #> → DW:   -> filter #> → DW: module checksum updated:daad88263faf7cbf90871ed00a0dd275 #> → DW: loading data view idx: 3 #> → DW: setting name: PK 3mg SD IV (NCA) #> → DW: module checksum updated:a7b3ea35cdba272682716aa4619d3983 #> → DW:   -> filter #> → DW: module checksum updated:e8d2f77c0bd731995d845ee8be623e22 #> → DW:   -> filter #> → DW: module checksum updated:24cc7b591ca756a0abf560fb5295e04d #> → DW:   -> filter #> → DW: module checksum updated:f79ef26bdb4dac420c24650b9e96f721 #> → DW: loading data view idx: 4 #> → DW: setting name: PKPD 3mg SD IV (NCA) #> → DW: module checksum updated:c737e8b3a28ba600a83ddf58a969c90a #> → DW:   -> filter #> → DW: module checksum updated:4c0d054f8ec47ae97fd1c650d8ddad55 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW:   -> filter #> → DW: module checksum updated:1e3d65ec1bd6ee5850d67bd2250e3223 #> → DW: module isgood: TRUE #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_se #> ! NCA: Parameter specified in YAML is not a valid PKNCA parameter: sparse_df #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\") #> → NCA:   dest:   file.path(\"config\",\"report.docx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\") #> → NCA:   dest:   file.path(\"config\",\"report.pptx\") #> → NCA: including file #> → NCA:   source: file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\") #> → NCA:   dest:   file.path(\"config\",\"report.yaml\") #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading element idx: 1 #> → NCA:   -> setting name: PK Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_3 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 1 #> → NCA: loading element idx: 2 #> → NCA:   -> setting name: PK/PD Example #> → NCA:   -> notes found and set #> → NCA:   -> setting data source: DW_myDS_4 #> → NCA: NCA_add_int: append #> → NCA: NCA_add_int: append #> → NCA: added element idx: 2 #> → NCA: module isgood: TRUE state = sess_res$state  state = run_nca_components(state, components=\"tb_ind_params\") #> → NCA: module checksum updated:a4357a489d9bc0e6f17f16220fe5ab04"},{"path":"https://ruminate.ubiquity.tools/reference/rx2other.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts an rxode2 Object Into Specified Model Format — rx2other","title":"Converts an rxode2 Object Into Specified Model Format — rx2other","text":"rxode2 nlmixr2 model object can use function translate object formats. See output_type allowed formats. order need least one -subject variability term one endpoint. missing dummy values added. dummy values -subject variablitiy IIV POP_RUMINATE, TV_RUMINATE, ETA.RUMINATE. dummy terms endpoints OUT_RUMINATE add.OUT_RUMINATE.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/rx2other.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts an rxode2 Object Into Specified Model Format — rx2other","text":"","code":"rx2other(   object,   out_type = \"nonmem\",   dataset = NULL,   export_name = \"my_model\",   export_path = tempfile(pattern = \"dir\") )"},{"path":"https://ruminate.ubiquity.tools/reference/rx2other.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts an rxode2 Object Into Specified Model Format — rx2other","text":"object rxode2 model object out_type Output type (either \"nonmem\", \"monolix\") dataset Optional dataset export_name Basename models used export_path Location place output files (default tempdir())","code":""},{"path":"https://ruminate.ubiquity.tools/reference/rx2other.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts an rxode2 Object Into Specified Model Format — rx2other","text":"List following elements: isgood:     Return status function. msgs:       Error warning messages issues encountered. files:      succesful contain list entry file generated support requested format. current file format. example \"nonmem\" selected include elements \"ctl\" \"csv\". lists following format: fn:       Exported file name fn_full:  Exported file name full path. contents: Contents file.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/rx2other.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts an rxode2 Object Into Specified Model Format — rx2other","text":"Known issues: specified bioavailability model, fail Monolix conversion.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/rx2other.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts an rxode2 Object Into Specified Model Format — rx2other","text":"","code":"library(ruminate) if( Sys.getenv(\"ruminate_rxfamily_found\") == \"TRUE\"){  # First create an rxode2 model:  library(rxode2)  one.compartment <- function() {    rxode2::ini({      tka <- log(1.57); label(\"Ka\")      tcl <- log(2.72); label(\"Cl\")      tv <- log(31.5); label(\"V\")      eta.ka ~ 0.6      eta.cl ~ 0.3      eta.v ~ 0.1      add.sd <- 0.7    })    # and a model block with the error specification and model specification    rxode2::model({      ka <- exp(tka + eta.ka)      cl <- exp(tcl + eta.cl)      v <- exp(tv + eta.v)      d/dt(depot) <- -ka * depot      d/dt(center) <- ka * depot - cl / v * center      cp <- center / v      cp ~ add(add.sd)    })  }   nmout = rx2other(one.compartment, out_type=\"nonmem\")  } #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments"},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Rule-Based simulates — simulate_rules","title":"Rule-Based simulates — simulate_rules","text":"Simulate rxode2 model based rules evaluated specified time-points. example want titrate dosing based individual plasma levels create rule changes dosing specified time points based last observation user.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rule-Based simulates — simulate_rules","text":"","code":"simulate_rules(   object,   subjects,   eval_times,   output_times,   time_scales = NULL,   rules,   rx_options = list(),   preamble = \"\",   pbm = \"Evaluation times\",   smooth_sampling = TRUE )"},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rule-Based simulates — simulate_rules","text":"object rxode2 model object  ID string corresponds ID used call modules UI elements subjects Dataframe subject level information. eval_times Vector simulation times evaulate rules (units time units system). output_times Specific output times include. times included well ensure proper evaluation rules. time_scales Optional list timescale information include output. rules List rules, see description format. rx_options List options pass rxSolve(). preamble Character string user-defined code execute rule-evaluation environment (e.g. can put user-defined functions ). pbm Progress bar message, set NULL disable. smooth_sampling Boolean TRUE insert sampling just dosing make sampling smooth.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rule-Based simulates — simulate_rules","text":"List following elements: isgood:     Return status function. msgs:       Error warning messages issues encountered. simall:     Simulation results. ev_history: event table entire simulation history. eval_times: Evaluation time points system time scale eval_times_df: Data frame evaluation time points column system time scale columns named time scales.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rule-Based simulates — simulate_rules","text":"detailed examples see vignette(\"clinical_trial_simulation\", package = \"ruminate\") underlying simulations run using rxode2, need rxode2 system object. can either simulate subjects load file. Next need define set rules. set conditions actions. evaluation time point conditions evaluated. condition met actions associated condition executed. example, visit (evaluation time point) trough PK certain level (condition) may want increase dosing regimen next dosing cycle (action).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"creating-subjects","dir":"Reference","previous_headings":"","what":"Creating subjects","title":"Rule-Based simulates — simulate_rules","text":"Subjects expected data frame following column headers: id Individual subject id Names parameters iiv specified ini section rxode2 function specification Names covariates used model. mk_subjects() — Creates subjects simulation sampling based -subject variability generating covariate information based user specifications.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"covariates","dir":"Reference","previous_headings":"","what":"Covariates","title":"Rule-Based simulates — simulate_rules","text":"covs input list following structure: type: Can either “fixed”, “discrete”, “continuous”. sampling: field needed “continuous” covariate ’ type can either “random”, “normal” “log-normal”. values: field depends type optional sampling . fixed: single value. discrete: vector possible discrete elements. continuous, random: Two values first lower bound second upper bound. continuous, normal: Two values first mean second variance. continuous, log-normal: Two values first mean second variance. examples shows SEX_ID randomly sampled values specified, SUBTYPE_ID fixed value, WT sampled log-normal distribution.","code":"covs = list(   SEX_ID     = list(type     = \"discrete\",                     values   = c(0,1)),   SUBTYPE_ID = list(type     = \"fixed\",                     values   = c(0)),   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )"},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"rule-based-simulations","dir":"Reference","previous_headings":"","what":"Rule-based simulations","title":"Rule-Based simulates — simulate_rules","text":"simulate_rules() — run simulations based rule definitions .","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"rules","dir":"Reference","previous_headings":"","what":"Rules","title":"Rule-Based simulates — simulate_rules","text":"Rules named list list name can short descriptive label used remember rule . names returned columns simulated data frame. condition: Character string evaluates either TRUE FALSE. true action portion triggered. list objects available see Rule-evaluation environment . fail_flag: Flag set rule_id column condition met (set \"false\" specified). true_flag: Flag set rule_id column condition met (set \"true\" specified). action: rule trigger can following: type: defines action type can either \"dose\", \"set state\", \"manual\". Based type action field expect different elements. Dosing: action type: \"dose\" values: Character string evaluates numeric vector dosing amounts (e.g. \"c(3,  3,  3,  3)\") times: Character string evaluates numeric vector times (e.g. \"c(0, 14, 28, 42)\") durations: Character string evaluates numeric vector durations (e.g. \"c(0, 0, 0, 0)\", zero bolus dosing) Changing state value: action type: \"set state\" state: Character string name state set (\"Ac\") value: Character string evaluates numeric value state (e.g. \"Ac/2\" set state half value Ac evaluation point) Manual modification simulation: action type: \"manual\" code: Character string code evaluate.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"rule-evaluation-environment","dir":"Reference","previous_headings":"","what":"Rule-evaluation environment","title":"Rule-Based simulates — simulate_rules","text":"Beyond simple simulations necessary execute actions based current previous state system. reason, condition elements action (e.g., values, times durations dose action type) evaluated, following objects available evaluation point: outputs: value model output. states: value named state compartment. covariates: value named covariate. subject-level parameters: value named parameter. rule value: last value rule evaluated . id: Current subject id. time: Current evaluation time. SI_SUB_HISTORY: data frame simulation history current subject current evaluation point. SI_subjects: subjects data frame. SI_eval_times: Vector evaluation times. SI_interval_ev: events table ’s current state given simulation interval. SI_ev_history: history event table containing events leading current interval. SI_ud_history: free form object user can define alter within “manual”action type (ud-user defined, history).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"the-following-functions-will-be-available-","dir":"Reference","previous_headings":"","what":"The following functions will be available:","title":"Rule-Based simulates — simulate_rules","text":"SI_fpd: function fetch previous dose (fpd) given id state. example current id state Ac following:","code":"SI_fpd(id=id, state=\"Ac\")"},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"time-scales","dir":"Reference","previous_headings":"","what":"Time scales","title":"Rule-Based simulates — simulate_rules","text":"can include columns output different time scales wish. need create list format . One element system short name system time scale. next details list containing short names time scale want include. list verbose name time scale (verb) numerical conversion indicating time scale relates others. define weeks days basis seconds.","code":"time_scales = list(system=\"days\",                 details= list(                   weeks = list(verb=\"Weeks\",    conv=1/(60*60*24*7)),                   days  = list(verb=\"Days\",     conv=1/(60*60*24))))"},{"path":"https://ruminate.ubiquity.tools/reference/simulate_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rule-Based simulates — simulate_rules","text":"","code":"library(formods) library(ggplot2)  # For more information see the Clinical Trial Simulation vignette: # https://ruminate.ubiquity.tools/articles/clinical_trial_simulation.html  # None of this will work if rxode2 isn't installed: if(is_installed(\"rxode2\")){ library(rxode2) set.seed(8675309) rxSetSeed(8675309)  my_model = function ()  {     description <- \"One compartment PK model with linear clearance using differential equations\"     ini({         lka <- 0.45         label(\"Absorption rate (Ka)\")         lcl <- 1         label(\"Clearance (CL)\")         lvc <- 3.45         label(\"Central volume of distribution (V)\")         propSd <- c(0, 0.5)         label(\"Proportional residual error (fraction)\")         etalcl ~ 0.1     })     model({         ka <- exp(lka)         cl <- exp(lcl + etalcl)         vc <- exp(lvc)         kel <- cl/vc         d/dt(depot) <- -ka * depot         d/dt(central) <- ka * depot - kel * central         Cc <- central/vc         Cc ~ prop(propSd)     }) }  # This creates an rxode2 object object  = rxode(my_model)  # If you want details about the parameters, states, etc # in the model you can use this: rxdetails = fetch_rxinfo(object)  rxdetails$elements  # Next we will create subjects. To do that we need to  # specify information about covariates: nsub = 2 covs = list(   WT         = list(type     = \"continuous\",                     sampling = \"log-normal\",                     values   = c(70, .15)) )  subs = mk_subjects(object = object,                    nsub   = nsub,                    covs   = covs)  head(subs$subjects)  rules = list(   dose = list(     condition = \"TRUE\",     action    = list(       type  = \"dose\",       state     = \"central\",        values    = \"c(1)\",       times     = \"c(0)\",       durations = \"c(0)\")     ) )  # We evaulate the rules for dosing at time 0 eval_times =  0  # Stop 2 months after the last dose output_times = seq(0, 56, 1)  # This runs the rule-based simulations simres =    simulate_rules(     object        = object,     subjects      = subs[[\"subjects\"]],     eval_times    = eval_times,     output_times  = output_times,      rules         = rules)  # First subject data: sub_1 = simres$simall[simres$simall$id == 1, ]  # First subjects events evall = as.data.frame(simres$evall) ev_sub_1 = evall[evall$id ==1, ]  # All of the simulation data simall = simres$simall simall$id = as.factor(simall$id)  # Timecourse psim =    plot_sr_tc(     sro    = simres,     dvcols = \"Cc\") psim$fig  # Events pev =    plot_sr_ev(     sro    = simres,     ylog   = FALSE) pev$fig  } #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #>   #>   #> Warning: multi-subject simulation without without 'omega' #>   #>   #> Warning: multi-subject simulation without without 'omega' #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?"},{"path":"https://ruminate.ubiquity.tools/reference/span_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread Large Table Over Smaller Tables — span_table","title":"Spread Large Table Over Smaller Tables — span_table","text":"Takes large table spreads smaller tables paginate . preserve common row  information left separate columns according maximum specifications. final tables widths less equal max_col max_width, heights less equal max_row max_height.","code":""},{"path":"https://ruminate.ubiquity.tools/reference/span_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread Large Table Over Smaller Tables — span_table","text":"","code":"span_table(   table_body = NULL,   row_common = NULL,   table_body_head = NULL,   row_common_head = NULL,   header_format = \"text\",   obnd = NULL,   max_row = 20,   max_col = 10,   max_height = 7,   max_width = 6.5,   table_alignment = \"center\",   inner_border = officer::fp_border(color = \"black\", width = 0.3),   outer_border = officer::fp_border(color = \"black\", width = 2),   set_header_inner_border_v = TRUE,   set_header_inner_border_h = TRUE,   set_header_outer_border = TRUE,   set_body_inner_border_v = TRUE,   set_body_inner_border_h = FALSE,   set_body_outer_border = TRUE,   notes_detect = NULL )"},{"path":"https://ruminate.ubiquity.tools/reference/span_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread Large Table Over Smaller Tables — span_table","text":"table_body Data frame body large table. row_common Data frame common rows. table_body_head Data frame matrix headers table body. row_common_head Data frame matrix headers common rows. header_format Format header either \"text\" (default) \"md\" markdown. obnd Optional onbrand object used format markdown. default NULL value use default formatting. max_row Maximum number rows output tables (value NULL set max_row number rows table). max_col Maximum number columns output tables (value NULL set max_col number columns table). max_height Maximum height final table inches (value NULL use 100 inches). max_width Maximum width final table inches (value NULL use 100 inches). table_alignment Character string specifying alignment #'table (body headers). Can \"center\" (default), \"left\", \"right\", \"justify\" inner_border Border object inner border lines defined using officer::fp_border() outer_border Border object outer border lines defined using officer::fp_border() set_header_inner_border_v Boolean value enable disable inner vertical borders headers set_header_inner_border_h Boolean value enable disable inner horizontal borders headers set_header_outer_border Boolean value enable disable outer border headers set_body_inner_border_v Boolean value enable disable inner vertical borders body set_body_inner_border_h Boolean value enable disable inner horizontal borders body set_body_outer_border Boolean value enable disable outer border borders body notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")).","code":""},{"path":"https://ruminate.ubiquity.tools/reference/span_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread Large Table Over Smaller Tables — span_table","text":"list following elements isgood:    Boolean indicating exit status function. one_body:  Full table headers. one_table: Full table headers. msgs:      Vector text messages describing errors found. tables:    Named list tables. list element output. format build_span().","code":""},{"path":"https://ruminate.ubiquity.tools/reference/span_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spread Large Table Over Smaller Tables — span_table","text":"way data frames relate mapped . dimensions different data frames identified (nrow x ncol)","code":"#|-------------------------------------| --- #|                 |                   |  ^ #|                 |                   |  | #| row_common_head |  table_body_head  |  | m #|      m x n      |       m x c       |  | #|                 |                   |  v #|-------------------------------------| --- #|                 |                   |  ^ #|                 |                   |  | #|    row_common   |    table_body     |  | r #|      r x n      |      r x c        |  | #|                 |                   |  | #|                 |                   |  v #|-------------------------------------| --- # #|<--------------->|<----------------->| #        n                   c"},{"path":[]},{"path":"https://ruminate.ubiquity.tools/reference/span_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spread Large Table Over Smaller Tables — span_table","text":"","code":"library(formods) library(readxl) library(dplyr) library(tidyr)  # First we need to create some data.  # This will read in a test dataset: DS = readxl::read_excel(  path  = system.file(package=\"formods\",                       \"test_data\",                       \"TEST_DATA.xlsx\"),  sheet = \"DATA\")  # This will filter the dataset down and modify the formatting DS = dplyr::filter(DS, EVID == 0)                          |>   dplyr::filter(ID <= 30)                                  |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT  = ifelse(.data[[\"CMT\"]] == \"C_ng_ml\",                               \"Test Article\",                               .data[[\"CMT\"]]))              |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT = ifelse(.data[[\"CMT\"]] == \"BM_ng_ml\",                              \"Biomarker\",                              .data[[\"CMT\"]]))               |>   dplyr::rename(Analyte = \"CMT\")                           |>   dplyr::mutate(DV = ifelse(.data[[\"DV\"]] == 0, \"BQL\", .data[[\"DV\"]]))  # This represents the large table we want to split up into smaller tables  wide_df = tidyr::pivot_wider(DS,   values_from = \"DV\",   names_from  = \"ID\")               |>   dplyr::arrange(Analyte, TIME)     |>   dplyr::mutate(TIME = as.character(.data[[\"TIME\"]]))      # The first two columns represent the rows # that are common across the tables: row_common = wide_df[,1:2]  # The remaining columns represent the body of the table: table_body = wide_df[,3:ncol(wide_df)]  # Next we create matrices that contain the header  # information for each component above: row_common_head = matrix(   data  = c(\"Time\", \"Analyte\",             \"(hr)\", \"(ng/ml)\"),   ncol  = 2,   byrow = TRUE)  table_body_head = matrix(   data  = c(rep(\"Subject ID\", times=ncol(table_body)),              names(table_body)),   ncol  = ncol(table_body),   byrow = TRUE)   # This builds all of the tables: span_res = span_table(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       notes_detect    = c(\"BQL\"))  # This will show you the first one: span_res$tables[[\"Table 1\"]]$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`  #> header has 2 row(s)  #> body has 20 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4  # This will build a single table with the rows and  # column ranges specified bs_res =   build_span(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       col_sel         = c(1:10),                       row_sel         = c(1:10),                       notes_detect    = c(\"BQL\"))  # This will show you the result: bs_res$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`  #> header has 2 row(s)  #> body has 10 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6   7    8    9    10 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 643 1050 1130   744 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 644 1051 1134 745.9 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 645 1052 1138 747.8 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 647 1055 1146 751.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4 651 1059 1162 759.2"},{"path":"https://ruminate.ubiquity.tools/news/index.html","id":"ruminate-030-development-version","dir":"Changelog","previous_headings":"","what":"ruminate 0.3.0 (development version)","title":"ruminate 0.3.0 (development version)","text":"Fix rxode 3.0 release. Using new yaml save methodology formods, break previous saved states Added preload() mk_preload() files Updated templates/ruminate.R templates/ruminate_development.R apps use preload file unzipped analysis state.","code":""},{"path":"https://ruminate.ubiquity.tools/news/index.html","id":"ruminate-024","dir":"Changelog","previous_headings":"","what":"ruminate 0.2.4","title":"ruminate 0.2.4","text":"CRAN release: 2024-05-28 Fixed issue changes data views leading PH appearing NCA data source selection Added sparse test dataset","code":""},{"path":"https://ruminate.ubiquity.tools/news/index.html","id":"ruminate-023","dir":"Changelog","previous_headings":"","what":"ruminate 0.2.3","title":"ruminate 0.2.3","text":"CRAN release: 2024-05-18 Added default naming NCA analysis datasets Added searching selection NCA parameters Fixed sparse sampling NCA Added CTS (Clinical trial simulator) module (development)","code":""},{"path":"https://ruminate.ubiquity.tools/news/index.html","id":"ruminate-022","dir":"Changelog","previous_headings":"","what":"ruminate 0.2.2","title":"ruminate 0.2.2","text":"CRAN release: 2024-03-14 Fixed error default ruminate app causing crash Separated ruminate.R sample app two separate (default one one developent.)","code":""},{"path":"https://ruminate.ubiquity.tools/news/index.html","id":"ruminate-021","dir":"Changelog","previous_headings":"","what":"ruminate 0.2.1","title":"ruminate 0.2.1","text":"CRAN release: 2023-12-11 Fixed use suggests conditional.","code":""},{"path":"https://ruminate.ubiquity.tools/news/index.html","id":"ruminate-020","dir":"Changelog","previous_headings":"","what":"ruminate 0.2.0","title":"ruminate 0.2.0","text":"CRAN release: 2023-12-02 Support rxode2 NONMEM models Fixed bug NCA module column details didn’t update properly switching analyses. Fixed bug detecting dosing rows left dosing records data frame subsequent NCA. Fixed bug parameter(s) added interval resulting [[numeric]] reported values. Now time interval added subsequent additions update parameters interval. Fixed stand-alone code generation copy clipboard.","code":""},{"path":"https://ruminate.ubiquity.tools/news/index.html","id":"ruminate-011","dir":"Changelog","previous_headings":"","what":"ruminate 0.1.1","title":"ruminate 0.1.1","text":"CRAN release: 2023-08-29 Initial release","code":""}]
